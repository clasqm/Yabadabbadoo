#!env yab
 
#########################################
###########Prologue #####################
#########################################
ProgramName$ ="Yabadabbadoo"
AuthorName$ = "Michel Clasquin-Johnson"
ProgramVersion$ = "v0.4 beta"
ProgramBriefDescription$ = "An alternative IDE for Jan Bungeroth's yab programming language."
ProgramLicense$ = "Public Domain"
ProgramAcknowledgements$ ="With thanks to Lelldorin for his help on the Find function, and to Rene Gollent, bbjimmy and Humdinger for help with identifying file types."
 
// set DEBUG = 1 to print out all messages on the console
DEBUG = 0
//change this to DEBUG = 0 when you are ready to bind the program for distribution

//Yabadabbadoo now requires the libclasqm package to be installed. 
import libclasqm_main 

###############################
#####Global Variables for main window#######
###############################
PreferredScreen$ = "3" //i.e 4
ProjectIsOpen=0
ScriptAssistant=0
yabAssistant=0
yabLocation$=""
ProjectPath$ = ""
ProjectBasePath$ = "/boot/home"
ProjectSubPath$ = ""
ProjectOtherPath$ = ""
ProjectBinderPath$ = ""
ProjectPackagingPath$ = ""
ProjectPrologue$ = ""
ProjectMainloop$ = ""
ProjectData$ = ""
ProjectREADME$ = ""
ProjectNewYabfile$ = ""
ProjectName$=""
ProjectIcon$ = ""
SelectedRoutine$ = "1"
MainXLeft = 217
MainYTop = 5
MainXRight = 510
MainYBottom = 760

 
###############################
####Global Variables for ScriptAssistant#####
###############################
SA_tempfile$ = TempDir$() + "/ScriptAssistant.tmp"
SA_displaywins=0
SA_dispx=50: SA_dispy=50
SA_promode = 0
SA_across = 5
SA_updown = 5
SA_acrossend = SA_across + 200
SA_updownend = SA_updown + 100
SA_action$=""
 
###############################
####Global Variables for YabAssistant#####
###############################
dim YA_descriptionarr$(1)
dim YA_fulltextarr$(1)
YA_displaywins=0
YA_dispx=210
YA_dispy=50
YAYTop=115
 
###############################
####Global Variables for YabEditor#####
###############################
YECurrentFile$=""
YESearchText$=""
YECurrentFile$ = ""
YEtempval$ = ""
YESnippet$ = ""
YEStartingTime$=Mid$(Time$,7,2):wait 0.75
YECurrentTime$=StartingTime$
dim YESnippets$(15)
 
###############################################
#######Preliminary Commands####################
###############################################
 
//grab Workspace 4 for exclusive use

tempval = alert "Yabbadabbadoo uses a lot of screen real estate. Open up in Workspace " + str$(val(PreferredScreen$) +1) + "?", "Yes", "", "No", "idea"
if tempval = 1 system("/boot/system/apps/Workspaces " + PreferredScreen$)
wait 0.25

//1024 x 768 minimum screen resolution
CheckScreenSize()

//is there a working yab executable installed? Get its pathname
yabLocation$ = CheckForYab$()

OpenWindow()

//YEOpenWindow():YEDisableButtons()
LaunchSA(): window set "SA_MainWindow", "minimize"
LaunchYA(): window set "YA_MainWindow", "minimize"
if peek("argument") > 0 then
	ProjectPath$=peek$("argument")
	if ProjectPath$ = "--help" or ProjectPath$ = "-h" then
		print "Yabadabbadoo " + ProgramVersion$
		print " "
		print "Usage: Yabadabbadoo <OPTIONS> <path_to_project_directory>/<path_to_.ybdproj_file>"
		print " "
		print "Options:\t--help \t-h\tthis help"
		print " "
		exit
	else
		SetProjectPathnames()
		OpenProject("fromstart")
	endif
else
	Wizard()
endif

################################################
################Main Message Loop###############
################################################
dim msg$(1)
while(not leavingLoop)
	nCommands = token(message$, msg$(), "|")
	for everyCommand = 1 to nCommands
		if(DEBUG and msg$(everyCommand)<>"") print msg$(everyCommand)
		switch(msg$(everyCommand))
			////////////FILE MENU////////
			case "_QuitRequested":
			case "MainWindow:_QuitRequested":
			case "MainWindow:File:Quit"
				leavingLoop = true
				break
			///////PROJECT MENU/////////	
			case "MainWindow:Project:New":
				MakeNewProject()
				break
			case "MainWindow:Project:Open":
				OpenProject("")
				break
			case "MainWindow:Project:Backup":
				BackupProject()
				break
			case "MainWindow:Project:Stats":
				DisplayStats()
				break
			case "MainWindow:Project:Search":
				YECloseWindow()
				system("/boot/system/apps/TextSearch '" + ProjectPath$ + "' &")
				break
			case "MainWindow:Project:Replace":
				YECloseWindow()
				GlobalReplace()
				break
			case "MainWindow:Project:Code repositories:BitBucket":
				LaunchURL("http://bitbucket.org")
				break
			case "MainWindow:Project:Code repositories:GitHub":
				LaunchURL("http://github.com")
				break
			case "MainWindow:Project:Code repositories:SourceForge":
				LaunchURL("http://sourceforge.net")
				break
			case "MainWindow:Project:git:Initialize":
				YECloseWindow()
				GenerateNewYabfile()
				DisableButtons(): DisableMenu()
				system("Terminal ybd_git_init '" + ProjectPath$ +"'")
				EnableButtons(): EnableMenu()
				break
			case "MainWindow:Project:git:Push":
				YECloseWindow()
				GenerateNewYabfile()
				DisableButtons(): DisableMenu()
				system("Terminal ybd_git_push '" + ProjectPath$ +"'")
				EnableButtons(): EnableMenu()
				break
			case "MainWindow:Project:git:Pull":
				YECloseWindow()
				GenerateNewYabfile()
				DisableButtons(): 	DisableMenu()
				system("Terminal ybd_git_pull '" + ProjectPath$ +"'")
				EnableButtons(): EnableMenu()
				break
			case "MainWindow:Project:git:Install git support":
				InstallSupport("yabadabbadoo_github_integration")
				submenu set "Project","git", "Install git support", "disable", "MainWindow"
				pause 1
				CheckGitSupport()
				break
			/////////YAB MENU////////////
			case "MainWindow:yab:Generate yab file":
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				alert "A new yab file has been created in the binder directory.", "OK", "info"
				break
			case "MainWindow:yab:View yab file":
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				system("/boot/system/apps/Pe/Pe '"+ ProjectNewYabfile$  + "' &")
				break
			case "MainWindow:yab:Run":
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				system(yabLocation$ + " " + ProjectNewYabfile$ + " &")
				break
			case "MainWindow:yab:Run in Terminal":
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				system("Terminal " + yabLocation$ + " " + ProjectNewYabfile$ + " 2>&1")
				break
			case "MainWindow:yab:Run & display output":
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				RunAndDisplay(0)
				break
			case "MainWindow:yab:Bind":
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				system(yabLocation$ + " -bind /boot/home/Desktop/" + ProjectName$ + " " + ProjectNewYabfile$)
				system("chmod  +x /boot/home/Desktop/" + ProjectName$ + " &")
				system("mimeset -f /boot/home/Desktop/" + ProjectName$ + " &")
				system("settype -s application/x-vnd." +ProjectName$ + " " + "/boot/home/Desktop/" + ProjectName$ + " &")
				alert "A new bound executable has been created on the Desktop.", "OK", "info"
				break
			case "MainWindow:yab:Transfer to official IDE"
				YESaveFile(YECurrentFile$)
				GenerateNewYabfile()
				system ("/boot/system/apps/yab-IDE/yab-IDE &")
				wait 1
				system("/boot/system/Tracker " + ProjectBinderPath$ + " &")
				system("alert 'Yab-IDE does not allow programmatic loading of data at this stage. Open a file from the Menu and drag the Yabadabbadoo file into the dialogue. Any changes you make from then on will NOT transfer back to Yabbbadabbadoo.' OK")
				leavingLoop = true
				break
			case "MainWindow:yab:Compile":
				CompileApp()	
				break
			/////////PARTS MENU//////////
			case "PrologueButton":
			case "MainWindow:Parts:Prologue":
				YEOpenFile(ProjectPrologue$)
				break
			case "DataEditButton":
			case "MainWindow:Parts:Data":
				YEOpenFile(ProjectData$)
				break
			case "MainLoopButton":
			case "MainWindow:Parts:Main Loop":
				YEOpenFile(ProjectMainloop$)
				break
			case "ReadmeButton":
			case "MainWindow:Parts:README":
				system("/boot/system/apps/StyledEdit " + ProjectREADME$ + " &")
				break
			case "IconEditButton"
			case "MainWindow:Parts:Icon":
				system("/boot/system/apps/Icon-O-Matic '" + ProjectIcon$  + "' &")
				break
			case "PackageInfoEditButton"
				YEOpenFile(ProjectPackagingPath$ + "/.PackageInfo")
				break
			///////UTILITIES MENU////////
			case "MainWindow:Utilities:Open a Terminal"
				system("/boot/system/apps/Terminal &")
				break
			case "MainWindow:Utilities:Open Tracker"
				if ProjectPath$ = "" then
					system("/boot/system/Tracker /boot/home &")
				else
					system("/boot/system/Tracker " + ProjectPath$ + " &")
				endif
				break
			case "MainWindow:Utilities:System Prefs"
				system("/boot/system/Tracker /boot/system/preferences &")
				break
			case "MainWindow:Utilities:To-do Manager" 
				system("/boot/system/apps/vstm_GUI &")
				break
			case "MainWindow:Utilities:Install To-do Manager" 
				InstallSupport("vstm")
				Menu set "Utilities", "Install To-do Manager","disable","MainWindow"
				menu set "Utilities", "To-do Manager","enable","MainWindow"
				break
			case "MainWindow:Utilities:Calculator"
				system("open application/x-vnd.Haiku-DeskCalc &")
				break
			case"MainWindow:Utilities:ScriptAssistant":
				if ScriptAssistant=0 then
					window set "SA_MainWindow", "minimize"
					Menu set "Utilities", "ScriptAssistant","Mark","MainWindow"
					ScriptAssistant=1
				else
					window set "SA_MainWindow", "minimize" 
					Menu set "Utilities", "ScriptAssistant","Plain","MainWindow"
					ScriptAssistant=0
				endif
				break
			case"MainWindow:Utilities:yabAssistant":
				if yabAssistant=0 then
					window set "YA_MainWindow", "minimize"
					Menu set "Utilities", "yabAssistant","Mark","MainWindow"
					yabAssistant=1
				else
					window set "YA_MainWindow", "minimize"
					Menu set "Utilities", "yabAssistant","Plain","MainWindow"
					yabAssistant=0
				endif
				break
			case "MainWindow:Utilities:Restart Tracker"
				system("/boot/system/Tracker &")
				break
			case "MainWindow:Utilities:Restart Deskbar"
				system("/boot/system/Deskbar &")
				break
			case "MainWindow:Utilities:Create new shortcut"
				CreateShortcut()
				break
			////////HELP MENU////////////
			case "MainWindow:Help:Help":
				ShowHelp("Help", "Display")
				break
			case "MainWindow:Help:FAQ":
				ShowHelp("FAQ", "Display")
				break
			case "MainWindow:Help:Tutorial":
				ShowHelp("Tutorial", "Display")
				break
			case "MainWindow:Help:Hard Copy":
				ShowHelp("Tutorial", "HardCopy")
				ShowHelp("FAQ", "HardCopy")
				ShowHelp("Help", "HardCopy")
				alert "Help files have been generated to your Desktop", "OK", "info"
				break
			case "MainWindow:Help:Get e-book - Programming with yab":
				LaunchURL("https://www.smashwords.com/books/view/691720")
				break
			case "MainWindow:Help:Launch yab discussion forum":
				LaunchURL("http://yab.orgfree.com/forum/")
				break
			case "MainWindow:Help:Launch BeSly help database":
				LaunchURL("http://besly.de/")
				break
			case "MainWindow:Help:About"
				alert ProgramName$ + " " + ProgramVersion$ + "\n\n" + ProgramBriefDescription$ + "\n\nLicense: " + ProgramLicense$ + "\n\n" + ProgramAcknowledgements$, "OK", "info"
				break
			///////SUBROUTINE BUTTONS///////
			case "EditSubButton":
				YEOpenFile(ProjectSubPath$ + "/" + listbox get$ "SubBox", val(SelectedRoutine$))
				break
			case "RefreshSubButton"
				FillSubBox()
				break
			case "AddSubButton"
				CreateNewSub()
				break
			//#####ScriptAssistant commands####
			case "SA_ProMode0":
			case "SA_ProMode1":
				SA_promode = val(right$(msg$(everyCommand),1))
			 	DropBox Select "SA_ABC", 1
				SA_Generate("7")
				break
			case "SA_GoButton":
				SA_Preview()
				break
			case "SA_TryButton":
				SA_action$= TextControl Get$ "SA_TryText"
				SA_ParseTry()
				SA_Preview()
				break
			//######YabAssistant commands######
			case "YA_yabasicButton"
				YA_Fillerup("yabasic")
				break
			case "YA_yabButton"
				YA_Fillerup("yab")
				break
			case "YA_AllButton"
				YA_Fillerup("all")
				break
			case "YA_FindButton"
				YA_Fillerup("find")
			//#########yabEditor Commands#########
			case "YEMenuView:File:Save":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
				endif
				break
			case "YEMenuView:File:Transfer...:to Pe":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/Pe/Pe '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to StyledEdit":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/StyledEdit '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to Trope":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/Trope/Trope '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to CodeWalker":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/codewalker/CodeWalker '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to Koder":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/Koder '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to VIM":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/bin/gvim '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to Eddie":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/Eddie/Eddie '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to JuffEd":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/JuffEd/juffed '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to Sintegrial":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/STE/ste '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to Tea":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/Tea/tea '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
				break
			case "YEMenuView:File:Transfer...:to YATE":
				if window get "YEMainWindow","exists" = 1 then
					YESaveFile(YECurrentFile$)
					system("/boot/system/apps/yate/Yate97X86 '" + YECurrentFile$ + "' &")
					Window Close "YEMainWindow"
				endif
			case "YEMenuView:File:Close"
			case "YEQuitButton":
				YECloseWindow()
				break
			case "YEMenuView:Edit:Undo/Redo":
			case "YEUndoButton"
				if window get "YEMainWindow","exists" = 1 Textedit set "YEEditBox", "undo"
					break
				case "YEMenuView:Edit:Copy":
				case "YECopyButton":
					if window get "YEMainWindow","exists" = 1 Textedit set "YEEditBox", "copy"
				break
			case "YEMenuView:Edit:Cut":
			case "YECutButton":
				if window get "YEMainWindow","exists" = 1 Textedit set "YEEditBox", "cut"
				break
			case "YEMenuView:Edit:Paste":
			case "YEPasteButton":
				if window get "YEMainWindow","exists" = 1 Textedit set "YEEditBox", "paste"
				break
			case "YEMenuView:Edit:Copy to Snippet":
				if window get "YEMainWindow","exists" = 1 YECopy2Snippet()
				break
			case "YEMenuView:Edit:Clear Selection":
				if window get "YEMainWindow","exists" = 1 Textedit set "YEEditBox", "clear"
				break
			case "YEMenuView:Edit:Clear All":
				if window get "YEMainWindow","exists" = 1 then
					Textedit set "YEEditBox", "select-all"
					Textedit set "YEEditBox", "clear"
				endif
				break
			case "YEMenuView:Edit:Find":
			case "YEFindButton"
				if window get "YEMainWindow","exists" = 1 then
					YEtempval$ = trim$(Textcontrol Get$ "YESearchField")
					Textcontrol set "YESearchField", ""
					if YEtempval$ <> "" then
						YESearchText$ = YEtempval$
						YEFindstring(SearchText$)
						if window get "YEMainWindow","exists" = 1 then	
							menu set "Edit", "Find Again", "Enable", "YEMenuView" //after initial find, find again becomes available
							Option set "YEFindAgainButton", "enabled", 1 //the button too
						endif
					endif
				endif
				break
			case "YEMenuView:Edit:Find Again":
			case "YEFindAgainButton"
				if YESearchText$ <>"" then
					YEFindstring(YESearchText$)
				end if
				break
			case "YEMenuView:Edit:Replace":
				LocalReplace()
				break
			case "YEMenuView:Edit:Select All":
				Textedit set "YEEditBox", "select-all"
				break
			case "YEPasteSnippetButton"
				YEPasteSnippet()
				break
			//#########Run & Display Commands###########
			case "RADSpinButton"
				RunAndDisplay(spincontrol get "LineSelector")
				break
			case "RADWindow:_QuitRequested":
				window close "RADWindow"
				break
			//#######end of switches#############
			default:
				break
		end switch

		//####Commands that don't fit well in the switch loop######
		//#######################################
		//##########more main window commands##########
		if left$(msg$(everyCommand),15) ="SubBox:_Select:" SelectedRoutine$ = mid$(msg$(everyCommand),16)
		if left$(msg$(everyCommand),15) ="SubBox:_Invoke:" then
			SelectedRoutine$ = mid$(msg$(everyCommand),16)
			YEOpenFile(ProjectSubPath$ + "/" + listbox get$ "SubBox", val(SelectedRoutine$))
		endif
		
		//#####More ScriptAssistant commands####
		if left$(msg$(everyCommand),7) ="SA_CLI:" SA_action$ = mid$(msg$(everyCommand),8)

		if left$(msg$(everyCommand),7) = "SA_ABC:" SA_Generate(right$(msg$(everyCommand),1))

		//if left$(msg$(everyCommand),11) ="SA_TryText:" SA_action$ = mid$(msg$(everyCommand),9): SA_ParseTry():SA_Preview()
		//Would let the user type text then ENTER in the SA_CLI textbox
		//but it also activates when the user switches to a different widget - 
		//can't have windows opening when they feel like it
		//try to fix it later

		if left$(msg$(everyCommand),2) = "XB" Window Close "W" + mid$(msg$(everyCommand),3): SA_displaywins = SA_displaywins -1

		//#####More YabAssistant commands####
		if instr(msg$(everyCommand),"YA_KeyWordList:_Select") YA_BriefDisplay(val(mid$(msg$(everyCommand),24)))
		if instr(msg$(everyCommand),"YA_KeyWordList:_Invoke") YA_FullDisplay(val(mid$(msg$(everyCommand),24)))
		if left$(msg$(everyCommand),2)="X8" Window Close "W" + mid$(msg$(everyCommand),3): YA_displaywins=YA_displaywins -1
		if (len(msg$(everyCommand))=10 and mid$(msg$(everyCommand),5)="Button") YA_Navigate(left$(msg$(everyCommand),1))
		if left$(msg$(everyCommand),10)="YA_SearchTxt:" YA_Fillerup("find")

		//#####More YabEditor Commands######
		//Check if user pressed ENTER in the search field
		if left$(msg$(everyCommand), 14) = "YESearchField:" then
			YESearchText$ = trim$(mid$(msg$(everyCommand),15))
			if YESearchText$ <>"" then
				Textcontrol set "YESearchField", ""
				YEFindstring(YESearchText$)
				if window get "YEMainWindow","exists" = 1 then
					menu set "Edit", "Find Again", "Enable", "YEMenuView" //after initial find, find again becomes available
					Option set "YEFindAgainButton", "enabled", 1 //the button too
				end if
			end if
		end if
		//check if user selected a snippet
		if left$(msg$(everyCommand), 17) = "YESnippetDropBox:" YESnippet$ = mid$(msg$(everyCommand), 18)
	next everyCommand
	YECheckTime()
wend
exit

sub BackupProject()
	local ZipFile$
	if ProjectName$ = "" return
	DisableMenu()
	DisableButtons()
	if YECurrentFile$ <> "" YESaveFile(YECurrentFile$)
	if window get "YEMainWindow","exists" = 1 draw text 430,22, "Zipping..", "YEStatusbarView"
	ZipFile$ = "/boot/home/Desktop/" + ProjectName$ + "_" + right$(date$,18) + "_" + left$ (time$, 9) + ".zip"
	ZipFile$ = "zip -9r " + ZipFile$ + " " + ProjectPath$
	system(ZipFile$)
	EnableMenu()
	EnableButtons()
	if window get "YEMainWindow","exists" = 1 draw flush "YEStatusbarView"
	alert "A new time-stamped backup file has been paced on the Desktop.", "OK", "info"
end sub

sub CheckForProjectFiles()
	if FileExists(ProjectPath$ + "/mainloop") = 0 then
		return 0
	elseif FileExists(ProjectPath$ + "/prologue") = 0 then
		return 0
	else
		return 1
	endif
end sub

sub CheckForYab$()
	//This should not really be necessary, since the packaging system
	//should take care of it. But I'm a belt-and-suspenders kind of guy
	//Thie result is also used in the stats box
	local doesyabexist$,getpath$, doesyabexistmsg$
	static trainingwheels
	doesyabexist$ = StripLFoffSysCmd$(system$("which yab"))
	if doesyabexist$ = "" and trainingwheels = 0 then
		doesyabexistmsg$ = "Although Yabadabbadoo will run on this system, you will need to install yab to run or compile your programs, Any of the following directories will do:\n" + system$("echo $PATH")
		Alert doesyabexistmsg$, "OK", "warning"
	endif
	trainingwheels = trainingwheels + 1
	return doesyabexist$
end sub

sub CheckGitStatus()
	if  StripLFoffSysCmd$(system$("which ybd_git_init")) <>"" then
		if FileExists(ProjectPath$ + "/.git") then
			submenu set "Project","git", "Initialize", "disable", "MainWindow"
			submenu set "Project","git", "Push", "enable", "MainWindow"
			submenu set "Project","git", "Pull", "enable", "MainWindow"
		else
			submenu set "Project","git", "Initialize", "enable", "MainWindow"
			submenu set "Project","git", "Push", "disable", "MainWindow"
			submenu set "Project","git", "Pull", "disable", "MainWindow"
		endif
	else
		submenu set "Project","git", "Initialize", "disable", "MainWindow"
		submenu set "Project","git", "Push", "disable", "MainWindow"
		submenu set "Project","git", "Pull", "disable", "MainWindow"
	endif
end sub

sub CheckScreenSize()
	if peek("desktopwidth")<1024 or peek("desktopheight")<768 then
		alert "For best results, Yabadabbadoo requires a minimum resolution of 1024x768.", "OK", "none"
		MainYBottom = peek("desktopheight") - 5
		YAYTop = peek("desktopheight") - 650
		if YAYTop < 1 YAYTop=1
	endif
end sub

sub CloseProject()
	if window get "YEMainWindow","exists" = 1 and YECurrentFile$ <> "" YESaveFile(YECurrentFile$)
	if window get "YEMainWindow","exists" = 1 window close "YEMainWindow"
	YECurrentFile$ = ""
	listbox clear "SubBox"
	ProjectIsOpen = 0
end sub

sub CloseWindow()
	//Close down the main window
	window close "MainWindow"
end sub

sub CompileApp()
	local BFLocation$, BFExec$, tempfile$, streamhandle, appsig$
	YESaveFile(YECurrentFile$)
	GenerateNewYabfile()
	BFLocation$ = "/boot/home/yab_work/BuildFactory"
	BFExec$ = BFLocation$ + "/BuildFactory.yab" 
	tempfile$ = TempDir$() + "/YBcompile.sh"
	appsig$ = "application/x-vnd." +ProjectName$
	streamhandle = open(tempfile$, "w")
	print #streamhandle "#!/bin/sh"
	print #streamhandle "cd " + BFLocation$
	print #streamhandle BFExec$ + " '/boot/home/Desktop/" + ProjectName$ + "' '" + ProjectNewYabfile$ + "' " + appsig$
	print #streamhandle "echo"
	print #streamhandle "echo \"Press ENTER to Close\""
	print #streamhandle "read input\n"
	close streamhandle
	system("chmod +x " + tempfile$)
	system("Terminal " + tempfile$)
	alert "A new compiled executable has been created on the Desktop.", "OK", "info"
	system("rm -f " + tempfile$)
end sub

sub CreateNewSub(displayme$)
	local NameOfSub$, ShortNameOfSub$, w$(1), tokens
	if TrainingMode = 1 alert displayme$, "OK", "Info"
	while(NameOfSub$ = "") 
		NameOfSub$ = filepanel "Save-file", "Name of the new subroutine?", ProjectSubPath$
		if FileExists(NameOfSub$) then
			alert "A subroutine with that name already exists!", "OK", "warning"
			NameOfSub$ = ""
		endif
	wend
	tokens = split(NameOfSub$,w$(),"/")
	ShortNameOfSub$=w$(tokens)
	WriteNewSubroutine(ShortNameOfSub$, "\n\n" )
	listbox add "SubBox", ShortNameOfSub$
	Listbox select "SubBox", listbox count "SubBox"
end sub

sub CreateShortcut()
	local ShortcutName$,ExecName$, streamhandle
	ShortcutName$ = "/boot/home/Desktop/" + ProjectName$ + "._ybd"
	ExecName$ = system$("if [ -e /boot/system/apps/Yabadabbadoo.yab ]; then  echo /boot/system/apps/Yabadabbadoo.yab; elif [ -e /boot/home/config/apps/Yabadabbadoo.yab ]; then echo /boot/home/config/apps/Yabadabbadoo.yab; fi")
	ExecName$ = left$(ExecName$,len(ExecName$)-1) //strip trailing newline
	streamhandle = Open(ShortcutName$, "w")
		print #streamhandle "#! /bin/bash"
		print #streamhandle ExecName$ + " " + ProjectPath$
		print #streamhandle
	close streamhandle
	system("chmod +x " + ShortcutName$)
	Alert "A shortcut to your project has been placed on the Desktop. You can move or rename it, But you will have to create a new one if you move the project or change its pathname.", "OK", "none"
end sub

sub DisableButtons()
	Option set "PrologueButton", "enabled", 0
	Option set "MainLoopButton", "enabled", 0
	Option set "DataEditButton", "enabled", 0
	Option set "IconEditButton", "enabled", 0
	Option set "ReadmeButton", "enabled", 0
	Option set "PackageInfoEditButton", "enabled", 0
	Option set "AddSubButton", "enabled", 0
	Option set "EditSubButton", "enabled", 0
	Option set "RefreshSubButton", "enabled", 0
end sub

sub DisableMenu()
// disable parts and yab menus until a project has been opened
	Menu set "File","New","disable", "MainWindow"
	Menu set "File","Open","disable", "MainWindow"
	Menu set "Project","Backup","disable", "MainWindow"
	Menu set "Project","Stats","disable", "MainWindow"
	Menu set "Project","Search","disable", "MainWindow"
	Menu set "Project","Replace","disable", "MainWindow"
	submenu set "Project","Code repositories", "BitBucket", "disable", "MainWindow"
	submenu set "Project","Code repositories", "GitHub", "disable", "MainWindow"
	submenu set "Project","Code repositories", "SourceForge", "disable", "MainWindow"
	submenu set "Project","git", "Initialize", "disable", "MainWindow"
	submenu set "Project","git", "Push", "disable", "MainWindow"
	submenu set "Project","git", "Pull", "disable", "MainWindow"
	Menu set "Parts", "Prologue","disable", "MainWindow"
	Menu set "Parts", "Main Loop","disable", "MainWindow"
	Menu set "Parts", "Data","disable", "MainWindow"
	Menu set "Parts", "Icon","disable", "MainWindow"
	Menu set "Parts", "README","disable", "MainWindow"
	Menu set "Parts", "PackageInfo","disable", "MainWindow"
	Menu set "yab", "Generate yab file","disable", "MainWindow"
	Menu set "yab", "View yab file","disable", "MainWindow"
	Menu set "yab", "Run","disable", "MainWindow"
	Menu set "yab", "Run in Terminal","disable", "MainWindow"
	Menu set "yab", "Run & display output","disable", "MainWindow"
	Menu set "yab", "Bind","disable", "MainWindow"
	Menu set "yab", "Compile","disable", "MainWindow"
	menu set "yab", "Transfer to official IDE","disable", "MainWindow"
	menu set "Utilities", "Open a Terminal","disable","MainWindow"
	menu set "Utilities", "OpenTracker","disable","MainWindow"
	menu set "Utilities", "Calculator","disable","MainWindow"
	menu set "Utilities", "ScriptAssistant","disable","MainWindow"
	menu set "Utilities", "YabAssistant","disable","MainWindow"
	Menu set "Utilities", "Yab Interface Builder", "disable", "MainWindow"
	menu set "Utilities", "System Prefs","disable","MainWindow"
	menu set "Utilities", "Restart Tracker","disable","MainWindow"
	menu set "Utilities", "Restart Deskbar","disable","MainWindow"
	menu set "Utilities", "Create new Shortcut","disable","MainWindow"
	menu set "Utilities", "To-do Manager","disable","MainWindow"
	Menu set "Help", "Help", "disable", "MainWindow"
	Menu set "Help", "Tutorial", "disable", "MainWindow"
	Menu set "Help", "FAQ", "disable", "MainWindow"
	Menu set "Help", "Hard Copy", "disable", "MainWindow"
	Menu set "Help", "Get e-book - Programming with yab", "disable", "MainWindow"
	Menu set "Help", "Launch yab discussion forum", "disable", "MainWindow"
	Menu set "Help", "Launch BeSly help database", "disable", "MainWindow"
end sub

sub DisplayStats()
	local totallines, klocs$, totalsubs$, tempval$, streamhandle
	GenerateNewYabfile()
	streamhandle = open(ProjectNewYabfile$, "r")
	while(not EOF(streamhandle))
		line input #streamhandle tempval$
		totallines = totallines + 1
	wend
	close streamhandle
	klocs$ = str$(totallines/1000)
	totalsubs$ = str$(listbox count "SubBox")
	alert "Using yab executable found at:\n" + yabLocation$ +"\n\nProject: " + ProjectName$ + "\n\n" + "Subroutines: " + totalsubs$ + "\n" + "Lines of code: " + str$(totallines) + "\n" + "(" + klocs$ + " KLOCS)", "OK", "info"
end sub

sub EnableButtons()
	Option set "PrologueButton", "enabled", 1
	Option set "MainLoopButton", "enabled", 1
	Option set "DataEditButton", "enabled", 1
	Option set "IconEditButton", "enabled", 1
	Option set "ReadmeButton", "enabled", 1
	Option set "PackageInfoEditButton", "enabled", 1
	Option set "AddSubButton", "enabled", 1
	Option set "EditSubButton", "enabled", 1
	Option set "RefreshSubButton", "enabled", 1
end sub

sub EnableMenu()
// Enable parts and yab menus once a project has been opened
//also use to indicate functions not yet enabled
//or that are autodetected if a supplementary package is installed
	Menu set "File","New","enable", "MainWindow"
	Menu set "File","Open","enable", "MainWindow"
	Menu set "Project","Backup","enable", "MainWindow"
	Menu set "Project","Stats","enable", "MainWindow"
	Menu set "Project","Search","enable", "MainWindow"
	Menu set "Project","Replace","enable", "MainWindow"
	submenu set "Project","Code repositories", "BitBucket", "enable", "MainWindow"
	submenu set "Project","Code repositories", "GitHub", "enable", "MainWindow"
	submenu set "Project","Code repositories", "SourceForge", "enable", "MainWindow"
	Menu set "Parts", "Prologue","enable", "MainWindow"
	Menu set "Parts", "Main Loop","enable", "MainWindow"
	Menu set "Parts", "Data","enable", "MainWindow"
	Menu set "Parts", "Icon","enable", "MainWindow"
	Menu set "Parts", "README","enable", "MainWindow"
	Menu set "Parts", "PackageInfo","enable", "MainWindow"
	Menu set "yab", "Generate yab file","enable", "MainWindow"
	Menu set "yab", "View yab file","enable", "MainWindow"
	Menu set "yab", "Run","enable", "MainWindow"
	Menu set "yab", "Run in Terminal","enable", "MainWindow"
	Menu set "yab", "Run & display output","enable", "MainWindow"
	Menu set "yab", "Bind","enable", "MainWindow"
		menu set "Utilities", "Open a Terminal","enable","MainWindow"
	menu set "Utilities", "OpenTracker","enable","MainWindow"
	menu set "Utilities", "Calculator","enable","MainWindow"
	menu set "Utilities", "ScriptAssistant","enable","MainWindow"
	menu set "Utilities", "YabAssistant","enable","MainWindow"
	//Menu set "Utilities", "Yab Interface Builder", "enable", "MainWindow"
	menu set "Utilities", "System Prefs","enable","MainWindow"
	menu set "Utilities", "Restart Tracker","enable","MainWindow"
	menu set "Utilities", "Restart Deskbar","enable","MainWindow"
	menu set "Utilities", "Create new Shortcut","enable","MainWindow"
	Menu set "Help", "Help", "enable", "MainWindow"
	Menu set "Help", "Tutorial", "enable", "MainWindow"
	Menu set "Help", "FAQ", "enable", "MainWindow"
	Menu set "Help", "Hard Copy", "enable", "MainWindow"
	Menu set "Help", "Get e-book - Programming with yab", "enable", "MainWindow"
	Menu set "Help", "Launch yab discussion forum", "enable", "MainWindow"
	Menu set "Help", "Launch BeSly help database", "enable", "MainWindow"	
	CheckGitStatus()
	if FileExists("/boot/system/apps/vstm_GUI") then 
		menu set "Utilities", "To-do Manager","enable","MainWindow"
	else
		menu set "Utilities", "To-do Manager","disable","MainWindow"
	endif
	if instr(system$("getarch"), "x86_gcc2")
		menu set "yab", "Compile","enable", "MainWindow"
		menu set "yab", "Transfer to official IDE","enable", "MainWindow"
	endif
end sub

sub FillSubBox()
	local Routine$(1),GetMySubs$, a
	listbox clear "SubBox"
	GetMySubs$ = system$("ls " + ProjectSubPath$)
	a = token(GetMySubs$, Routine$(),"\n")
	for f = 1 to a
		listbox add "SubBox", Routine$(f)
	next f 
	listbox select "SubBox", val(SelectedRoutine$)
end sub

sub GenerateNewYabfile()
	system("rm -f " + ProjectNewYabfile$) //delete old yabfile if it exists
	system("touch " + ProjectNewYabfile$) //create a new one
	system("cat " + ProjectPrologue$ + " > " + ProjectNewYabfile$)
	system("cat " + ProjectMainloop$ + " >> " + ProjectNewYabfile$) 
	system("cat " + ProjectSubPath$ + "/* >>"  + ProjectNewYabfile$) 
	system("cat " + ProjectData$ + " >> " + ProjectNewYabfile$)
	//Yes, I know I could do this in yab itself, laboriously reading files into memory
	//and writing them out to the yab file. But why bother?
	system("mimeset -F " + ProjectNewYabfile$)
	system("chmod +x " + ProjectNewYabfile$)
end sub

sub GetProjectDirectory(displayme$)
	static trainingwheels
	if trainingwheels = 0 alert displayme$, "OK", "Info"
	ProjectPath$ = filepanel "Load-Directory", "Project Directory?", ProjectBasePath$
	trainingwheels = trainingwheels + 1
end sub

sub GlobalReplace()
	local wheretoreplace, ReplaceDir$, tempfile$
	wheretoreplace = alert "Globally replacing text in your project is an IRREVERSIBLE step. There is no Undo, though if you are quick enough you can globally replace it back again. Your program might not run afterwards.\n\nIf you are unsure, exit and make a backup before you go on.\n\nReplacing text in the subroutines folder only (recommended) will leave things like your README, prologue, main loop and data section untouched.", "Subroutines only", "Whole Project", "Exit", "warning"
	switch wheretoreplace
		case 1
			ReplaceDir$ = ProjectSubPath$
			break
		case 2
			ReplaceDir$ = ProjectPath$
			break
		case 3
			return
			break
	end switch
	tempfile$ = TempDir$() + "/YBreplace.sh"
	streamhandle = open(tempfile$, "w")
	print #streamhandle "#!/bin/sh"
	print #streamhandle "cd " + ReplaceDir$
	print #streamhandle "echo 'Yabadabbadoo Global Search-and_Replace'"
	print #streamhandle "echo"
	print #streamhandle "echo 'Please type the text to search for:'"
	print #streamhandle "read input"
	print #streamhandle "echo"
	print #streamhandle "echo 'Please type the text to replace it with:'"
	print #streamhandle "read output"
	print #streamhandle "echo"
	print #streamhandle "sustituye --old=$input --new=$output '" + ReplaceDir$ + "'" 
	print #streamhandle "echo \"Press ENTER to Close\""
	print #streamhandle "read exiting\n"
	close streamhandle
	system("chmod +x " + tempfile$)
	system("Terminal " + tempfile$)
	system("rm -f " + tempfile$)
end sub

sub Has_yab4ybd()
	if instr(system$("head -n 1 " + ProjectPrologue$), "#!yab4ybd") then
		alert "Your project's first line may contain a llink to the deprecated #!yab4ybd.\n\nPlease change it to #!yab", "OK", "warning" 
	endif
end sub

sub InstallSupport(package$)
local ReplaceFile$, tempfile$
	tempfile$ = TempDir$() + "/YB_git_install.sh"
	streamhandle = open(tempfile$, "w")
	print #streamhandle "#!/bin/sh"
	print #streamhandle "pkgman install " + package$
	print #streamhandle "echo \"Press ENTER to Close\""
	print #streamhandle "read exiting\n"
	close streamhandle
	system("chmod +x " + tempfile$)
	system("Terminal " + tempfile$)
	system("rm -f " + tempfile$)
end sub

sub LaunchSA()
// Setup the SA_main window here
	window open SA_across,SA_updown to SA_acrossend, SA_updownend, "SA_MainWindow", "ScriptAssistant"
	window set "SA_MainWindow", "Look", "modal"
	window set "SA_MainWindow", "Flags", "Not-Resizable"
	Window set "SA_MainWindow", "flags", "not-zoomable"
//Top row of widgets
	view 1,1 to 120,39, "SA_Radio","SA_MainWindow"
	Tooltip "SA_Radio","Normal Mode: 165 common commands. \nPro Mode:\t Over 300 Commands.    "
	Radiobutton 3,0,"SA_ProMode0","Normal Mode", SA_promode, "SA_Radio"
	Radiobutton 3,18,"SA_ProMode1","Pro Mode", SA_promode, "SA_Radio"
	if SA_promode = 1 then
		RadioButton set "SA_ProMode0", 0: RadioButton Set "SA_ProMode1", 1
	else
		RadioButton set "SA_ProMode0", 1: RadioButton Set "SA_ProMode1", 0
	endif
	bitmap get "Icon$","Mime32", "text"
	draw bitmap 133,2, "Icon$", "alpha", "SA_MainWindow"
	bitmap remove "Icon$"
//SA_Middle row of widgets
	DropBox 0,40 to 39,65, "SA_ABC", "", "SA_MainWindow"
	Tooltip "SA_ABC", "Select a command and press GO."
	DropBox Add "SA_ABC", "7"
	for f = 1 to 26
		DropBox Add "SA_ABC", chr$(f+64)
	next f
	DropBox 40,40 to 162,65, "SA_CLI", "", "SA_MainWindow"
	Tooltip "SA_CLI", "Select a command and press GO."
	SA_Generate("7")
	Button 163,40 to 199,65, "SA_GoButton","GO","SA_MainWindow"
	Tooltip "SA_GoButton", "Select a command and press GO."	
//SA_Bottom row of widgets
	TextControl 0,70 to 162,97, "SA_TryText","","","SA_MainWindow"
	Button 163,70 to 199,94, "SA_TryButton","TRY","SA_MainWindow"
	ToolTip "SA_TryText", "Enter a non-standard command and ScriptAssistant\nwill try running it with the --help parameter when\nyou press the TRY button."
	ToolTip "SA_TryButton", "Enter a non-standard command and ScriptAssistant\nwill try running it with the --help parameter when\nyou press the TRY button."
end sub

sub LaunchURL(url$)
	DisableMenu()
	DisableButtons()
	launch url$
	EnableButtons()
	EnableMenu()
end sub

sub LaunchYA()
	local interval
	interval = 23: if MainYBottom<760 interval =22 //This squeezes the alphabetical list onto a 576 pixel screen, Doesn't look good though.
	// Setup the main window here
	window open 5,YAYTop to 205,YAYTop + 645,"YA_MainWindow", "yabAssistant"
	window set "YA_MainWindow", "Look", "modal"
	window set "YA_MainWindow", "Flags", "Not-Resizable"
	Window set "YA_MainWindow", "flags", "not-zoomable"
	// first button row
	for f=0 to 25
		Button 2, f * interval to 27, (f * interval)+18, chr$(f+65) + "YA_Button", chr$(f+65), "YA_MainWindow"
	next f
	// second button row
	button 30, 0 to 200, 18, "YA_AllButton","Show All Commands", "YA_MainWindow"
	button 30, 23 to 200, 41, "YA_yabasicButton","yabasic Commands Only", "YA_MainWindow"
	button 30, 46 to 200, 64, "YA_yabButton","yab Extensions Only", "YA_MainWindow"
	textcontrol 25,72 to 160,89, "YA_SearchTxt","","Insert search text","YA_MainWindow"
	button 161, 72 to 199, 89, "YA_FindButton","Find", "YA_MainWindow"
	///list of commands
	ListBox 32,97 to 200,615, "YA_KeyWordList",1, "YA_MainWindow"
	// brief description
	Textcontrol 0,621 to 198,640, "YA_BriefInfo","","","YA_MainWindow"
	YA_Fillerup("all")
end sub

sub LocalReplace()
local wheretoreplace, ReplaceFile$, tempfile$
	wheretoreplace = alert "Locally replacing text in your file is an IRREVERSIBLE step. There is no Undo, though if you are quick enough you can replace it back again. Your program might not run afterwards. If you are unsure, exit and make a backup before you go on.\n\nIf you need more control, rather transfer your file to Pe and use the superb facilities of that program", "Continue", "", "Exit", "warning"
	switch wheretoreplace
		case 1
		case 2
			ReplaceFile$ = YECurrentFile$
			break
		case 3
			return
			break
	end switch
	YECloseWindow()
	tempfile$ = TempDir$() + "/YBreplace.sh"
	streamhandle = open(tempfile$, "w")
	print #streamhandle "#!/bin/sh"
	print #streamhandle "cd " + ReplaceFile$
	print #streamhandle "echo 'Yabadabbadoo Global Search-and_Replace'"
	print #streamhandle "echo"
	print #streamhandle "echo 'Please type the text to search for:'"
	print #streamhandle "read input"
	print #streamhandle "echo"
	print #streamhandle "echo 'Please type the text to replace it with:'"
	print #streamhandle "read output"
	print #streamhandle "echo"
	print #streamhandle "sustituye --old=$input --new=$output '" + ReplaceFile$ + "'" 
	print #streamhandle "echo \"Press ENTER to Close\""
	print #streamhandle "read exiting\n"
	close streamhandle
	system("chmod +x " + tempfile$)
	system("Terminal " + tempfile$)
	system("rm -f " + tempfile$)
	//YEOpenFile(ProjectSubPath$ + "/" + listbox get$ "SubBox", val(SelectedRoutine$))
	YEOpenFile(ReplaceFile$)
end sub

sub MakeButtons()
	//top buttons
	Button 10,65 to 141,90, "PrologueButton", "Edit Prologue", "MainWindow"
		Tooltip "PrologueButton", "The Prologue sets up important global variables that will be\nused to identify your program. It is also where\nyou enter commands to run before the main loop."
	Button 151,65 to 282,90, "MainLoopButton", "Edit Main Loop", "MainWindow" 
		Tooltip "MainLoopButton","Every yab program runs from a main loop.\nYabadabbadoo sets it up for you."
	Button 10,95 to 141,120, "DataEditButton", "Edit data", "MainWindow"
		Tooltip "DataEditButton","Not every yab program needs a DATA section,\nBut if yours does, here it is,"
		//Originally just DataButton, but that was interfering with the YA listbox navigation
	Button 151,95 to 282,120, "IconEditButton", "Edit Icon", "MainWindow"
		Tooltip "IconEditButton","Give your program a spiffy icon." 
		//Originally just IconButton, but that was interfering with the YA listbox navigation
	Button 10,125 to 141,150, "ReadmeButton", "Edit README", "MainWindow"
		Tooltip "ReadmeButton","The job's not over till the documentation is done.\nYabadabbadoo lets you write a README file with ease."
	Button 151,125 to 282,150, "PackageInfoEditButton", "Edit .PackageInfo", "MainWindow" 
		Tooltip "PackageInfoEditButton", "Edit this project's .PackageInfo file."
	//bottom buttons
	Button 10,MainYBottom-35 to 97,MainYBottom-10, "AddSubButton", "New Sub", "MainWindow"
		Tooltip "AddSubButton", "Create a new subroutine."
	Button 102,MainYBottom-35 to 190,MainYBottom-10, "EditSubButton", "Edit Sub", "MainWindow"
		Tooltip "EditSubButton", "Edit the selected subroutine."
	Button 195,MainYBottom-35 to 282,MainYBottom-10, "RefreshSubButton", "Refresh", "MainWindow"
		Tooltip "RefreshSubButton", "Refresh the subroutine list.\nUseful if you have edited them from Tracker."
	DisableButtons()
	text 10,158, "logo4","Subroutines in this module:", "MainWindow"
	Listbox 10,176 to 282,MainYBottom-43, "SubBox", 1, "MainWindow"
end sub

sub MakeMenu()
	Menu "File", "Quit", "Q", "MainWindow" 
	Menu "Project","New","N", "MainWindow"
	Menu "Project","Open","O", "MainWindow"
	Menu "Project","Backup","B", "MainWindow"
	Menu "Project","Search","S", "MainWindow"
	Menu "Project","Replace","R", "MainWindow"
	Submenu "Project","Code repositories", "BitBucket", "", "MainWindow"
	Submenu "Project","Code repositories", "GitHub", "", "MainWindow"
	Submenu "Project","Code repositories", "SourceForge", "", "MainWindow"
	Submenu "Project","git", "Initialize", "", "MainWindow"
	Submenu "Project","git", "Push", "", "MainWindow"
	Submenu "Project","git", "Pull", "", "MainWindow"
	if  StripLFoffSysCmd$(system$("which ybd_git_init")) ="" submenu "Project","git", "Install git support", "", "MainWindow"
	CheckGitStatus()
	Menu "Project","Stats","", "MainWindow"
	Menu "Parts", "Prologue","SP", "MainWindow"
	Menu "Parts", "Main Loop","SM", "MainWindow"
	Menu "Parts", "Data","SD", "MainWindow"
	Menu "Parts", "Icon","SI", "MainWindow"
	Menu "Parts", "README","SR", "MainWindow"
	Menu "Parts", "PackageInfo","", "MainWindow"
	Menu "yab", "Generate yab file","", "MainWindow"
	Menu "yab", "View yab file","CW", "MainWindow"
	Menu "yab", "Run","", "MainWindow"
	Menu "yab", "Run in Terminal","", "MainWindow"
	Menu "yab", "Run & display output","", "MainWindow"
	Menu "yab", "Bind","", "MainWindow"
	menu "yab", "Transfer to official IDE","", "MainWindow"
	Menu  "yab", "Compile","", "MainWindow"
	Menu "Utilities", "Open a Terminal","CT","MainWindow"
	Menu "Utilities", "Open Tracker","CR","MainWindow"
	Menu "Utilities", "Calculator","CL","MainWindow"
	Menu "Utilities", "ScriptAssistant","CS","MainWindow": Menu set "Utilities", "ScriptAssistant","plain","MainWindow"
	Menu "Utilities", "yabAssistant","CY","MainWindow": Menu set "Utilities", "yabAssistant","plain","MainWindow"
	Menu "Utilities", "Yab Interface Builder","","MainWindow"
	Menu "Utilities", "System Prefs","CP","MainWindow"
	Menu "Utilities", "To-do Manager","","MainWindow"
	if FileExists("/boot/system/apps/vstm_GUI") = 0 and instr(system$("getarch"), "x86_gcc2")	Menu "Utilities", "Install To-do Manager","","MainWindow"
	Menu "Utilities", "Restart Tracker","","MainWindow"
	Menu "Utilities", "Restart Deskbar","","MainWindow"
	Menu "Utilities", "Create new shortcut","","MainWindow"
	Menu "Help", "Help", "", "MainWindow"
	Menu "Help", "FAQ", "", "MainWindow"
	Menu "Help", "Tutorial", "", "MainWindow"
	Menu "Help", "Hard Copy", "", "MainWindow"
	Menu "Help", "Get e-book - Programming with yab", "", "MainWindow"
	Menu "Help", "Launch yab discussion forum", "", "MainWindow"
	Menu "Help", "Launch BeSly help database", "", "MainWindow"
	Menu "Help", "About", "", "MainWindow"
	DisableMenu()
end sub

sub MakeNewProject()
	local makeshortcut
	ProjectPath$=""
	GetProjectDirectory("Create a directory in which to keep your project. This is really going to work better if the path to your project does not contain spaces or special characters.")
	while(ProjectPath$ = "")
		GetProjectDirectory("An error occurred. Please re-select your new directory")	
	wend
	if CheckForProjectFiles() = 1 then 
		Alert "THAT IS AN EXISTING YABADABBADOO DIRECTORY YOU WERE GOING TO OVERWRITE!\nYOU ARE TOO TIRED TO BE PROGRAMMING.\n\n ABORTING PROGRAM.", "OK", "warning"
		exit
	endif
	SetProjectPathnames()
	system("mkdir -p " + ProjectSubPath$)
	system("mkdir -p " + ProjectOtherPath$)
	system("mkdir -p " + ProjectBinderPath$)
	system("mkdir -p " + ProjectPackagingPath$ + "/apps")
	system("mkdir -p " + ProjectPackagingPath$ + "/data/deskbar/menu/Applications")
	system("mkdir -p " + ProjectPackagingPath$ + "/data/src")
	system("touch " + ProjectData$)
	system("touch " + ProjectIcon$)
	system("settype -t application/x-vnd.Haiku-icon " + ProjectIcon$)
	WriteNewPreface()
	WriteNewSubroutine("OpenWindow", "\t//Setup the main window here\n\twindow open 100,100 to 600,500, \"MainWindow\", \"Main Window\"\n\tMakeMenu()")
	WriteNewSubroutine("MakeMenu", "\t//Create menu in MainWindow\n\tmenu \"File\", \"Quit\", \"Q\", \"MainWindow\"\n\tmenu \"Help\", \"About\", \"\", \"MainWindow\"")
	WriteNewSubroutine("CloseWindow", "\t//Close down the main window\n\twindow close \"MainWindow\"")
	WriteNewReadme()
	WriteNewMainloop()
	WriteNewDatafile()
	WriteNewPackageInfo()
	makeshortcut=alert "Create a shortcut to this project?", "OK", "No", "", "none"
	if makeshortcut = 1 CreateShortcut()
	OpenProject("fromnew")
end sub

sub OpenProject(fromnew$)
	local IsAProjectDir
	if ProjectIsOpen = 1 CloseProject()
	If fromnew$ = "" then
		GetProjectDirectory("Navigate to your project DIRECTORY (not a file!) and select it. Please note that the error-checking is minimal at this point. If your subroutine box fills up with nonsense, just re-open the right project.")
		SetProjectPathnames()
	endif
	IsAProjectDir = CheckForProjectFiles()
	if IsAProjectDir = 0 then
		alert ProjectPath$ + " does not appear to be a Yabadabbadoo project!", "OK", "warning"
		ProjectDirectory$ = ""
		return
	end if
	FillSubBox()
	EnableMenu()
	EnableButtons()
	CheckGitStatus()
	ProjectIsOpen=1
end sub

sub OpenWindow()
	window open MainXLeft,MainYTop to MainXRight,MainYBottom, "MainWindow", ProgramName$
	Window set "MainWindow", "look", "modal"
	Window set "MainWindow", "flags", "not-resizable"
	Window set "MainWindow", "flags", "zoomable"
	text 90,25, "Logo1","Yabadabbadoo!", "MainWindow"
	text 90,35, "Logo2","==========", "MainWindow"
	text 10,48, "Logo3","Current Project:", "MainWindow"
	MakeMenu()
	SplashProject()
	MakeButtons()
end sub

sub RunAndDisplay(repeater)
	local RADline$, w$(1), x$(1), totallines, RADtempfile$, RADtemplinefile$, wordsinerror, spinmin, spinmax, dothis$, spinsetter, streamhandle
	if window get "RADWindow","exists" = 1 window close "RADWindow"
	RADtempfile$ = TempDir$() + "/YBD_output.txt"
	if repeater = 0 system(yabLocation$ + " " + ProjectNewYabfile$ + " >& " + RADtempfile$)
	window open 100,100 to 700, 700, "RADWindow", "Output of " + ProjectNewYabfile$
	Window Set "RADWindow", "Look","floating"
	Window Set "RADWindow", "Flags","Not-Resizable"
	Window Set "RADWindow", "Flags","Not-Zoomable"
	textedit 5,5 to 595,135, "RADOutput", 1, "RADWindow"
	textedit set "RADOutput", "wordwrap", true
	textedit set "RADOutput", "tabwidth", 2
	textedit set "RADOutput", "editable", false
	streamhandle = open(RADtempfile$, "r")
	while(not(eof(streamhandle)))
		line input #streamhandle RADresult$
		textedit add "RADOutput", RADresult$ + "\n"
		wend
	close streamhandle
	totallines = token(system$("wc -l " + ProjectNewYabfile$), w$())
	totallines = val(w$(1))
	if repeater = 0 then
		RADOutput$ = textedit get$ "RADOutput"
		wordsinerror = token (RADOutput$, x$())
		for f = 1 to wordsinerror
			if x$(f) = "line" then
				spinsetter = f+ 1
				break:break
			endif
		next f
		if spinsetter <> 0 spinsetter = val(x$(spinsetter))
	else
		spinsetter = repeater
	endif
	spincontrol 20,142, "LineSelector", "View Line: ", 1, totallines, 1, "RADWindow"
	button 165, 142 to 210,168, "RADSpinButton", "Go!", "RADWindow"
	text 225, 150, "RADInfotext", "Program consists of " + str$(totallines) + " lines.", "RADWindow"
	spincontrol set "LineSelector", spinsetter
	spinmin = spinsetter - 13
	if spinmin < 1 spinmin=1
	spinmax = spinsetter + 13
	if spinmax > totallines spinmax = totallines
	RADtemplinefile$ = system$("finddir B_COMMON_TEMP_DIRECTORY") 
	RADtemplinefile$ = left$(RADtemplinefile$, len(RADtemplinefile$) -1) + "/YBD_lines.txt" //strip of trailing newline
	dothis$ = "cat -n " + ProjectNewYabfile$ + " | sed -n '" + str$(spinmin) + "," + str$(spinmax) + "p' > " + RADtemplinefile$
	system(dothis$)
	textedit 5,175 to 595,585, "RADLines", 2, "RADWindow"
	textedit set "RADLines", "wordwrap", false
	textedit set "RADLines", "tabwidth", 3
	textedit set "RADLines", "editable", false
	streamhandle = open(RADtemplinefile$, "r")
	while(not(eof(streamhandle)))
		line input #streamhandle RADresult$
		textedit add "RADLines", RADresult$	+ "\n"
	wend
	close streamhandle
end sub

sub SA_Display(SA_thestring$)
	local SA_WindowID$, SA_ButtonID$, SA_TextID$,SA_stamp$, SA_startx, SA_starty
	SA_stamp$=system$("date +%s")
	SA_WindowID$= "W" + SA_stamp$: SA_ButtonID$= "XB" + SA_stamp$: SA_TextID$= "T" + SA_stamp$
	if lower$(left$(SA_action$,10)) = "timeout 5 " SA_action$ = mid$ (SA_action$, len(SA_action$) - 10) //remove timeout from window title
	Window Open SA_dispx,SA_dispy to SA_dispx +500,SA_dispy + 425, SA_WindowID$, "Output of " + SA_action$
	Window Set SA_WindowID$, "Look","floating"
	Window Set SA_WindowID$, "Flags","Not-Resizable, Not-Zoomable, Not-Closable, Accept-First-Click"
	Button 220,392 to 280, 420, SA_ButtonID$, "Close", SA_WindowID$
	TextEdit 1,1 to 500,385, SA_TextID$, 1,SA_WindowID$
	TextEdit set SA_TextID$, "editable", false
	TextEdit Add SA_TextID$, SA_thestring$
	SA_dispx=SA_dispx +20: SA_dispy=SA_dispy + 15
	SA_displaywins=SA_displaywins + 1
	if SA_displaywins=6 SA_dispx=50: SA_dispy=50
end sub

sub SA_Generate(SA_label$)
	local SA_counter,SA_clicom$
	if SA_promode = 1 then
		//restore label$ //that does not work so we go the long way round
		Switch SA_label$
			case "7"
				restore Sevennorm: break
			case "A"
				restore A: break
			case "B"
				restore B: break
			case "C"
				restore C: break
			case "D"
				restore D: break
			case "E"
				restore E: break
			case "F"
				restore F: break
			case "G"
				restore G: break
			case "H"
				restore H: break
			case "I"
				restore I: break
			case "J"
				restore J: break
			case "K"
				restore K: break
			case "L"
				restore L: break
			case "M"
				restore M: break
			case "N"
				restore N: break
			case "O"
				restore O: break
			case "P"
				restore P: break
			case "Q"
				restore Q: break
			case "R"
				restore R: break
			case "S"
				restore S: break
			case "T"
				restore T: break
			case "U"
				restore U: break
			case "V"
				restore V: break
			case "W"
				restore W: break
			case "X"
				restore X: break
			case "Y"
				restore Y: break
			case "Z"
				restore Z: break
			default
				return
		end switch
	elseif SA_promode= 0
		switch SA_label$
			case "7"
				restore Sevennorm: break
			case "A"
				restore Anorm: break
			case "B"
				restore Bnorm: break
			case "C"
				restore Cnorm: break
			case "D"
				restore Dnorm: break
			case "E"
				restore Enorm: break
			case "F"
				restore Fnorm: break
			case "G"
				restore Gnorm: break
			case "H"
				restore Hnorm: break
			case "I"
				restore Inorm: break
			case "J"
				restore Jnorm: break
			case "K"
				restore Knorm: break
			case "L"
				restore Lnorm: break
			case "M"
				restore Mnorm: break
			case "N"
				restore Nnorm: break
			case "O"
				restore Onorm: break
			case "P"
				restore Pnorm: break
			case "Q"
				restore Qnorm: break
			case "R"
				restore Rnorm: break
			case "S"
				restore Snorm: break
			case "T"
				restore Tnorm: break
			case "U"
				restore Unorm: break
			case "V"
				restore Vnorm: break
			case "W"
				restore Wnorm: break
			case "X"
				restore Xnorm: break
			case "Y"
				restore Ynorm: break
			case "Z"
				restore Znorm: break
			default
				return
		end switch
	endif
	//Phew!
	DropBox Clear "SA_CLI"
	read SA_counter
	if SA_counter=0 return //no entries starting with that letter - just a precaution
	for f = 1 to SA_counter
		read SA_clicom$
		DropBox Add "SA_CLI", SA_clicom$
	next f
		DropBox Select "SA_CLI", 1
	SA_action$= DropBox Get$ "SA_CLI", 1
end sub

sub SA_KillTemp()
	local SA_dothis$
	SA_dothis$ = "rm -f " + SA_tempfile$
	system(SA_dothis$)
end sub

sub SA_ParseTry()
	SA_action$ = trim$(SA_action$)
	//trim off user-generated crud we don't need
	if lower$(right$(SA_action$,7)) = " --help" SA_action$ = left$ (SA_action$, len(SA_action$) - 7):action$ = trim$(SA_action$)
	if lower$(right$(SA_action$,3)) = " -h" SA_action$ = left$ (SA_action$, len(SA_action$) - 3):SA_action$ = trim$(SA_action$)
	if lower$(right$(SA_action$,3)) = " /?" SA_action$ = left$ (SA_action$, len(SA_action$) - 3):SA_action$ = trim$(SA_action$)
	//now add our own parameter
	SA_action$ = "timeout 5 " + SA_action$ + " --help"
end sub

sub SA_Preview()
	local SA_thestring$, SA_aline$, streamhandle
	//Exceptions
	if SA_action$ = "less --help" system("/boot/system/apps/Terminal less --help &"): return
	//less presents its help in a man-like environment - does not come out correctly
	if SA_action$ = "more --help" system("/boot/system/apps/Terminal more --help &"): return
	//more is like less <g>
	if SA_action$ = "timeout 5  --help" return //user pressed TRY on an empty string
	if SA_displaywins=12 alert "Only twelve Assistant windows\nallowed. Please close one.","OK","Warning": return
	system(SA_action$ +" &> " + SA_tempfile$)
	streamhandle = open(SA_tempfile$, "r")
	while(not EOF(streamhandle))
		line input #streamhandle SA_aline$
		SA_thestring$= SA_thestring$ + SA_aline$ + "\n"
	wend
	close streamhandle
	SA_Display(SA_thestring$)
	SA_KillTemp()
end sub

sub SetProjectPathnames()
	local w$(1),tokens
	static trainingwheels
	ProjectSubPath$ = ProjectPath$ + "/sub"
	ProjectBinderPath$ = ProjectPath$ + "/binder"
	ProjectOtherPath$ = ProjectPath$ + "/other"
	ProjectPackagingPath$ = ProjectPath$ + "/PackagingFolder"
	ProjectPrologue$ = ProjectPath$ + "/prologue"
	ProjectMainloop$ = ProjectPath$ + "/mainloop"
	ProjectData$ = ProjectPath$ + "/data"
	ProjectREADME$ = ProjectPath$ + "/other/README"
	tokens = split(ProjectPath$,w$(),"/")
	ProjectName$=w$(tokens)
	if w$(tokens-1) = "Desktop" and trainingwheels = 0 then 
		alert "A project on the Desktop will not bind succesfully. Yabadabbadoo will create the project, but consider exiting, then moving it (use Tracker) and reloading it.", "OK", "warning"
		trainingwheels = trainingwheels + 1
	endif
	ProjectBasePath$ = ""
	for f = 1 to tokens-1
		ProjectBasePath$ = ProjectBasePath$ + "/" + w$(f)
	next f
	ProjectNewYabfile$ = ProjectBinderPath$ + "/" + ProjectName$ + ".yab"
	ProjectIcon$ = ProjectPath$ + "/other/" + ProjectName$ + ".icon"
	SplashProject()
	Has_yab4ybd()
end sub

sub ShowHelp(WhichHelp$, DoWhat$)
	local File2Write, Helpline$, streamhandle
	DisableMenu():DisableButtons()
	if DoWhat$ = "Display" File2Write$ = TempDir$() + "/" + WhichHelp$ + ".html"
	if DoWhat$ = "HardCopy" File2Write$ = "/boot/home/Desktop/" + WhichHelp$ + ".html"
	if WhichHelp$ = "Help" restore yabadabbadoohelp
	if WhichHelp$ = "FAQ" restore yabadabbadoofaq
	if WhichHelp$ = "Tutorial" restore yabadabbadootutorial
	streamhandle = Open(File2Write$, "w")
		while(Helpline$ <> "end_of_data")
		read Helpline$
		if Helpline$ <> "end_of_data" print #streamhandle Helpline$
		wend
	close streamhandle
	if DoWhat$ = "Display" launch File2Write$
	EnableMenu():EnableButtons()
end sub

sub SplashProject()
	local SplashName$
	draw flush "MainWindow"
	If ProjectName$="" then
		SplashName$= "None"
	else
		SplashName$=ProjectName$
	endif
	draw text 111,57, SplashName$,"MainWindow"
end sub

sub testing()

label abc

label 789

end sub

Sub Wizard()
	local whattodo, fileexist$
	fileexist$=system$("if test -e /boot/home/config/settings/Yabadabbadoo.1st; then echo yes; else echo no;fi")
	//if the file does not exist, program has not run before
	if left$(fileexist$,2)= "no" then
		whattodo = alert "Looks like this is the first time Yabadabbadoo has run on this Haiku installation. Would you like to view the Help and Tutorial?", "Yes", "No", "", "none" 
		if whattodo = 1 then
			ShowHelp("Tutorial", "Display")
			ShowHelp("Help", "Display")
		endif
		system("touch /boot/home/config/settings/Yabadabbadoo.1st")
	endif
	whattodo = alert "What would you like Yabadabbadoo to do?", "Start a New Project", "Open an Existing Project", "Exit this program", "none" 
	switch whattodo
		case 1:
			MakeNewProject()
		break
		case 2:
			OpenProject("")
		break
		case 3:
			exit
		break
	end switch
end sub

sub WriteNewDatafile()
	local streamhandle
	streamhandle= open(ProjectData$, "w")
	Print #streamhandle, "########################################"
	Print #streamhandle, "###DATA statements, if any, come here###"
	Print #streamhandle, "########################################"
	Print #streamhandle, ""
	Print #streamhandle, ""
	close #streamhandle
	system("mimeset -F '" + ProjectData$ + "'")
end sub

sub WriteNewMainloop()
	local streamhandle,  writethis$
	restore mainloopdata
	streamhandle= open(ProjectMainloop$, "w")
	print #streamhandle, ""
	print #streamhandle, "//Yabadabbadoo notification"
	print #streamhandle, "########DO NOT RENAME THIS FILE!########"
	print #streamhandle, "//Yabadabbadoo needs it to function."
	print #streamhandle, ""
	for f = 1 to 24
		read writethis$
		print #streamhandle writethis$
	next f
	close #streamhandle
	system("mimeset -F '" + ProjectMainloop$ + "'")
end sub

sub WriteNewPackageInfo()
	local streamhandle,  writethis$, PackInfo$
	PackInfo$ = ProjectPackagingPath$ + "/.PackageInfo"
	restore packageinfo
	streamhandle= open(PackInfo$, "w")
	for f = 1 to 14
		read writethis$
		print #streamhandle writethis$
	next f
	close #streamhandle
	system("mimeset -F " + "'" + PackInfo$+ "'")
end sub

sub WriteNewPreface()
	local streamhandle
	streamhandle= open(ProjectPrologue$, "w")
	print #streamhandle, "#!/bin/env yab"
	print #streamhandle, "################################"
	print #streamhandle, "############# Prologue #############"
	print #streamhandle, "################################"
	print #streamhandle, ""
	print #streamhandle, "//Yabadabbadoo notification"
	print #streamhandle, "########DO NOT RENAME THIS FILE!########"
	print #streamhandle, "//Yabadabbadoo needs it to function."
	print #streamhandle, " "
	print #streamhandle, "##Fill in these fields with your own particulars."
	print #streamhandle, "##The variables will be used in the About Box and in naming the program."
	print #streamhandle, " "
	print #streamhandle, "ProgramName$ = \"" + ProjectName$ +"\""
	print #streamhandle, "AuthorName$ = \"Name of Author\""
	print #streamhandle, "ProgramVersion$ = \"V0.1\""
	print #streamhandle, "ProgramBriefDescription$ = \"Brief Description of your program.\""
	print #streamhandle, "ProgramLicense$ = \"Public Domain/Freeware/GPL/Artistic License/Commercial\""
	print #streamhandle, "ProgramAcknowledgements$ =\"With thanks to .......\""
	print #streamhandle, " "
	print #streamhandle, "//*************************"
	print #streamhandle, "//*****Global Variables****"
	print #streamhandle, "//*************************"
	print #streamhandle, " "
	Print #streamhandle, "## Technically, yab does not require you to declare global variables,"
	print #streamhandle, "##It just is a really, really good idea to do it anyway." 
	print #streamhandle, "// set DEBUG = 1 to print out all messages on the console"
	print #streamhandle, "DEBUG = 1"
	print #streamhandle, "//change this to DEBUG = 0 when you are ready to bind the program for distribution"
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, "##########################"
	print #streamhandle, "######Preliminary Commands#####"
	print #streamhandle, "##########################"
	print #streamhandle, ""
	print #streamhandle, "## Commands to run before the Main Loop come here."
	print #streamhandle, "## e.g. setting up a window with a menu."
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, "OpenWindow()"
	print #streamhandle, ""
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, " "
	print #streamhandle, "#######End of Prologue#######"
	print #streamhandle, ""
	close #streamhandle
	system("mimeset -F '" + ProjectPrologue$ + "'")
end sub

sub WriteNewReadme()
	local streamhandle
	streamhandle= open(ProjectREADME$, "w")
	Print #streamhandle, ProjectName$
	Print #streamhandle, "by: Author Name"
	close #streamhandle
	system("mimeset -F '" + ProjectREADME$ + "'")
end sub

sub WriteNewSubroutine(FileToOpen$, WNSText$)
	local streamhandle, PathToOpen$
	PathToOpen$ = ProjectSubPath$ + "/" + FileToOpen$
	//system("touch " + PathToOpen$)
	streamhandle= open(PathToOpen$, "w")
	print #streamhandle, "sub " + FileToOpen$ + "()"
	print #streamhandle, WNSText$
	print #streamhandle, "end sub"
	print #streamhandle, ""
	close #streamhandle
	system("mimeset -F '" + PathToOpen$ + "'")	
end sub

sub YA_BriefDisplay(YA_entry)
	TextControl Set "YA_BriefInfo",YA_descriptionarr$(YA_entry)
end sub

sub YA_Fillerup(YA_mode$)
	local YA_arraysiz, YA_thecommand$, YA_yabtype$, YA_description$, YA_fulltext$, YA_findme$
	restore yadata
	YA_findme$=TextControl Get$ "YA_SearchTxt"
	Listbox Clear "YA_KeyWordList": YA_arraysiz=1
	while(YA_thecommand$ <> "endofdata")
		read YA_thecommand$, YA_yabtype$, YA_description$,YA_fulltext$: if YA_thecommand$= "endofdata" break
		if YA_mode$="yab" then
			if YA_yabtype$="GUI" YA_arraysiz=YA_Fillit(YA_arraysiz, YA_thecommand$, YA_description$, YA_fulltext$)
		elseif YA_mode$="yabasic" then
			if YA_yabtype$ <> "GUI" YA_arraysiz=YA_Fillit(YA_arraysiz, YA_thecommand$, YA_description$, YA_fulltext$)
		elseif YA_mode$="find" then
			if YA_findme$="" return
			if instr(lower$(YA_fulltext$), lower$(YA_findme$)) <> 0 YA_arraysiz=YA_Fillit(YA_arraysiz, YA_thecommand$, YA_description$, YA_fulltext$)
		else			//   YA_mode$="all"
			YA_arraysiz=YA_Fillit(YA_arraysiz, YA_thecommand$, YA_description$, YA_fulltext$)
		end if
	wend
	Listbox Select "YA_KeyWordList", 1
	YA_BriefDisplay(1)
end sub

sub YA_Fillit(YA_arraysiz, YA_thecommand$, YA_description$, YA_fulltext$)
	ListBox add "YA_KeyWordList", YA_thecommand$
	dim YA_descriptionarr$(YA_arraysiz)
	dim YA_fulltextarr$(YA_arraysiz)
	YA_descriptionarr$(YA_arraysiz)= YA_description$
	YA_fulltextarr$(YA_arraysiz)=YA_fulltext$
	YA_arraysiz=YA_arraysiz + 1	
	return YA_arraysiz
end sub

sub YA_FullDisplay(YA_entry)
	local YA_WindowID$, YA_ButtonID$, YA_TextID$,YA_stamp$,YA_thestring$
	if YA_displaywins=12 alert "Only twelve Assistant windows\nallowed. Please close one.","OK","Warning": return
	YA_thestring$= YA_fulltextarr$(YA_entry)
	YA_stamp$=system$("date +%s")
	YA_WindowID$= "W" + YA_stamp$: YA_ButtonID$= "X8" + YA_stamp$: YA_TextID$= "T" + YA_stamp$
	Window Open YA_dispx,YA_dispy to YA_dispx +500,YA_dispy + 425, YA_WindowID$,"Output of " + ListBox Get$ "YA_KeyWordList", YA_entry
	Window Set YA_WindowID$, "Look","Floating"
	Window Set YA_WindowID$, "Flags","Not-Resizable, Not-Zoomable, Not-Closable, Accept-First-Click"
	Button 220,392 to 280, 420, YA_ButtonID$, "Close", YA_WindowID$
	TextEdit 1,1 to 500,385, YA_TextID$, 1,YA_WindowID$
	TextEdit set YA_TextID$, "editable", false
	TextEdit Add YA_TextID$, YA_thestring$
	YA_dispx=YA_dispx +20: YA_dispy=YA_dispy + 15
	YA_displaywins=YA_displaywins + 1
	if YA_displaywins=6 then
		YA_dispx=210
		YA_dispy=50
	endif
	if YA_dispx + 500 > peek("DesktopWidth") or YA_dispy + 417 > peek("DesktopHeight") then
		YA_dispx=210
		YA_dispy=50
	endif
end sub

sub YA_Navigate(YA_letter$)
	local YA_headword$, YA_counter
	for f=1 to listbox count "YA_KeyWordList"
		YA_headword$=LISTBOX GET$ "YA_KeyWordList", f
		YA_counter=f
		if left$(YA_headword$,1) >= YA_letter$ break
	next f
	Listbox Select "YA_KeyWordList", YA_counter
	YA_BriefDisplay(YA_counter)
end sub

sub YECheckTime()
	//Autosave every 60 seconds
	//this needs more thought
	//getting severe data loss when an autosave happens just when I am typing
	local YEtheTime$,YEtheNewLineNumber$:static YEtheLineNumber$
	if window get "YEMainWindow","exists" = 0 return	//no point in this if no file is open 
	if YECurrentFile$="" return	//or if there is no file loaded
	YEtheTime$=mid$(Time$,7,2)
	//If YEtheTime$ = YEStartingTime$ then //i.e. 60 seconds later
	//	YESaveFile(YECurrentFile$)
	//Now refresh the line number every second IF it has changed
	//1-second refresh delay, but it's the best we can do
	//elseif 
	if YEtheTime$ <> YECurrentTime$ then
		YEtheNewLineNumber$=str$(textedit get "YEEditBox", "currentline") + " of " +   str$(textedit get "YEEditBox", "countlines")
		if YEtheNewLineNumber$<>YETheLineNumber$ then
			draw flush "YELineNumberField"
			draw text 1,22, "Line " + YEtheNewLineNumber$, "YELineNumberField"
			YETheLineNumber$=YETheNewLineNumber$
		endif
		YECurrentTime$ = YEtheTime$
	endif
end sub

sub YECloseWindow()
	if window get "YEMainWindow","exists" = 1 then
		YESaveFile(YECurrentFile$)
		Window Close "YEMainWindow"
		YECurrentFile$=""
	endif
end sub

sub YECopy2Snippet()
	local currentsel$
	currentsel$= textedit get$ "YEEditBox", "Selection"
	if len(currentsel$) > 80 then
		alert "Too much text for a snippet!\nTry copying to the clipboard instead.", "OK", "none"
		return
	endif
	if currentsel$ <> "" dropbox add "YESnippetDropBox", currentsel$
	if dropbox count "YESnippetDropBox" = 1 YESnippet$ = currentsel$
	if dropbox count "YESnippetDropBox" > 15 dropbox remove "YESnippetDropBox", 1
	for f = 1 to dropbox count "YESnippetDropBox"
		YESnippets$(f) = dropbox get$ "YESnippetDropBox", f
	next f
end sub

sub YEDisableButtons()
	Option set "YEUndoButton", "enabled", 0
	Option set "YECutButton", "enabled", 0
	Option set "YECopyButton", "enabled", 0
	Option set "YEPasteButton", "enabled", 0
	Option set "YEFindButton", "enabled", 0
	Option set "YEFindAgainButton", "enabled", 0
	//Option set "YEQuitButton", "enabled", 0
	Option set "YEPasteSnippetButton", "enabled", 0
end sub

sub YEDisableMenu()
	Menu set "File", "Save", "disable", "YEMenuView"
	Submenu set "File", "Transfer...", "to Pe", "disable", "YEMenuView"
	Submenu set "File", "Transfer...", "to StyledEdit", "disable", "YEMenuView"
	//Menu set "File", "Close", "disable", "YEMenuView"
	menu set "Edit", "Undo/Redo", "disable", "YEMenuView"
	menu set "Edit", "Cut", "disable", "YEMenuView"
	menu set "Edit", "Copy", "disable", "YEMenuView"
	menu set "Edit", "Paste", "disable", "YEMenuView"
	menu set "Edit", "Copy to Snippet", "disable", "YEMenuView"
	menu set "Edit", "Clear Selection", "disable", "YEMenuView"
	menu set "Edit", "Clear All", "disable", "YEMenuView"
	menu set "Edit", "Find", "disable", "YEMenuView"
	menu set "Edit", "Find Again", "Disable", "YEMenuView"
	menu set "Edit", "Select All", "disable", "YEMenuView"
end sub

sub YEEnableButtons()
	Option set "YEUndoButton", "enabled", 1
	Option set "YECutButton", "enabled", 1
	Option set "YECopyButton", "enabled", 1
	Option set "YEPasteButton", "enabled", 1
	Option set "YEFindButton", "enabled", 1
	//Option set "YEFindAgainButton", "enabled", 1
	//Option set "YEQuitButton", "enabled", 1
	Option set "YEPasteSnippetButton", "enabled", 1
end sub

sub YEEnableMenu()
	Menu set "File", "Save", "enable", "YEMenuView"
	Submenu set "File", "Transfer...", "to Pe", "enable", "YEMenuView"
	Submenu set "File", "Transfer...", "to StyledEdit", "enable", "YEMenuView"
	//Menu set "File", "Close", "enable", "YEMenuView"
	menu set "Edit", "Undo/Redo", "enable", "YEMenuView"
	menu set "Edit", "Cut", "enable", "YEMenuView"
	menu set "Edit", "Copy", "enable", "YEMenuView"
	menu set "Edit", "Paste", "enable", "YEMenuView"
	menu set "Edit", "Copy to Snippet", "enable", "YEMenuView"
	menu set "Edit", "Clear Selection", "enable", "YEMenuView"
	menu set "Edit", "Clear All", "enable", "YEMenuView"
	menu set "Edit", "Find", "enable", "YEMenuView"
	menu set "Edit", "Select All", "enable", "YEMenuView"
end sub

sub YEFindstring(FindThis$)
	local linetogoto
	if textedit get "YEEditBox", "currentline"=textedit get "YEEditBox", "countlines" Textedit set "YEEditBox", "gotoline",1 //wraparound
	linetogoto = Textedit get "YEEditBox", "Find", FindThis$ // you don't actually DO anything with that numerical variable. Weird.
	option set "YEEditBox", "focus", true
end sub

sub YEOpenFile(YEFileToOpen$)
	local YEtempval$,YEtempval, streamhandle
	if window get "YEMainWindow","exists" = 0 YEOpenWindow()
	//check if file exists
	if FileExists(YEFileToOpen$) = 0 then
		Alert "File Not found!\nIt may have been deleted.", "OK", "Stop"
		return
	end if
	if YETextFileCheck(YEFileToOpen$) = 1 return
	if textedit get$ "YEEditBox" <> "" then
		YESaveFile(YECurrentFile$)
		textedit clear "YEEditBox"
	endif
	draw text 430,22, "Loading ...", "YEStatusbarView"
	streamhandle = open(YEFileToOpen$, "r")
	While (not eof(streamhandle))
		line input #streamhandle YEtempval$
		textedit add "YEEditBox", YEtempval$ + "\n"
	wend
	close streamhandle
	YECurrentFile$ = YEFileToOpen$
	textedit set "YEEditBox", "gotoline", 1
	wait 1 // prevents an immediate Auto-Save
	textedit set "YEEditBox", "editable", true
	if window get "YEMainWindow","exists" = 1 draw flush "YEStatusbarView"
	YEEnableButtons()
	YEEnableMenu()
end sub

sub YEOpenWindow()
	// Setup the main Editing window
	local  YExorigin, YEyorigin, YExwidth, YEyheight, YEtempval$
	YExorigin = 522: YEyorigin = 5: YExwidth = 494: YEyheight = 756
	if peek("desktopwidth") < 1024  YExwidth = peek("screenwidth") - YExorigin
	if peek("desktopheight") < 768 YEyheight = peek("desktopheight") -10
	/////////MAIN WINDOW///////////
	window open YExorigin,YEyorigin to YExorigin + YExwidth,YEyorigin + YEyheight, "YEMainWindow", "yab Editor"
	Window set "YEMainWindow", "look", "modal"
	Window set "YEMainWindow", "flags", "not-resizable"
	Window set "YEMainWindow", "flags", "not-zoomable"
	//////MENUS///////
	layout "Top, Left, Right", "YEMainWindow"
	view 0,0 to YExwidth,50, "YEMenuView", "YEMainWindow"
	//////FILE MENU///////
	Menu "File", "Save", "S", "YEMenuView"

	if FileExists("/boot/system/apps/codewalker/CodeWalker") Submenu "File", "Transfer...", "to CodeWalker", "", "YEMenuView"
	if FileExists("/boot/system/apps/Eddie/Eddie") Submenu "File", "Transfer...", "to Eddie", "", "YEMenuView"
	if FileExists("/boot/system/apps/JuffEd/juffed") Submenu "File", "Transfer...", "to JuffEd", "", "YEMenuView"
	if FileExists("/boot/system/apps/Koder") Submenu "File", "Transfer...", "to Koder", "", "YEMenuView"
	Submenu "File", "Transfer...", "to Pe", "", "YEMenuView"
	if FileExists("/boot/system/apps/STE/ste") Submenu "File", "Transfer...", "to Sintegrial", "", "YEMenuView"
	Submenu "File", "Transfer...", "to StyledEdit", "", "YEMenuView"
	if FileExists("/boot/system/apps/Tea/tea") Submenu "File", "Transfer...", "to Tea", "", "YEMenuView"
	if FileExists("/boot/system/apps/Trope/Trope") Submenu "File", "Transfer...", "to Trope", "", "YEMenuView"
	if FileExists("/boot/system/bin/gvim") Submenu "File", "Transfer...", "to VIM", "", "YEMenuView"
	if FileExists("/boot/system/apps/yate/Yate97X86") Submenu "File", "Transfer...", "to YATE", "", "YEMenuView"
	Menu "File", "Close", "W", "YEMenuView"
	//////EDIT MENU//////
	menu "Edit", "Undo/Redo", "Z", "YEMenuView"
	menu "Edit", "Cut", "X", "YEMenuView"
	menu "Edit", "Copy", "C", "YEMenuView"
	menu "Edit", "Paste", "V", "YEMenuView"
	menu "Edit", "Copy to Snippet", "", "YEMenuView"
	menu "Edit", "Clear Selection", "", "YEMenuView"
	menu "Edit", "Clear All", "", "YEMenuView"
	menu "Edit", "Find", "F", "YEMenuView"
	menu "Edit", "Find Again", "G", "YEMenuView"
	menu "Edit", "Replace", "", "YEMenuView"
	menu "Edit", "Select All", "A", "YEMenuView"
	YEDisableMenu()
	/////BUTTONBAR/////
	layout "Bottom, Left", "YEMainWindow"
	Button 5,21 to 90,47, "YEUndoButton", "Undo/Redo", "YEMenuView"
	Tooltip "YEUndoButton", "Undo/Redo the last change"
	Button 95,21 to 160,47, "YECutButton", "Cut", "YEMenuView"
	Tooltip "YECutButton", "Cut selection to clipboard"
	Button 165,21 to 230,47, "YECopyButton", "Copy", "YEMenuView"
	Tooltip "YECopyButton", "Copy selection to clipboard"
	Button 235,21 to 295,47, "YEPasteButton", "Paste", "YEMenuView"
	Tooltip "YEPasteButton", "Paste from clipboard"
	Button 300,21 to 360,47, "YEFindButton", "Find", "YEMenuView"
	Tooltip "YEFindButton", "Find text entered in the searchbox"
	Button 365,21 to 425,47, "YEFindAgainButton", "Again", "YEMenuView"
	Tooltip "YEFindAgainButton", "Repeat the last search"
	Button 430,21 to 490,47, "YEQuitButton", "Close", "YEMenuView"
	Tooltip "YEQuitButton", "Close this window"
	/////STATUS BAR////////
	view 0, YEyheight-30 to YExwidth, YEyheight, "YEStatusbarView", "YEMainWindow"
	Textcontrol 142, 5 to 275, 25, "YESearchField", "", "Enter search term", "YEStatusbarView"
	tooltip "YESearchField", "Enter the word or phrase to\nsearch for, then press ALT-F."
	dropbox 277,5 to 387,25, "YESnippetDropBox", "", "YEStatusbarView"
	tooltip "YESnippetDropBox","select a snippet here and press\nthe button to the right to insert it." 
	button 392, 3 to 418,25, "YEPasteSnippetButton", "✔", "YEStatusbarView"
	tooltip "YEPasteSnippetButton", "Press this button to insert\nthe currently selected snippet."
	view 5, YEyheight-30 to 140,YEyheight, "YELineNumberField", "YEMainWindow"		
	//////Text Area///////
	layout "All", "YEMainWindow"
	Textedit 0,50 to YExwidth, YEyheight -33, "YEEditBox", 3, "YEMainWindow"
	textedit set "YEEditBox", "editable", false
	textedit set "YEEditBox", "wordwrap", false 
	textedit set "YEEditBox", "autoindent", true 
	dropbox clear "YESnippetDropBox"
	for f = 1 to 15
		if YESnippets$(f) <> "" dropbox add "YESnippetDropBox", YESnippets$(f)
	next f
end sub

sub YEPasteSnippet()
	local YEcurrentsel$
	if YESnippet$ = "" return
	YEcurrentsel$= textedit get$ "YEEditBox", "Selection"
	if YEcurrentsel$ <> "" textedit set "YEEditBox", "clear"
	textedit add "YEEditBox", YESnippet$
end sub

sub YESaveFile(YESaveFile$)
	local tempfile$, streamhandle
	if YECurrentFile$ = "" return
	tempfile$ = TempDir$() + "/YEtemp.txt"
	system("touch " + tempfile$)
	if window get "YEMainWindow","exists" = 1 then
		YEDisableMenu()
		YEDisableButtons()
		textedit set "YEEditBox", "editable", false
		draw text 430,22, "Saving ...", "YEStatusbarView"
	endif
	streamhandle = Open(tempfile$, "w")
		print #streamhandle textedit get$ "YEEditBox"
	close streamhandle
	system("cat -s " + tempfile$ + " > " + YESaveFile$) //remove double blank lines
	system("mimeset -F '" + YESaveFile$ + "'")
	pause 0.5
	if window get "YEMainWindow","exists" = 1 then
		YEEnableMenu()
		YEEnableButtons()
		textedit set "YEEditBox", "editable", true
		draw flush "YEStatusbarView"
	endif
end sub

sub YETextFileCheck(YEFileToOpen$)
	//check if requested file is some kind of text file - Trying to load binaries WILL crash the editor!
	local YEtempval
	//if not(instr((attribute get$ "BEOS:TYPE", YEFileToOpen$), "text/")) then
	if (left$(system$("catattr -d BEOS:TYPE '" + YEFileToOpen$ + "'"), 5)) <> "text/" then 
		alert YEFileToOpen$ + "\n does not look like a text file! Please check and fix in Tracker", "OK", "warning"
		return 1 
	end if
	return 0
end sub

########################################
###DATA statements, if any, come here###
########################################

//==================
//SA Normal Mode data
//==================

label Sevennorm
Data 1
Data "7za"

label Anorm
Data 2
Data "addattr"
Data "alert" 

label Bnorm
Data 1
Data "basename --help"

label Cnorm
Data 17
Data "cat --help"
Data "cdda2wav --help"
Data "cdrecord --help"
Data "checkfs --help"
Data "chgrp --help"
Data "chmod --help"
Data "chop --help"
Data "chown --help"
Data "cksum --help"
Data "cmp --help"
Data "comm --help"
Data "copyattr --help"
Data "cp --help"
Data "csplit --help"
Data "ctags --help"
Data "curl --help"
Data "cut --help"

label Dnorm
Data 8
Data "date --help"
Data "dd --help"
Data "desklink"
Data "df --help"
Data "diff --help"
Data "diff3 --help"
Data "dirname --help"
Data "du --help"

Label Enorm
Data 6
Data "egrep --help"
Data "eject --help"
Data "env --help"
Data "error"
Data "expand --help"
Data "expr --help"

Label Fnorm
Data 9
Data "factor --help"
Data "fdinfo --help"
Data "fgrep --help"
Data "filepanel --help"
Data "find --help"
Data "finddir"
Data "fmt --help"
Data "fold --help"
Data "ftp -h"

Label Gnorm
Data 3
Data "getlimits --help"
Data"grep --help"
Data "groups --help"

Label Hnorm
Data 3
Data "head --help"
Data "hey"
Data "hostname --help"

Label Inorm
Data 3
Data "iconv --help"
Data "id --help"
Data "isvolume --help"

Label Jnorm
Data 1
Data "join --help"

Label Knorm
Data 2
Data "keymap --help"
Data "kill"

Label Lnorm
Data 11
Data "less --help"
Data "link --help"
Data "listattr"
Data "listdev --help"
Data "listusb --help"
Data "ln --help"
Data "locate --help"
Data "login --help"
Data "logname --help"
Data "ls --help"
Data "lsindex --help"

Label Mnorm
Data 15
Data "makebootable --help"
Data "md5sum --help"
Data "merge"
Data "mimeset --help"
Data "mkdir --help"
Data "mkdos"
Data "mkfifo --help"
Data "mkfs --help"
Data "mkindex"
Data "mkisofs --help"
Data "more --help"
Data "mount --help"
Data "mount_nfs --help"
Data "mountvolume --help"
Data "mv --help"

Label Nnorm
Data 3
Data "nano --help"
Data "nl --help"
Data "nohup --help"

Label Onorm
Data 1
Data "open"

Label Pnorm
Data 13
Data "package --help"
Data "paste --help"
Data "ping -h"
Data "play"
Data "playfile"
Data "playsound"
Data "playwav"
Data "pr --help"
Data "printenv --help"
Data "ps -h"
Data "ptx --help"
Data "pydoc --help"
Data "python -h"

Label Qnorm
Data 2
Data "query"
Data "quit"

Label Rnorm
Data 9
Data "rc --help"
Data "readlink --help"
Data "reindex --help"
Data "renice --help"
Data "rm --help"
Data "rmattr"
Data "rmdir --help"
Data "rmindex"
Data "rnano --help"

Label Snorm
Data 18
Data "screenmode --help"
Data "sed --help"
Data "seq --help"
Data "setdecor"
Data "settype --help"
Data "setversion"
Data "sftp --help"
Data "shutdown --help"
Data "sleep --help"
Data "sort --help"
Data "split --help"
Data "sqlite3 --help"
Data "stat --help"
Data "strings --help"
Data "su --help"
Data "sum --help"
Data "sync --help"
Data "sysinfo --help"

Label Tnorm
Data 13
Data "tac --help"
Data "tail --help"
Data "tee --help"
Data "telnet -h"
Data "timeout --help"
Data "top --help"
Data "touch --help"
Data "tr --help"
Data "traceroute --help"
Data "trash --help"
Data "truncate --help"
Data "tsort --help"
Data "tty --help"

Label Unorm
Data 9
Data "uname --help"
Data "unchop"
Data "uniq --help"
Data "unmount --help"
Data "untrash --help"
Data "unzip --help"
Data "unzipsfx --help"
Data "uptime --help"
Data "useradd --help"

Label Vnorm
Data 3
Data "vdir --help"
Data "version --help"
Data "vi --help"

Label Wnorm
Data 4
Data "waitfor"
Data "wc --help"
Data "wget --help"
Data "whoami --help"

Label Xnorm
Data 3
Data "xargs --help"
Data "xmlwf --help"
Data "xres  -help"

Label Ynorm
Data 1
Data "yes --help"

Label Znorm
Data 5
Data "zip"
Data "zipcloak -h"
Data "zipgrep --help"
Data "zipinfo --help"
Data "zipsplit -h"

// Dummy to preven OUT OF DATA error
data ""

//======================
//SA Pro mode data
//======================

label A
Data 8
Data "addattr"
Data "addr2line --help"
Data "alert"
Data "ar --help" 
Data "arp --help"
Data "as --help"
Data "autoconf --help"
Data "awk --help"

label B
Data 8
Data "base64 --help"
Data "basename --help"
Data "bash --help"
Data "bc --help"
Data "beep --help"
Data "bison --help"
Data "bunzip2 --help"
Data "bzip2 --help"

label C
Data 28
Data "c++ --help"
Data "c++filt --help"
Data "cal -h"
Data "cat --help"
Data "catattr"
Data "cc --help"
Data "cdda2wav --help"
Data "cdrecord --help"
Data "checkfs --help"
Data "chgrp --help"
Data "chmod --help"
Data "chop --help"
Data "chown --help"
Data "chroot --help"
Data "cksum --help"
Data "cmp --help"
Data "collectcatkeys --help"
Data "comm --help"
Data "compress -h"
Data "copyattr --help"
Data "cp --help"
Data "cpp --help"
Data "csplit --help"
Data "ctags --help"
Data "curl --help"
Data "curl-config --help"
Data "cut --help"
Data "cvs --help"

label D
Data 11
Data "date --help"
Data "dc --help"
Data "dd --help"
Data "desklink"
Data "devdump --help"
Data "df --help"
Data "diff --help"
Data "diff3 --help"
Data "dircolors --help"
Data "dirname --help"
Data "du --help"

Label E
Data 6
Data "egrep --help"
Data "eject --help"
Data "env --help"
Data "error"
Data "expand --help"
Data "expr --help"

Label F
Data 14
Data "factor --help"
Data "fdinfo --help"
Data "fgrep --help"
Data "filepanel --help"
Data "find --help"
Data "finddir"
Data "flex --help"
Data "fmt --help"
Data "fold --help"
Data "frcode --help"
Data "freetype-config --help"
Data "ftp -h"
Data "funzip --help"
Data "fwcontrol"

Label G
Data 15
Data "g++ --help"
Data "gawk --help"
Data "gcc --help"
Data "gcov --help"
Data "gdb --help"
Data "getlimits --help"
Data "git --help"
Data "git-receive-pack"
Data "git-upload-pack --help"
Data "gprof --help"
Data "grep --help"
Data "groups --help"
Data "gunzip --help"
Data "gzexe"
Data "gzip --help"

Label H
Data 5
Data "hd --help"
Data "head --help"
Data "hey"
Data "hg help"
Data "hostname --help"

Label I
Data 11
Data "i586-pc-haiku-gcc --help"
Data "iconv --help"
Data "id --help"
Data "ident --help"
Data "ifconfig --help"
Data "info --help"
Data "infokey --help"
Data "install --help"
Data "install-info --help"
Data "installsound --help"
Data "isvolume --help"

Label J
Data 1
Data "join --help"

Label K
Data 3
Data "kernel_debugger --help"
Data "keymap --help"
Data "kill"

Label L
Data 30
Data "ld --help"
Data "less --help"
Data "lessecho --help"
Data "lesskey --help"
Data "libtool --help"
Data "libtoolize --help"
Data "link --help"
Data "listattr"
Data "listdev --help"
Data "listres --help"
Data "listsem --help"
Data "listusb --help"
Data "ln --help"
Data "locate --help"
Data "logger -h"
Data "login --help"
Data "logname --help"
Data "ls --help"
Data "lsindex --help"
Data "lzcat --help"
Data "lzcmp --help"
Data "lzdiff --help"
Data "lzegrep --help"
Data "lzfgrep --help"
Data "lzgrep --help"
Data "lzless --help"
Data "lzma --help"
Data "lzmadec --help"
Data "lzmainfo --help"
Data "lzmore --help" 

Label M
Data 23
Data "m4 --help"
Data "make --help"
Data "makebootable --help"
Data "makeinfo --help"
Data "mbox2mail"
Data "md5sum --help"
Data "merge"
Data "message"
Data "mimeset --help"
Data "mkdepend --help"
Data "mkdir --help"
Data "mkdos"
Data "mkfifo --help"
Data "mkfs --help"
Data "mkhybrid --help"
Data "mkindex"
Data "mkisofs --help"
Data "modifiers --help"
Data "more --help"
Data "mount --help"
Data "mount_nfs --help"
Data "mountvolume --help"
Data "mv --help"

Label N
Data 6
Data "nano --help"
Data "neon-config --help"
Data "netstat --help"
Data "nl --help"
Data "nm --help"
Data "nohup --help"

Label O
Data 5
Data "objcopy --help"
Data "objdump --help"
Data "od --help"
Data "open"
Data "openssl --help"

Label P
Data 22
Data "package --help"
Data "paste --help"
Data "patch --help"
Data "pdftexi2dvi --help"
Data "perl --help"
Data "ping -h"
Data "ping6"
Data "play"
Data "playfile"
Data "playsound"
Data "playwav"
Data "pr --help"
Data "printenv --help"
Data "printf"
Data "prio --help"
Data "profile --help"
Data "protoize -h"
Data "ps -h"
Data "ptx --help"
Data "pydoc --help"
Data "python -h"
Data "python-config --help"

Label Q
Data 2
Data "query"
Data "quit"

Label R
Data 15
Data "ranlib --help"
Data "rc --help"
Data "readelf --help"
Data "readlink --help"
Data "reindex --help"
Data "release --help"
Data "renice --help"
Data "rlog"
Data "rm --help"
Data "rmattr"
Data "rmdir --help"
Data "rmindex"
Data "rnano --help"
Data "roster --help"
Data "route --help"

Label S
Data 39
Data "scp --help"
Data "screenmode --help"
Data "sed --help"
Data "seq --help"
Data "setdecor"
Data "setgcc --help"
Data "settype --help"
Data "setversion"
Data "setvolume --help"
Data "sftp --help"
Data "sftp-server -h"
Data "sh --help"
Data "sha1sum --help"
Data "shar --help"
Data "shred --help"
Data "shuf --help"
Data "shutdown --help"
Data "size --help"
Data "sleep --help"
Data "slogin --help"
Data "smtpd.py --help"
Data "sort --help"
Data "spamdbm --help"
Data "split --help"
Data "sqlite3 --help"
Data "ssh --help"
Data "ssh-keyscan --help"
Data "sshd -h"
Data "stat --help"
Data "strace --help"
Data "strings --help"
Data "strip --help"
Data "stty --help"
Data "su --help"
Data "sum --help"
Data "svn --help"
Data "svnsync --help"
Data "sync --help"
Data "sysinfo --help"

Label T
Data 20
Data "tac --help"
Data "tail --help"
Data "tar --help"
Data "tcpdump --help"
Data "tcptester -h"
Data "tee --help"
Data "telnet -h"
Data "texi2dvi --help"
Data "texindex"
Data "timeout --help"
Data "top --help"
Data "touch --help"
Data "tput --help"
Data "tr --help"
Data "traceroute --help"
Data "translate --help"
Data "trash --help"
Data "truncate --help"
Data "tsort --help"
Data "tty --help"

Label U
Data 19
Data "uname --help"
Data "unchop"
Data "unexpand --help"
Data "uniq --help"
Data "unlink --help"
Data "unlzma --help"
Data "unmount --help"
Data "unprotoize -h"
Data "unrar --help"
Data "unshar --help"
Data "untrash --help"
Data "unxz --help"
Data "unzip --help"
Data "unzipsfx --help"
Data "updatedb --help"
Data "uptime --help"
Data "useradd --help"
Data "uudecode --help"
Data "uuencode --help"

Label V
Data 4
Data "vdir --help"
Data "version --help"
Data "vmstat --help"
Data "vsyasm --help"

Label W
Data 5
Data "waitfor"
Data "watch --help"
Data "wc --help"
Data "wget --help"
Data "whoami --help"

Label X
Data 17
Data "xargs --help"
Data "xml2-config --help"
Data "xmlcatalog --help"
Data "xmllint --help"
Data "xmlwf --help"
Data "xres  -help"
Data "xsubpp"
Data "xz --help"
Data "xzcat --help"
Data "xzcmp --help"
Data "xzdec --help"
Data "xzdiff --help"
Data "xzegrep --help"
Data "xzfgrep --help"
Data "xzgrep --help"
Data "xzless --help"
Data "xzmore --help" 

Label Y
Data 3
Data "yacc --help"
Data "yasm --help"
Data "yes --help"

Label Z
Data 11
Data "zcat --help"
Data "zcmp --help"
Data "zdiff --help"
Data "zforce"
Data "zgrep --help"
Data "zip"
Data "zipcloak -h"
Data "zipgrep --help"
Data "zipinfo --help"
Data "zipsplit -h"
Data "znew --help"

// Dummy to preven OUT OF DATA error
data ""

########################################
######YA Data#############################
##########################################

label yadata

DATA "ABS()", "BSC","y=ABS(x)","Returns the absolute value of its numeric argument

Synopsis

y=ABS(x)

Description

If the argument of the abs-function is positive (e.g. 2) it is returned unchanged, if the argument is negative (e.g. -1) it is returned as a positive value (e.g. 1).

Example

print abs(-2),abs(2)

This example will print 2 2"

//==============================

DATA "ACOS()", "BSC","x=ACOS(y)","Returns the arcus cosine of its numeric argument.

Synopsis

x=ACOS(angle)

Description

The acos is the arcus cosine-function, i.e. the inverse of the cos-function. Or, more elaborate: It Returns the angle (in radian, not degree !), which, fed to the cosine-function will produce the argument passed to the acos-function."

//==============================

DATA "ALERT {1-BUTTON}", "GUI","ALERT Txt$, Lbl$, Tp$","Opens an alert window

Synopsis

ALERT Text$, ButtonLabel$, Type$

Description

Opens an alert window with Text$ and the button Label$ of type Type$

Type$=\"none/info/idea/warning/stop\""

//==============================

DATA "ALERT {3-BUTTON}", "GUI","x=ALERT Txt$, Bttn1$, Bttn2$, Bttn3$, Tp$","Opens an alert window

Synopsis
Selected=ALERT Text$, Button1$, Button2$, Button3$, Type$

Description
A more general Alert window. Specify a text and up to three buttons. If Button2$ or Button3$ is set to \"\", the button is not shown.

The selected button is returned, where Selected=1 is the left, 2 the middle and 3 the right button.

Type$=\"none/info/idea/warning/stop\""

//==============================

DATA "AND", "BSC","a AND b","Logical and, used in conditions

Synopsis
 
if (a and b)
while (a and b) 

Description

Used in conditions (e.g within if, while or until) to join two expressions. Returns true, if and only if its left and right argument are both true and false otherwise.

Example
 
input \"Please enter a number\" a 
if (a>=1 and a<=9) print \"your input is between 1 and 9\""

//==============================

DATA "AND()", "BSC","x=AND(a,b)","The bitwise arithmetic AND

Synopsis

x=AND(a,b) 

Description

Used to compute the bitwise and of both its argument. Both arguments are treated as binary numbers (i.e. a series of 0 and 1); a bit of the resulting value will then be 1, if both arguments have a 1 at this position in their binary representation.Note, that both arguments are silently converted to integer values and that negative numbers have their own binary representation and may lead to unexpected results when passed to and.

Example
 
print and(6,3) 
          
This will print 2. This result is clear, if you note, that the binary representation of 6 and 3 are 110 and 011 respectively; this will yield 010 in binary representaion or 2 as decimal."

//==============================

DATA "ARRAYDIM()", "BSC","a=ARRAYDIM(b())","Returns the dimension of the array, which is passed as an array reference

Synopsis

a=ARRAYDIM(b())

Description

If you apply the arraydim()-function on a one-dimensional array (i.e. a vector) it will return 1, on a two-dimensional array (i.e. a matrix) it will return 2, and so on.

This is mostly used within subroutines, which expect an array among their parameters. Such subroutines tend to use the arraydim-funtion to check, if the array which has been passed, has the right dimension. E.g. a subroutine to multiply two matrices may want to check, if it really is invoked with two 2-dimensional arrays.

Example
 
dim a(10,10),b(10) 
print arraydim(a()),arraydim(b()) 
          
This will print 2 1, which are the dimension of the arrays a() and b(). You may check out the function arraysize for a full-fledged example."

//==============================

DATA "ARRAYSIZE()", "BSC","x=ARRAYSIZE(a(),b)","Returns the size of a dimension of an array

Synopsis

x=ARRAYSIZE(a(),b)

Description

The arraysize-function computes the size of a specified dimension of a specified array. Here, size stands for the maximum number, that may be used as an index for this array. The first argument to this function must be an reference to an array, the second one specifies, which of the multiple dimensions of the array should be taken to calculate the size.

An example involving subroutines: Let's say, an array has been declared as dim a(10,20) (that is a two-dimensional array or a matrix). If this array is passed as an array reference to a subroutine, this sub will not know, what sort of array has been passed. With the arraydim-function the sub will be able to find the dimension of the array, with the arraysize-function it will be able to find out the size of this array in its two dimensions, which will be 10 and 20 respectively.

Our sample array is two dimensional; if you envision it as a matrix this matrix has 10 lines and 20 columns (see the dim-statement above. To state it more formally: The first dimension (lines) has a size of 10, the second dimension (columns) has a size of 20; these mumbers are those returned by arraysize(a(),1) and arraysize(a(),2) respectively. Refer to the example below for a typical usage.

Example

rem  This program adds two matrices elementwise. 
dim a(10,20),b(10,20),c(10,20) 
rem  initialization of the arrays a() and b() 
for y=1 to 10:for x=1 to 20 
   a(y,x)=int(ran(4)):b(y,x)=int(ran(4)) 
next x:next y 
matadd(a(),b(),c()) 
print \"Result:\" 
for x=1 to 20 
   for y=10 to 1 step -1 
      print c(y,x),\" \"
   next y 
   print 
next x 
sub matadd(m1(),m2(),r()) 
   rem  This sub will add the matrices m1() and m2() 
   rem  elementwise and store the result within r() 
   rem  This is not very useful but easy to implement. 
   rem  However, this sub excels in checking its arguments 
   rem  with arraydim() and arraysize() 
   local x:local y 
   if (arraydim(m1())<>2 or arraydim(m2())<>2 or arraydim(r())<>2) then 
      error \"Need two dimensional arrays as input\" 
   endif 
   y=arraysize(m1(),1):x=arraysize(m1(),2) 
   if (arraysize(m2(),1)<>y or arraysize(m2(),2)<>x) then 
      error \"The two matrices cannot be added elementwise\" 
   endif 
   if (arraysize(r(),1)<>y or arraysize(r(),2)<>x) then 
      error \"The result cannot be stored in the third argument\" 
   endif 
   local xx:local yy 
   for xx=1 to x 
      for yy=1 to y 
         r(yy,xx)=m1(yy,xx)+m2(yy,xx) 
      next yy 
   next xx 
 end sub"

//==============================

DATA "ASC()", "BSC","a=ASC(char$)","Accepts a string and returns the position of its first character within the ascii charset

Synopsis

a=ASC(char$)

Description

The asc-function accepts a string, takes its first character and looks it up within the ascii-charset; this position will be returned. The asc-function is the opposite of the chr$-function. There are valid uses for asc, however, comparing strings (i.e. to bring them into alphabetical sequence) is not among them; in such many cases you might consider to compare strings directly with <,=and > (rather than converting a string to a number and comparing this number).

Example
 
input \"Please enter a letter between \'a\' and \'y\': \" a$ 
if (a$<\"a\" or a$>\"y\") print a$,\" is not in the proper range\":end 
print \"The letter after \",a$,\" is \",chr$(asc(a$)+1)"

//==============================

DATA "ASIN()", "BSC","y=ASIN(x)","Returns the arcus sine of its numeric argument

Synopsis

angle=ASIN(x)

Description

The acos is the arcus sine-function, i.e. the inverse of the sin-function. Or, more elaborate: It Returns the angle (in radian, not degree!), which, fed to the sine-function will produce the argument passed to the asin-function.

Example
 
print asin(0.5),asin(sin(pi)) 
          
This will print 0.523599 -2.06823e-13 which is `0 and almost 0 respectively."

//==============================

DATA "AT", "BSC", "print AT(a,b)","Can be used in the print-command to place the output at a specified position

Synopsis

print AT(a,b) 
print @(a,b) 

Description

The at-clause takes two numeric arguments (e.g. at(2,3)) and can be inserted after the print-keyword. at() can be used only if clear screen has been executed at least once within the program (otherwise you will get an error).

The two numeric arguments of the at-function may range from 0 to the width of your terminal minus 1, and from 0 to the height of your terminal minus 1; if any argument exceeds these values, it will be truncated accordingly. However, yab has no influence on the size of your terminal (80x25 is a common, but not mandatory), the size of your terminal and the maximum values acceptable within the at-clause may vary. To get the size of your terminal you may use the peek-function: peek(\"screenwidth\") returns the width of your terminal and peek(\"screenheight\") its height.

Example
 
clear screen 
maxx=peek(\"screenwidth\")-1:maxy=peek(\"screenheight\")-1 
for x=0 to maxx 
  print at(x,maxy*(0.5+sin(2*pi*x/maxx)/2)) \"*\" 
next x 
          
This example plots a full period of the sine-function across the screen."

//==============================

DATA "ATAN()", "BSC","angle=ATAN(a,b)","Returns the arcus tangens of its numeric argument

Synopsis

angle=atan(a,b) 
angle=atan(a) 

Description

The atan is the arcus-tangens-function, i.e. the inverse of the tan-function. Or, more elaborate: It Returns the angle (in radian, not degrees!), which, fed to the tan-function will produce the argument passed to the atan-function.

The atan-function has a second form, which accepts two arguments: atan(a,b) which is (mostly) equivilantly to atan(a/b) except for the fact, that the two-argument-form returns an angle in the range -`0 to `0, whereas the one-argument-form returns an angle in the range -`0/2 to `0/2. To understand this you have to be good at math.

Example
 
print atan(1),atan(tan(pi)),atan(-0,-1),atan(-0,1) 
          
This will print 0.463648 2.06823e-13 -3.14159 3.14159 which is `0/4, almost 0, -`0 and `0 respectively."

//==============================

DATA "ATTRIBUTE CLEAR", "BSC", "ATTRIBUTE CLEAR Name$, Filename$", "clear attributes

ATTRIBUTE CLEAR Name$, Filename$
Delete the attribute Name$ from file Filename$."

//==============================


data "ATTRIBUTE GET$", "BSC", "Value$ = ATTRIBUTE GET$ Name$, Filename$", "retrieve an attribute

Value$ = ATTRIBUTE GET$ Name$, Filename$
Get the string value of the attribute Name$ for file Filename$.

Returns \"true\" or \"false\" for \"Bool\" type attributes.
If Name$=\"\", returns a list of attribute names and their types separated by \" | \". Returns \"Unsupported\" for types that are not valid for yab. 

If Name$ and Filename$ both = \"\", returns the current program directory."

//==============================

DATA "ATTRIBUTE GET", "BSC", "Value = ATTRIBUTE GET Name$, Filename$", "retrieve the number of attributes

Value = ATTRIBUTE GET Name$, Filename$
Get the number value of the attribute Name$ for file Filename$."

//==============================

DATA "ATTRIBUTE SET", "BSC", "ATTRIBUTE SET Type$, Name$, Value$, Filename$", "set an attribute

ATTRIBUTE SET Type$, Name$, Value$, Filename$

Set the attribute Name$ of type Type$ for the file Filename$ with the string Value$.
These are valid types Type$:
\"String\", \"Int\", \"Long\", \"Double\", \"Float\", \"Mime\", \"Bool\"
uses a value$ of \"true\" or \"false\" for Bool type attributes."

//==============================

DATA "BELL/BEEP", "BSC","BELL","ring the bell within your computer

Synopsis

beep

Description

The bell-command rings the bell within your computer once. This command is not a sound-interface, so you can neither vary the length or the height of the sound (technically, it just prints \a). bell is exactly the same as beep.

Example
 
beep:print \"This is a problem ...\" "

//==============================

DATA "BIN$()", "BSC","hex$=BIN$(dec)","Converts a number into a sequence of binary digits

Synopsis

hexadecimal$=bin$(decimal)

Description

The bin$-function takes a single numeric argument an converts it into a string of binary digits (i.e. zeroes and ones). If you pass a negative number to bin$, the resulting string will be preceeded by a \'-\'.

If you want to convert the other way around (i.e. from binary to decimal) you may use the dec-function.

Example
 
for a=1 to 100 
  print bin$(a) 
next a 
          
This example prints the binary representation of all digits between 1 and 100."

//==============================

DATA "BIND()", "BSC","BIND(\"foo\")","Binds a yab-program and the yab-interpreter together into a standalone program.

Synopsis

bind(\"foo.exe\")

Description

The bind-command combines your own yab-program (plus all the libraries it does import) and the interpreter by copying them into a new file, whose name is passed as an argument. This new program may then be executed on any computer, even if it does not have yab installed.

Example
 
if (!peek(\"isbound\")) then 
  bind \"foo\" 
  print \"Successfully created the standalone executable \'foo\' !\" 
  exit 
endif 
print \"Hello World !\" 
          
This example creates a standalone program foo from itself."

//==============================

DATA "BITMAP", "GUI","BITMAP Width, Height, ID$"," Creates a new bitmap in memory, you can draw on it

Synopsis

BITMAP Width, Height, ID$

Description

A bitmap is always initialized with a white transparent background"

//==============================

DATA "BITMAP COLOR", "GUI","col=BITMAP COLOR x,y, ID$, ColPrt$","Returns the RGB value of a single pixel in a bitmap

Synopsis

color=BITMAP COLOR x,y, ID$, ColorPart$

Description

ColorPart$=\"red\" or \"green\" or \"blue\"

Returns the color of the pixel at position (x,y) of the bitmap ID$"

//==============================

DATA "BITMAP GET {COPY}", "GUI","BITMAP GET x1, y1 to x2, y2, Target_bitmap$, Source_bitmap$","Copies specified area of Source_bitmap$ to Target_bitmap$

Synopsis

BITMAP GET x1, y1 to x2, y2, Target_bitmap$, Source_bitmap$"

//==============================

DATA "BITMAP GET {DIMENSIONS}", "GUI", "BITMAP GET ID$, Opt$","delivers height and width of a bitmap

Synopsis

BITMAP GET ID$, Option$

Description

Option$=\"height\" or \"width\""

//==============================

DATA "BITMAP GET {ICON}", "GUI","BITMAP GET IcnSz, Btmp$, File$","Copies the icon, shown in Tracker, of File$ in the specified IconSize onto Bitmap$

Synopsis

BITMAP GET IconSize, Bitmap$, File$"

//==============================

DATA "BITMAP GET {MIMETYPE}", "GUI", "BITMAP GET ID$, Opt$, Pth$","copies an icon to a bitmap

Synopsis

BITMAP GET ID$, Option$, Path$

Description

An Option can be:

\"Path\"=Path$ must be the path to a file

\"Mime\" or \"Mime16\"=Path$ must be the mimetype of the file which icon is to be swown.
The resulting bitmap is 16 to 16.

\"Mime32\"=Path$ must be the mimetype of the file which icon is to be swown.
The resulting bitmap is 32 to 32."

//==============================

DATA "BITMAP IMAGE", "GUI","Err=BITMAP IMAGE Fil$, Btmp$","Load image file into a new Bitmap

Synopsis

ErrCode=BITMAP IMAGE ImageFile$, Bitmap$

Description

Load image file ImageFIle$ into a new Bitmap called Bitmap$"

//==============================

DATA "BITMAP REMOVE", "GUI","BITMAP REMOVE Bitmap$","Removes a Bitmap from memory

Synopsis

BITMAP REMOVE Bitmap$"

//==============================

DATA "BITMAP SAVE", "GUI","Err=BITMAP SAVE Bitmap$, File$, Format$","Saves a bitmap

Synopsis

ErrCode=BITMAP SAVE Bitmap$, FileName$, Format$

Description

Saves a bitmap as FileName$ (overwrites existing ones!) in a Format$ of one of the following: {\"png\", \"tiff\", \"ppm\", \"bmp\", \"jpeg\", \"tga\"}

Note: that is the least common denominator. For reasons of compatibility I can\'tsupport other translators (like e.g. gif).

ErrCode=0 everything worked fine
ErrCode=1 file could not be saved"

//==============================

DATA "BOXVIEW", "GUI","BOXVIEW x1,y1 TO x2,y2, ID$, Label$, LineType, View$","Adds a box

Synopsis

BOXVIEW x1,y1 TO x2,y2, ID$, Label$, LineType, View$

Description

Adds a box, note: the actual view of the BOXVIEW (where you can place your widgets) is at
(x1+5,y1+10) to (x2-5,y2-5). This may be a subject of change!

LineType=0 means no border
LineType=1 means simple line border
LineType=2 means fancy line border"

//==============================

DATA "BREAK", "BSC","BREAK","breaks out of a switch statement or a loop

Synopsis

break

Description

break transfers control immediately outside the enclosing loop or switch statement. This is the preferred way of leaving such a statement.

Example
 
for a=1 to 10 
  break 
  print \"Hi\" 
next a 

while(1) 
  break 
  print \"Hi\" 
wend 

repeat 
  break 
  print \"Hi\" 
until(0) 

switch 1 
  case 1:break 
  case 2:case 3:print \"Hi\" 
end switch 
          
This example prints nothing at all, because each of the loops (and the switch-statement) does an immediate break (before it could print any \"Hi\")."

//==============================

DATA "BUTTON", "GUI","BUTTON x1,y1 TO x2,y2, ID$, Label$, View$","Sets a button

Synopsis

BUTTON x1,y1 TO x2,y2, ID$, Label$, View$

Description

The BUTTON command creates a button from the coordinates (x1,y1) to (x2,y2) on the window or view named View$. It has a text label Label$ and the identifier ID$.

With the option set command you can modify the button, as setting the background color, the focus, enabling or diabling it or resizing it to its preferred size.

The button when pressed will send a message string with ID$.

In standard layout, the button will follow the lower, right corner of the view or window.

Always use meaningful labels for buttons. If you care for localization, remember that labels can be much longer in other languages. So either provide enough space or use the option set command to auto-resize the button."

//==============================

DATA "BUTTON IMAGE", "GUI","BUTTON IMAGE x,y, ID$, Pressed$, Normal$, Disabled$, View$","Create an image button

Synopsis

BUTTON IMAGE x,y, ID$, EnabledPressed$, EnabledNormal$, Disabled$, View$

Description

This command lets you create a button with images named ID$ on the view View$. The position (x,y) is the upper left corner of the images and the size of the first image (EnabledPressed$) is taken.

You have to provide at least two image files:

EnabledPressed$ -- the image file name of the pressed button
EnabledNormal$ -- the image file name of the released button

The images can be of any format that Haiku can translate.

If you want to disable the button, you should provide the additional image file:

Disabled$ -- the image file name of the disabled button 
You can put in an empty string \"\" if you don't need a disabled button.

Just be aware that image files with relative path might be not found when you start your program as a script from tracker.

The button when pressed will send a message string with ID$.

In standard layout, the button will follow the lower, right corner of the view or window.

Be creative but do not use offensive images. For icons, try to use Haiku-like icons always. Ask in the community if you need assistence in creating new icons."

//==============================

DATA "CALENDAR", "GUI","CALENDAR x,y, ID$, Frmt$, StDt$, View$","Create a new calendar

Synopsis:

CALENDAR x,y, ID$, Format$, SetDate$, View$

Description:

Calendar is a nifty widget that gives you a date textcontrol with a dropdown calendar window. It is created at (x,y) as upper left corner on the view View$. With the default font size, it always has a width of 80 pixels and a height of 20 pixels. 

You have to provide a date format Format$ which must be either \"DDMMYYYY\" for day, month, year or \"MMDDYYYY\" for month, day, year. Futhermore, you have to add a divider to the Format$ which can be either \".\", \"/\" or \"-\". Thus, the default Format$ looks like this: \"DDMMYYYY.\"

The SetDate$ should give the starting date in the format you have chosen. Default is the current day, when SetDate$=\"\". Note: this SetDate$ has a different format than the yab command date$. However, it is not too difficult to convert these formats.

The calendar can be disabled or enabled with the option set command.

Layout:

In standard layout, the calendar will follow the lower, right corner of the view or window."

//==============================

DATA "CALENDAR GET$", "GUI","GDate$=CALENDAR GET$ Cal$","Returns the selected date of a calendar

Synopsis:

GetDate$=CALENDAR GET$ Calendar$

Description:

The command will return the currently selected date of the calendar widget named Calendar$. Note: the calendar does not send any messages, so use this command to read out a calendar.

Note: This GetDate$ has a different format than the yab command date$. However, it is not too difficult to convert these formats."

//==============================

DATA "CALENDAR SET", "GUI","CALENDAR SET Cal$, Date$","Sets the date for a calendar

Synopsis:

CALENDAR SET Calendar$, SetDate$

Description:

This lets you set the date of the calendar named Calendar$. Note: SetDate$ has to use the format, that is defined for the calendar.

Note: this SetDate$ has a different format than the yab command date$. However, it is not too difficult to convert these formats."

//==============================

DATA "CANVAS", "GUI","CANVAS x1,y1 to x2,y2, ID$, View$","Create a special view for flicker-free drawing 

Synopsis

CANVAS x1,y1 to x2,y2, ID$, View$

Description

A canvas is a special view for flicker-free drawing. It always shows a bitmap and thus cannot be resized. However, it does not have a drawing queue, so you do not need DRAW FLUSH

A canvas is always initialized with a white background"

//==============================

DATA "CASE", "BSC","CASE x","Mark the different cases within a switch-statement

Synopsis
 
switch a 
  case 1 
  case 2 
end switch 

switch a$ 
  case \"a\" 
  case \"b\" 
end switch 

Description

Please see the switch-statement.

Example
 
input a 
switch(a) 
  case 1:print \"one\":break 
  case 2:print \"two\":break 
  default:print \"more\" 
end switch 
          
Depending on your input (a number is expected) this code will print one or two or otherwise more."

//==============================

DATA "CHR$", "BSC","character$=CHR$(ascii)","Accepts a number and returns the character at this position within the ascii charset

Synopsis

character$=chr$(ascii)

Description

The chr$-function is the opposite of the asc-function. It looks up and returns the character at the given position within the ascii-charset. It\'s typical use is to construct nonprintable characters which do not occur on your keyboard. Nevertheless you won\'t use chr$ as often as you might think, because the most important nonprintable characters can be constructed using escape-sequences using the \\-character (e.g. you might use \\n instead of chr$(10) wherever you want to use the newline-character).

Example
 
print \"a\",chr$(10),\"b\" 
          
This will print the letters \'a\' and \'b\' in different lines because of the intervening newline-character, which is returned by chr$(10)."

//==============================

DATA "CHECKBOX", "GUI","CHECKBOX x,y, ID$, Lbl$, IsSel, View$","Create a new checkbox

Synopsis:

CHECKBOX x,y, ID$, Label$, IsSelected, View$

Description:

Set up a checkbox named ID$ at the position (x,y). It will display the label Label$ next to the box. If IsSelected is set to true, the checkbox will be selected.

You can use option set to disable the checkbox or to change the label.

Message:

The checkbox when selected will send a message string with ID$+\":ON\", and when deselected with the message string ID$+\":OFF\".

Layout:

In standard layout, the checkbox will follow the lower, right corner of the view or window.

Design:

Try to align checkboxes below each other. Also put them in groups (e.g. in a boxview) when you have many checkboxes."

//==============================

DATA "CHECKBOX IMAGE", "GUI","CHECKBOX IMAGE x,y, ID$, EnablOn$, EnablOff$, DisablOn$, DisablOff$, IsSel, View$","Create a new checkbox with images

Synopsis:

CHECKBOX IMAGE x,y, ID$, EnabledOn$, EnabledOff$, DisabledOn$, DisabledOff$, IsSelected, View$

Description:

This command lets you create a checkbox with images named ID$ on the view View$. The position (x,y) is the upper left corner of the images and the size of the first image (EnabledOn$) is taken. If IsSelected is set to true, the checkbox will be selected.

You have to provide at least two image files:

EnabledOn$ -- the image file name of the selected checkbox
EnabledOff$ -- the image file name of the deselected checkbox
The images can be of any format that BeOS or ZETA can translate.

If you want to disable the checkbox, you should provide the additional image files:

DisabledOn$ -- the image file name of the disabled selected checkbox
DisabledOff$ -- the image file name of the disabled deselected checkbox
You can put in an empty string \"\" if you don't need a disabled checkbox.

Just be aware that image files with relative path might be not found when you start your program as a script from tracker.

You can use option set to disable the checkbox.

Message:

The checkbox when selected will send a message string with ID$+\":ON\", and when deselected with the message string ID$+\":OFF\".

Layout:

In standard layout, the checkbox will follow the lower, right corner of the view or window.

Design:

Be creative but do not use offensive images. For icons, try to use Haiku-like icons always. Ask in the community if you need assistence in creating new icons."

//==============================

DATA "CHECKBOX SET", "GUI","CHECKBOX SET ChckBx$, IsSel","(de-)select the checkbox

Synopsis:

CHECKBOX SET CheckBox$, IsSelected

Description:

If IsSelected is set to true, the checkbox named CheckBox$ will be selected. If IsSelected is set to false, the checkbox will be deselected."

//==============================

DATA "CLEAR SCREEN", "TXT","CLEAR SCREEN","Erases the text window

Synopsis
 
clear screen 

Description

clear screen erases the text window (the window where the output of print appears).

It must be issued at least once, before some advanced screen-commands (e.g. print at or inkey$) may be called; this requirement is due to some limititations of the curses-library, which is used by yab under Unix for some commands.

Example
 
clear screen 
print \"Please press a key : \"
a$=inkey$ 
print a$ 
          
The clear screen command is essential here; if it would be omitted, yab would issue an error (\"need to call \'clear screen\' first\") while trying to execute the inkey$-function."

//==============================

DATA "CLIPBOARD COPY", "GUI","CLIPBOARD COPY Text$","Copy a string to the clipboard

Synopsis:

CLIPBOARD COPY Text$

Description:

Clipboard copy simply copies the string Text$ to the system clipboard. Note: This will overwrite all text currently stored in the clipboard.

Example:

print \"This is the content of the clipboard: \"+clipboard paste$
print \"Now we copy \\\"Foo Bar\\\" to the clipboard\"
clipboard copy \"Foo Bar\"
print \"This is the content of the clipboard: \" + clipboard paste$

Explanation:

The example will first display whatever is written in the clipboard (might be empty too), and then copies the string \"Foo Bar\" to the clipboard. Another output shows, it actually worked."

//==============================

DATA "CLIPBOARD PASTE$", "GUI","Text$=CLIPBOARD PASTE$","Read from the clipboard

Synopsis:

Text$=CLIPBOARD PASTE$

Description:

This command will read out (\"paste\") the content of the system clipboard.

Example:

print \"This is the content of the clipboard: \"+clipboard paste$
print \"Now we copy \\\"Foo Bar\\\" to the clipboard\"
clipboard copy \"Foo Bar\"
print \"This is the content of the clipboard: \" + clipboard paste$

Explanation:

The example will first display whatever is written in the clipboard (might be empty too), and then copies the string \"Foo Bar\" to the clipboard. Another output shows, it actually worked."

//==============================

DATA "CLOSE", "BSC","CLOSE #filenum","Close a file, which has been opened before

Synopsis

close filenum 
close #filenum 

Description

The close-command closes an open file. You should issue this command as soon as you are done with reading from or writing to a file.

Example
 
open \"my.data\" for reading as 1 
input #1 a 
print a 
close 1 
          
This program opens the file \"my.data\", reads a number from it, prints this number and closes the file again."

//==============================

DATA "COLOR/COLOUR", "TXT","print COLOR(fore$,back$) text$","Print with color

Synopsis
 
print color(fore$) text$ 
print color(fore$,back$) text$ 

Description

Not a seperate command, but part of the print-command; may be included just after print and can only be issued after clear screen has been executed.

color() takes one or two string-arguments, specifying the color of the text and (optionally) the background.

The one or two strings passed to color() can be one of these: \"black\", \"white\", \"red\", \"blue\", \"green\", \"yellow\", \"cyan\" and \"magenta\" (which can be abbreviated as \"bla\", \"whi\", \"red\", \"blu\", \"gre\", \"yel\", \"cya\" and \"mag\" respectively).

color() can only be used, if clear screen has been issued at least once.

Note, that color() can be written as colour() too.

Example
 
clear screen 
dim col$(7):for a=0 to 7:read col$(a):next a 
do 
  print color(col$(ran(7)),col$(ran(7))) \" Hallo \"
  pause 0.01 
loop 
data \"black\",\"white\",\"red\",\"blue\" 
data \"green\",\"yellow\",\"cyan\",\"magenta\" 
          
This prints the word \" Hallo \" in all colors accross your screen."

//==============================

DATA "COLORCONTROL", "GUI","COLORCONTROL x,y, ID$, View$","Create a new control for choosing a color

Synopsis:

COLORCONTROL x,y, ID$, View$

Description:

Colorcontrol gives you a basic color selection tool in only one command. The colorcontrol named ID$ has its upper left corner at the position (x,y) of the view View$. It always has a width of 276 pixels and a height of 54 pixels. 

Note: The colorcontrol will look differently on 8 bit displays than on  displays with 16 or more bit. However, this should not concern you, the system will take care of that. On BeOS, the colorcontrol will have an additional deactivated selection for alpha channel selection. This is not functional, so again, do not care.

The colorcontrol does not send any message, you have to check with colorcontrol get what the user selected.

You can use option set to disable the colorcontrol. Use colorcontrol set, to set a color.

Layout:

In standard layout, the colorcontrol will follow the lower, right corner of the view or window.

Design:

Always give feedback to the user, what the color looks like that he is currently selecting."

//==============================

DATA "COLORCONTROL GET", "GUI","Value=COLORCONTROL GET Control$, Component$","Return a color component of the currently selected color in a colorcontrol

Synopsis:

Value=COLORCONTROL GET ColorControl$, ColorComponent$

Description:

Returns the current selected color component of the colorcontrol ColorControl$. Value is always between 0 and 255, where lower values represent darker colors and higher values represent lighter colors.

ColorComponent$ has to be one of the following:
\"Red\" -- the value of the red color
\"Green\" -- the value of the green color
\"Blue\" -- the value of the blue color"

//==============================

DATA "COLORCONTROL SET", "GUI","COLORCONTROL SET Control$, r,g,b","Set the color in a colorcontrol

Synopsis:

COLORCONTROL SET ColorControl$, r,g,b

Description:

Sets the color in the colorcontrol ColorControl$ to its RGB values r, g and b. Read the part on the draw set command to learn more about RGB color space in yab."

//==============================

DATA "COLUMNBOX", "GUI","COLUMNBOX x1,y1 TO x2,y2, ID$, HScrllBr, Option$, View$","Create a list widget with columns

Synopsis:

COLUMNBOX x1,y1 TO x2,y2, ID$, HasHScrollbar, Option$, View$

Description:

The columnbox ist created at (x1,y1) to (x2,y2) on the target view named View$. It gets an own ID i.e. ID$. If it should have a horizontal scrollbar, set HasHScrollbar to true otherwise set it to false. Note: a columnbox always has a vertical scrollbar.

There are several options regarding the behaviour of the columns. These options affect all columns:

\"movable\" -- the columns can be dragged
\"resizable\" -- the columns can be resized
\"popup\" -- clicking on the columns with the right mouse button brings up a popup menu with all column names
\"removable\" -- the columns can be removed

An additional option is \"no-border\" which draws the columnbox without a borderline.

Several options can be combined, e.g. \"movable, resizable, no-border\". Note: If \"removable\" is allowed, you should allow \"popup\" too, so that removed columns can be brought back again.

After setting up a columnbox you have to add columns with the columnbox column command before adding items.

Note: A columnbox cannot be sorted.

Message:

The columnbox provides two messages. The first kicks in when a row is selected by clicking once on it or by the up and down keys. This then has the format ID$ + \":_Select:\" + SelectedRow$ where SelectedRow$ contains the number of the row selected. The second message is send, when a row is invoked, i.e. by double-clicking at a row or pressing the Enter key. It has the format ID$ + \":_Invoke:\" + SelectedRow$.

Layout:

The columbox will follow all sides as in standard layout.

Design:

To use a columnbox is almost always a good idea. It helps to present a lot of data in an organized way. Additionally it allows bitmaps and icons as list entries and it is the most customizable list widget in yab."

//==============================

DATA "COLUMNBOX ADD", "GUI","COLUMNBOX ADD ColumnBox$, Column, Row, Height, Item$","Add an item to a columnbox

Synopsis:

COLUMNBOX ADD ColumnBox$, Column, Row, Height, Item$

Description:

To add an item named Item$ to a columnbox named ColumnBox$, you have to specify the column and the row where the item should be located in the columnbox table. An existing item will be overwritten. If Row is larger than the number of rows in the columnbox, a new row is created. Furthermore, you have to specify the height of the row in pixels, a normal value should be Height=14 or Height=16 for text items.

To have images or icons as items, you have to specify that with special identifiers in Item$:

If Item$=\"__Icon__=\" + FileName$ then the image file FileName$ will be shown,
if Item$=\"__Path__=\" + FileName$ then the large Trackericon of the file FileName$ will be shown
if Item$=\"__Mime__=\" + Signature$ then the small icon of the mimetype Signature$ will be shown.

Note: These identifiers are case sensitive!"

//==============================

DATA "COLUMNBOX CLEAR", "GUI","COLUMNBOX CLEAR ColumnBox$","Deletes everything in a columnbox

Synopsis:

COLUMNBOX CLEAR ColumnBox$

Description:

Use columnbox clear to remove all rows and items in the columnbox named ColumnBox$."

//==============================

DATA "COLUMNBOX COLOR", "GUI","COLUMNBOX COLOR ColumnBox$, Option$, r,g,b","Change the colors of a columnbox

Synopsis:

COLUMNBOX COLOR ColumnBox$, Option$, r,g,b

Description:

The colors in a columnbox can be changed easily. This distinguishes the columnbox from other list widgets like listbox, dropbox or treebox. Given an option string Option$ the colors can be set to the RGB value (r,g,b). Read the part on the draw set command to learn more about RGB color space in yab.

The following values for Option$ are valid:

\"selection-text\" -- set the color of the text in the selected row
\"non-focus-selection\" -- set the color of the selection when the columnbox is not focussed
\"selection\" -- set the color for the selected row
\"text\" -- set the general text color
\"row-divider\" -- set the color of the line between the rows
\"background\" -- set the background color"

//==============================

DATA "COLUMNBOX COLUMN", "GUI","COLUMNBOX COLUMN ColumnBox$, Name$, ColumnNumber, MaxWidth, MinWidth, Width, Option$","Add a new column to a columnbox

Synopsis:

COLUMNBOX COLUMN ColumnBox$, Name$, ColumnNumber, MaxWidth, MinWidth, Width, Option$

Description:

This command takes quite a number of parameters. Here ColumnBox$ is the columnbox where the column should be added. Name$ is the string that shows up in the title of the column.

ColumnNumber gives the position relative to the other columns. Ideally ColumnNumber starts at 1 for the first column and with every new column it is incremented by 1. The column gets the width Width (thus the next column will start at Position+Width). MaxWidth and MinWidth declare the boundaries for the column when resizing was specified in the construction of the columnbox.

Finally the alignment of all items in the column has to be defined in Option$. Possible values are \"align-left\" for left alignment, \"align-center\" for center alignment and \"align-right\" for right alignment."

//==============================

DATA "COLUMNBOX COUNT", "GUI","Number=COLUMNBOX COUNT ColumnBox$","Returns the number of rows in a columnbox

Synopsis:

NumberOfRows=COLUMNBOX COUNT ColumnBox$

Description:

For a existing columnbox named ColumnBox$, this command simply returns the number of rows it contains and stores it in NumberOfRows."

//==============================

DATA "COLUMNBOX GET", "GUI","Item=COLUMNBOX GET ColumnBox$","Returns the number of the currently selected row in a columnbox

Synopsis:

ItemNumber=COLUMNBOX GET ColumnBox$

Description:

To obtain the row that is currently selected in the columnbox named ColumnBox$, simply use this command. If no row is selected, ItemNumber will be set to 0."

//==============================

DATA "COLUMNBOX GET$", "GUI","Item$=COLUMNBOX GET$ ClmnBx$, Clmn, Rw","Get a specific item in a columnbox

Synopsis:

Item$=COLUMNBOX GET$ ColumnBox$, Column, Row

Description:

In the given columnbox named ColumnBox$, the item text at the position (Column, Row) will be stored in Item$. For icons and images, this will return the identifier and the file path."

//==============================

DATA "COLUMNBOX REMOVE", "GUI","COLUMNBOX REMOVE ClmnBx$, Rw","Delete a line in a columnbox

Synopsis:

COLUMNBOX REMOVE ColumnBox$, Row

Description:

In the given columnbox named ColumnBox$, the specified row is deleted."

//==============================

DATA "COLUMNBOX SELECT", "GUI","COLUMNBOX SELECT ClmnBx$, Rw","Select a row in a columnbox

Synopsis:

COLUMNBOX SELECT ColumnBox$, Row

Description:

In the given columnbox named ColumnBox$, the specified row is selected. If Row is set to 0, any former selection is revoked."

//==============================

DATA "COMPILE", "BSC","COMPILE(code$)","Compile a string with yab-code on the fly

Synopsis

compile(code$)

Description

This is an advanced command (closely related with the execute-command). It allows you to compile a string of yab-code (which is the only argument). Afterwards the compiled code is a normal part of your program. Note, that there is no way to remove the compiled code.

Example
 
compile(\"sub mysub(a):print a:end sub\") 
mysub(2) 
          
This example creates a function named mysub, which simply prints its single argument."

//==============================

DATA "CONTINUE", "BSC","CONTINUE","Start the next iteration of a for-, do-, repeat- or while-loop

Synopsis

continue

Description

You may use continue within any loop to start the next iteration immediately. Depending on the type of the loop, the loop-condition will or will not be checked. Especially: for- and while-loops will evaluate their respective conditions, do- and repeat-loops will not.

Remark: Another way to change the flow of execution within a loop, is the break-command.

Example
 
for a=1 to 100 
  if mod(a,2)=0 continue 
  print a 
next a 
          
This example will print all odd numbers between 1 and 100."

//==============================

DATA "COS()", "BSC","x=COS(angle)","Return the cosine of its single argument

Synopsis
 
x=cos(angle) 

Description

The cos-function expects an angle (in radian) and returns its cosine.

Example
 
print cos(pi) 
          
This example will print -1."

//==============================

DATA "DATA", "BSC","DATA 9, \"world\"","Introduces a list of data-items

Synopsis
 
data 9,\"world\" 
read b,a$ 

Description

The data-keyword introduces a list of comma-seperated list of strings or numbers, which may be retrieved with the read-command.

The data-command itself does nothing; it just stores data. A single data-command may precede an arbitrarily long list of values, in which strings or numbers may be mixed at will. yab internally uses a data-pointer to keep track of the current location within the data-list; this pointer may be reset with the restore-command.

Example
 
do 
  restore 
  for a=1 to 4 
    read num$,num 
    print num$,\"=\",num 
  next a 
loop 
data \"eleven\",11,\"twelve\",12,\"thirteen\",13,\"fourteen\",14 
          
This example just prints a series of lines eleven=11 up to fourteen=14 and so on without end.

The restore-command ensures that the list of data-items is read from the start with every iteration."

//==============================

DATA "DATE$", "BSC","a$=DATE$","Returns a string with various components of the current date

Synopsis
a$=date$

Description

The date$-function (which must be called without parantheses; i.e. date$() would be an error) returns a string containing various components of a date; an example would be 4-05-27-2004-Thu-May. This string consists of various fields seperated by hyphens (\"-\"):

The day within the week as a number in the range 0 (=sunday) to 6 (=saturday) (in the example above: 4, i.e. thursday).

The month as a number in the range 1 (=january) to 12 (=december) (in the example: 5 which stands for may).

The day within the month as a number in the range 1 to 31 (in the example: 27).

The full, 4-digit year (in the example: 2004, which reminds me that I should adjust the clock within my computer R30;).

The abbreviated name of the day within the week (Mon to Sun).

The abbreviated name of the month (Jan to Dec).

Therefore the whole example above (4-05-27-2004-Thu-May) would read: day 4 in the week (counting from 0), May 27 in the year 2004, which is a thursday in May.

Note, that all fields within the string returned by date$ have a fixed with (numbers are padded with zeroes); therefore it is easy to extract the various fields of a date format with mid$.

Example
 
rem   Two ways to print the same ... 
print mid$(date$,3,10) 
dim fields$(6) 
a=split(date$,fields$(),\"-\") 
print fields$(2),\"-\",fields$(3),\"-\",fields$(4) 
          
This example shows two different techniques to extract components from the value returned by date$. The mid$-function is the preferred way, but you could just as well split the return-value of date$ at every \"-\" and store the result within an array of strings."

//==============================

DATA "DEC()", "BSC","a=DEC(number$,base)","convert a base 2 or base 16 number into decimal form

Synopsis
 
a=dec(number$) 
a=dec(number$,base) 

Description

The dec-function takes the string-representation of a base-2 or base-16 (which is the default) number and converts it into a decimal number. The optional second argument (base) might be used to specify a base other than 16. However, currently only base 2 or base 16 are supported.

Example
 
input \"Please enter a binary number: \" a$ 
print a$,\" is \",dec(a$)"

//==============================

DATA "DEFAULT", "BSC","DEFAULT","Mark the default-branch within a switch-statement

Synopsis
 
switch a+3 
case 1 
case 2 
default 
end switch 

Description

The default-clause is an optional part of the switch-statement (see there for more information). It introduces a series of statements, that should be executed, if none of the casese matches, that have been specified before (each with its own case-clause).

So default specifies a default to be executed, if none of the explicitly named cases matches; hence its name.

Example
 
print \"Please enter a number between 0 and 6,\" 
print \"specifying a day in the week.\" 
input d 
switch d 
case 0:print \"Monday\":break 
case 1:print \"Tuesday\":break 
case 2:print \"Wednesday\":break 
case 3:print \"Thursday\":break 
case 4:print \"Friday\":break 
case 5:print \"Saturday\":break 
case 6:print \"Sunday\":break 
default:print \"Hey you entered something invalid !\" 
end switch 
          
This program translates a number between 0 and 6 into the name of a weekday; the default-case is used to detect (and complain about) invalid input."

//==============================

DATA "DIM", "BSC","DIM array(x,y)","Create an array prior to its first use

Synopsis
 
dim array(x,y) 
dim array$(x,y) 

Description

The dim-command prepares one or more arrays (of either strings or numbers) for later use. This command can also be used to enlarges an existing array.

When an array is created with the dim-statement, memory is allocated and all elements are initialized with either 0 (for numerical arrays) or \"\" (for string arrays).

If the array already existed, and the dim-statement specifies a larger size than the current size, the array is enlarged and any old content is preserved.

Note, that dim cannot be used to shrink an array: If you specify a size, that is smaller than the current size, the dim-command does nothing.

Finally: To create an array, that is only known within a single subroutine, you should use the command local, which creates local variables as well as local arrays.

Example
 
dim a(5,5) 
for x=1 to 5:for y=1 to 5 
  a(x,y)=int(ran(100)) 
next y:next x 
printmatrix(a()) 
dim a(7,7) 
printmatrix(a()) 
sub printmatrix(ar()) 
  local x,y,p,q 
  x=arraysize(ar(),1) 
  y=arraysize(ar(),2) 
  for q=1 to y 
    for p=1 to y 
      print ar(p,q),\"\t\" 
    next p 
    print 
  next q 
end sub 
          
This example creates a 2-dimenional array (i.e. a matrix) with the dim-statement and fills it with random numbers. The second dim-statement enlarges the array, all new elements are filled with 0.

The subroutine printmatrix just does what its name says."

//==============================

DATA "DO", "BSC","DO","Start a (conditionless) do-loop

Synopsis
 
do 
... 
loop

Description

Starts a loop, which is terminated by loop; everything between do and loop will be repeated forever. This loop has no condition, so it is an infinite loop; note however, that a break-statement might be used to leave this loop anytime.

Example
 
do 
  a=a+1 
  print a 
  if (a>100) break 
loop 
          
This example prints the numbers between 1 and 101. The break-statement is used to leave the loop."

//==============================

DATA "DOC/DOCU", "BSC","DOC comment","Special comment, which might be retrieved by the program itself

Synopsis
 
doc This is a comment 
docu This is another comment 

Description

Introduces a comment, which spans up to the end of the line. But other than the rem-comment, any docu-comment is collected within the special docu$-array and might be retrieved later on. Moreover you might invoke yab -docu foo.yab on the commandline to retrieve the embedded documentation within the program foo.yab.

Instead of doc you may just as well write docu or even documentation.

Example
 
doc   This program asks for a number and 
doc   prints this number multiplied with 2 
rem   Print out the above message 
for a=1 to arraysize(docu$()):print docu$(a):next a 
rem   Read and print the number 
input \"Please input a number: \" x 
print x*2 
          
This program uses the comments within its code to print out a help message for the user.

The contents of the doc-lines are retrieved from the docu$-array; if you do not want a comment to be collected within this array, use the rem-statement instead."

//==============================

DATA "DOCU$", "BSC","a$=DOCU$(x)","Special array, containing the contents of all docu-statement within the program

Synopsis
a$=docu$(1)

Description

Before your program is executed, yab collects the content of all the doc-statements within your program within this 1-dimensional array (well only those within the main-program, libraries are skipped).

You may use the arraysize function to find out, how many lines it contains.

Example
 
docu  This program reads two numbers 
docu  and adds them. 
rem retrieve and print the embedded documentation 
for a=1 to arraysize(docu$(),1) 
  print docu$(a) 
next a 
input \"First number: \" b 
input \"Second number: \" c 
print \"The sum of \",b,\" and \",c,\" is \",b+c 
          
This program uses the embedded documentation to issue a usage-message."

//==============================

DATA "DRAW BITMAP", "GUI","DRAW BITMAP x,y, Bitmap$, Mode$, View$","Draw a bitmap on a view, another bitmap or a canvas.
  
Synopsis

DRAW BITMAP x,y, Bitmap$, Mode$, View$
  
Discussion

Possible Mode$:

\"Copy\" -- copy the bitmap to the target ignoring transparency
\"Alpha\" -- copy the bitmap to the target supporting transparency"

//==============================

DATA "DRAW BITMAP {SCALE}", "GUI","DRAW BITMAP x1,y1 TO x2,y2, Bitmap$, Mode$, View$","Draws and scales the bitmap Bitmap$.

Synopsis

DRAW BITMAP x1,y1 TO x2,y2, Bitmap$, Mode$, View$

Description

If x2 is set to -1, the width is scaled according to the height;
if y2 is set to -1, the height is scaled according to the width;
if x2 and y2 are set to -1, the image is not scaled at all (this is like DRAW BITMAP x,y, Bitmap$, Mode$, View$).

Possible Mode$:

\"Copy\" -- copy the bitmap to the target ignoring transparency
\"Alpha\" -- copy the bitmap to the target supporting transparency"

//==============================

DATA "DRAW CIRCLE", "GUI","DRAW CIRCLE x,y, Radius, Target$","Draw a circle

Synopsis:

DRAW CIRCLE x,y, Radius, Target$

Description:

This command will draw a circle on Target$. Target$ has to be either a valid view, bitmap or canvas. The center of the circle is (x,y) and the circle has a radius of Radius.

At default it will draw a filled circle in the current highcolor. With the draw set command you can change the filling settings."

//==============================

DATA "DRAW CURVE", "GUI","DRAW CURVE x1,y1, x2,y2, x3,y3, x4,y4, Target$","Draw a Bezier curve with four reference points

Synopsis:

DRAW CURVE x1,y1, x2,y2, x3,y3, x4,y4, Target$

Description:

Bezier curves are defined by a number of points. They will always start in the first point and end in the last one. The curve will always be within the four sides if you connect the points directly. For our command, the curve is defined by four points (x1,y1) ... (x4,y4) and it is drawn on Target$. Target$ has to be either a valid view, bitmap or canvas.

At default it will draw a filled curve in the current highcolor. With the draw set command you can change the filling settings. Note: A filled curve might have refresh problems due to a bug in the app-server."

//==============================

DATA "DRAW DOT", "GUI","DRAW DOT x,y, View$","Draw a single dot

Synopsis:

DRAW DOT x,y, View$

Description:

Draw a single dot at (x,y) on Target$. Target$ has to be either a valid view, bitmap or canvas.

At default the dot is drawn in the current highcolor."

//==============================

DATA "DRAW FLUSH", "GUI","DRAW FLUSH View$","clear all prior draw commands

Synopsis:

DRAW FLUSH View$

Description:

Draw flush clears the view named View$ from all drawings.

In yab, all draw commands are stored in a list for every view. If the window is updated, e.g. when resized, all prior drawing is repeated. If you do a lot of drawing in a view, you might notice the redrawing due to flickering. if you want to clear your view, it is much better to clear it with draw flush than e.g. drawing a big rectangle over the other drawings. For flickerfree drawing consider to draw on a canvas instead of a view.

Note: This does not work for canvas and bitmaps.

Note: Widgets are not affected by draw flush."

//==============================

DATA "DRAW GET", "GUI","Height=DRAW GET FontProperty$, Target$","Retrieve font properties

Synopsis:

Width=DRAW GET FontProperty$, Text$, Target$
Height=DRAW GET FontProperty$, Target$

Description:

The draw get command provides you with some information about the width or height of a string with the current font settings that are used for the draw text command.

If FontProperty$ is set to \"Text-Width\", you have to provide a string Text$ too. The resulting Width is the width of Text$ in the current font setting. The width of a string e.g. helps you to align text. Note: Text$ will not be localized automatically, you have to translate it yourself with translate$(Text$). Target$ has to be either a valid view, bitmap or canvas.

If FontProperty$ is set to \"Max-Text-Height\" you get the maximum height of the font as return value. The normal font size is the size starting at the baseline. The maximum height gives you the size plus how far the characters can descend below the baseline."

//==============================

DATA "DRAW GET$", "GUI","FontFamilies$=DRAW GET$ \"FontFamily\"","Retrieve information about the installed fonts

Synopsis:

FontFamilies$=DRAW GET$ \"FontFamily\"
FontStyles$=DRAW GET$ FontFamily$

Description:

The draw get$ command reads out the information about all installed fonts and their styles.

Use the parameter \"FontFamily\" first to get all font families. For a given font family, get the possible styles with the family name as parameter.

Use draw set or textedit set to set the font for a draw text or textedit."

//==============================

DATA "DRAW IMAGE", "GUI","LoadError=DRAW IMAGE x,y, ImageFile$, Target$","Load and display an image file

Synopsis:

LoadError=DRAW IMAGE x,y, ImageFile$, Target$
LoadError=DRAW IMAGE x1,y1 TO x2,y2, ImageFile$, Target$ 

Description:

The image with the filename ImageFile$ is loaded and put on Target$. Target$ has to be either a valid view, bitmap or canvas. Any image files that are understood by the system can be used. Transparent images are supported, however they might cause problems when printed with the printer command.

If only one coordinate pair is given, the image will be displayed in its full size where (x,y) is the upper left corner. If the second coordinates are given too, the image will be resized from (x1,y1) to (x2,y2). 

If x2 is set to -1, the width is scaled according to the height;
if y2 is set to -1, the height is scaled according to the width;
if x2 and y2 are set to -1, the image is not scaled at all."

//==============================

DATA "DRAW LINE", "GUI","DRAW LINE x1,y1 TO x2,y2, Target$","Draw a line

Synopsis:

DRAW LINE x1,y1 TO x2,y2, Target$

Description:

This command draws a line from (x1,y1) to (x2,y2) on Target$ in the current highcolor. Target$ has to be either a valid view, bitmap or canvas."

//==============================

DATA "DRAW RECT", "GUI","DRAW RECT x1,y1 TO x2,y2, Target$","Draw a rectangle

Synopsis:

DRAW RECT x1,y1 TO x2,y2, Target$

Description:

This command will draw a rectangle from (x1,y1) to (x2,y2) on Target$. Target$ has to be either a valid view, bitmap or canvas.

At default it will draw a filled rectangle in the current highcolor. With the draw set command you can change the filling settings."

//==============================

DATA "DRAW SET {FONT}", "GUI","DRAW SET Font$, Target$","Set various drawing parameters

Synopsis:

DRAW SET Font$, Target$ 

Description:

Draw set allows you to set various parameters for the other draw commands. 

Draw set with a parameter Font$ sets the font for Target$. The Font$ consists of the font family, the font style and the font size separated with commas. E.g. the following is a valid font string:

Font$=\"Zurich, Roman, 25\"

Note: Use the correct spelling of the font families and styles keeping existing spaces; they are case sensitive too.

Three special Font$ are available, namely the system fonts:

If Font$=\"system-plain\", the plain system font is used (default),
if Font$=\"system-fixed\", the fixed-sized system font is used,
if Font$=\"system-bold\", the bold system font is used.

Expanded form:

DRAW SET Font$, View$

Font$=FontFamily$ + \",\" + FontStyle$ + \",\" + Size + \",\" + FontOption$ + \",\" Rotation + \",\" + Shear

where FontOption$ can contain the following options (only used when supported by the font):

FontOption$=\"bold\" or \"italic\" or \"outlined\" or \"underscore\" or \"strikeout\" or \"regular\" (regular is default)

where Rotation is between 0.0 (default) and 360.0

where Shear is between 45.0 (slanted to right) and 135.0 (slanted to left) with 90.0 default

See the command draw get$ for more information about font families and styles."

//==============================

DATA "DRAW SET {RGBCOLOR}", "GUI","DRAW SET Color$, r,g,b, Target$","Set various drawing parameters

Synopsis:

DRAW SET Color$, r,g,b, Target$

Description:

Draw set allows you to set various parameters for the other draw commands. 

Draw set with a Color$ allows you to set three different colors: the background color of Target$, the so-called lowcolor and the highcolor. At default, everything is drawn with the current highcolor, the lowcolor is useful for patterns which can have two colors. The background color can only be set for views, otherwise Target$ has to be either a valid view, bitmap or canvas.

If Color$=\"BGColor\", the background color of the view Target$ is set, default is grey (216,216,216),
if Color$=\"LowColor\", the lowcolor of Target$ is set, default is grey (216,216,216),
if Color$=\"HighColor\", the highcolor of Target$ is set, default is black (0,0,0).

A short note about colors: Colors are notated with their three component colors red (r), green (g) and blue (b). These component colors are values between 0 (dark) and 255 (light) and mixed together (additive mixture) they represent a 32bit color space. Have a look at the colorcontrol widget to learn more about colors."

//==============================

DATA "DRAW SET {SYSCOLORS}", "GUI","DRAW SET Color$, Option$, View$","Change widget colors

Synopsis:

DRAW SET Color$, Option$, View$

Option$ is one of the following:
  \"Panel-Background-Color\"
  \"Panel-Text-Color\"
  \"Panel-Link-Color\"
  \"Menu-Background-Color\"
  \"Menu-Selection-Background-Color\"
  \"Menu-Item-Text-Color\"
  \"Menu-Selected-Item-Text-Color\"
  \"Keyboard-Navigation-Color\"
  \"Jan-Favorite-Color\"

To those options the following can be added:

  \"Lighten-1-Tint\"
  \"Lighten-2-Tint\"
  \"Lighten-Max-Tint\"
  \"Darken-1-Tint\"
  \"Darken-2-Tint\"
  \"Darken-3-Tint\"
  \"Darken-4-Tint\"
  \"Darken-Max-Tint\"
  \"Disabled-Label-Tint\"
  \"Disabled-Mark-Tint\"
  \"Highlight-Background-Tint\""

//==============================

DATA "DRAW TEXT", "GUI","DRAW TEXT x,y, Text$, Target$","Draw a text string in the current font

Synopsis:

DRAW TEXT x,y, Text$, Target$

Description:

Draw the string Text$ in the current font and highcolor on Target$. Target$ has to be either a valid view, bitmap or canvas. The left baseline (!) starts at (x,y). Please refer to the example of the command draw get to learn more about the font height and its baseline.

Note: The text will be anti-aliased (smoothed) with the current lowcolor. If your text looks strange and blocky, you probably should set the lowcolor to the background color."

//==============================

DATA "DROPBOX", "GUI","DROPBOX x1,y1 TO x2,y2, ID$, Label$, View$","Create a Dropbox

Synopsis:

DROPBOX x1,y1 TO x2,y2, ID$, Label$, View$

Description

Adds an empty dropbox (BMenuField) at (x1,y1) to (x2,y2) known as ID$ and with a label on View$."

//==============================

DATA "DROPBOX ADD", "GUI","DROPBOX ADD DropBox$, Item$","Add an item to a dropbox

Synopsis:

DROPBOX ADD DropBox$, Item$

Description

Add Item$ to the dropbox. Use Item$=\"--\" for a separator."

//==============================

DATA "DROPBOX CLEAR", "GUI","DROPBOX CLEAR DropBox$","Clear a dropbox

Synopsis

DROPBOX CLEAR DropBox$

Description

Clear the drop box from all items."

//==============================

DATA "DROPBOX COUNT", "GUI","n=DROPBOX COUNT DropBox$","Count the items in a dropbox

Synopsis:

n=DROPBOX COUNT DropBox$

Description:

Count the number of items"

//==============================

DATA "DROPBOX GET$", "GUI","Item$=DROPBOX GET$ DropBox$, Position","Get a specific item from a dropbox

Synopsis

Item$=DROPBOX GET$ DropBox$, Position

Description

Get the item at Position."

//==============================

DATA "DROPBOX REMOVE", "GUI","DROPBOX REMOVE DropBox$, Position","Remove an item from a dropbox

Synopsis

DROPBOX REMOVE DropBox$, Position

Description

Removes item number Position. 

Note: If the removed item was marked, the item before it will be marked instead. You will NOT get a message that the marked item has changed. If the first item will be deleted, the next item in the drop box will be marked.

Note: Each time an item was removed, the drop box count will change too!"

//==============================

DATA "DROPBOX SELECT", "GUI","DROPBOX SELECT DropBox$, Position","Select an item in a dropbox

Synopsis

DROPBOX SELECT DropBox$, Position

Description

Select the item at position Position. Counting starts at 1."

//==============================

DATA "ELSE", "BSC","ELSE","Mark an alternative within an if-statement

Synopsis
 
if ... then 
  ... 
else 
  ... 
endif 

Description

The else-statement introduces the alternate branch of an if-statement. I.e. it starts the sequence of statements, which is executed, if the condition of the if-statement is not true.

Example
 
input \"Please enter a number: \" a 
if (mod(a,2)=1) then 
  print a,\" is odd.\" 
else 
  print a,\" is even.\" 
endif 
          
This program detects if the number you have entered is even or odd."

//==============================

DATA "ELSIF/ELSEIF", "BSC","ELSIF","Starts an alternate condition within an if-statement

Synopsis
 
if (...) then 
  ... 
elseif (...) 
  ... 
elsif (...) then 
  ... 
else 
  ... 
endif 

Description

The elsif-statement is used to select a single alternative among a series of choices.

With each elsif-statement you may specify a condition, which is tested, if the main condition (specified with the if-statement) has failed. Note that elsif might be just as well written as elseif.

Within the example below, two variables a and b are tested against a range of values. The variable a is tested with the elsif-statement. The very same tests are performed for the variable b too; but here an involved series of if-else-statements is employed, making the tests much more obscure.

Example
 
input \"Please enter a number: \" a 
if (a<0) then 
  print \"less than 0\" 
elseif (a<=10) then 
  print \"between 0 and 10\" 
elsif (a<=20) 
  print \"between 11 and 20\" 
else 
  print \"over 20\" 
endif 

input \"Please enter another number: \" b 
if (b<0) then 
  print \"less than 0\" 
else 
  if (b<=10) then 
    print \"between 0 and 10\" 
  else 
    if (b<=20) then 
      print \"between 11 and 20\" 
    else 
      print \"over 20\" 
    endif 
  endif 
endif 
          
Note, that the very same tests are performed for the variables a and b, but can be stated much more clearly with the elsif-statement.

Note, that elsif might be written as elseif too, and that the keyword then is optional."

//==============================

DATA "END", "BSC","END","Terminate your program

Synopsis
 
END 

Description

Terminate your program. Much (but not exactly) like the exit command.

Note, that end may not end your program immediately; if you have opened a window or called clear screen, yab assumes, that your user wants to study the output of your program after it has ended; theerfore it issues the line 
---Program done, press RETURN--- 
and waits for a key to be pressed. If you do not like this behaviour, consider using exit.

Example
 
print \"Do you want to continue ?\" 
input \"Please answer y(es) or n(o): \" a$ 
if (lower$(left$(a$,1))=\"n\") then 
  print \"bye\" 
  end 
fi "

//==============================

DATA "END SUB", "BSC","END SUB","Ends a subroutine definition

Synopsis
 
sub foo(...) 
  ... 
end sub 

Description

Marks the end of a subroutine-definition (which starts with the sub-keyword). The whole concept of subroutines is explained within the entry for sub. 

Example
 
print foo(3) 

sub foo(a) 
  return a*2 
end sub 
          
This program prints out 6. The subroutine foo simply returns twice its argument."

//==============================

DATA "ENDIF/END IF /FI", "BSC","ENDIF","Ends an if-statement

Synopsis
 
if (...) then 
  ... 
endif 

Description

The endif-statement closes (or ends) an if-statement.

Note, that endif may be written in a variety of other ways: end if, end-if or even fi.

The endif-statement must be omitted, if the if-statement does not contain the keyword then (see the example below). Such an if-statement without endif extends only over a single line.

Example
 
input \"A number please: \" a 
if (a<10) then 
  print \"Your number is less than 10.\" 
endif 

REM  and now without endif 

input \"A number please: \" a 
if (a<10) print \"Your number is less than 10.\""

//==============================

DATA "EOF", "BSC","EOF(x)","Check if an open file contains data

Synopsis
 
open 1,\"foo.bar\" 
if (eof(1)) then 
   ... 
end if 

Description

The eof-function checks, if there is still data left within an open file. As an argument it expects the file-number as returned by (or used within) the open-function (or statement).

Example
 
a=open(\"foo.bar\") 
while(not eof(a)) 
  input #a,a$ 
  print a$ 
end while 
          
This example will print the contents of the file \"foo.bar\". The eof-function will terminate the loop, if there is no more data left within the file."

//==============================

DATA "EOR()", "BSC","EOR (a,b)","Compute the bitwise exclusive or of its two arguments

Synopsis
print eor(a,b)

Description

The eor-function takes two arguments and computes their bitwise exclusive or. See your favorite introductory text on informatics for an explanation of this function.

The xor-function is the same as the eor function; both are synonymous; however they have each their own description, so you may check out the entry of xor for a slightly different view.

Example
 
for a=0 to 3 
  for b=0 to 3 
    print fill$(bin$(a)),\" eor \",fill$(bin$(b)),\"=\",fill$(bin$(eor(a,b))) 
  next b 
next a 

sub fill$(a$) 
  return right$(\"0\"+a$,2) 
end sub 
          
This example prints a table, from which you may figure, how the eor-function is computed."

//==============================

DATA "ERROR", "BSC","ERROR String$","Raise an error and terminate your program

Synopsis

error \"Wrong, wrong, wrong !!\"

Description

Produces the same kind or error messages, that yab itself produces (e.g. in case of a syntax-error). The single argument is issued along with the current line-number.

Example
 
input \"Please enter a number between 1 and 10: \" a 
if (a<1 or a>10) error \"Oh no ...\" 
          
This program is very harsh in checking the users input; instead of just asking again, the program terminates with an error, if the user enters something wrong.

The error message would look like this:
 
---Error in t.yab, line 2: Oh no ... 
---Error: Program stopped due to an error"

//==============================

DATA "EULER", "BSC","x=EULER","Another name for the constant 2.71828182864

Synopsis

foo=euler

Description

euler is the well known constant named after Leonard Euler; its value is 2.71828182864. euler is not a function, so parens are not allowed (i.e. euler() will produce an error). Finally, you may not assign to euler; it wouldn\'t make sense anyway, because it is a constant.

Example
 
print euler"

//==============================

DATA "EXECUTE$()", "BSC","print EXECUTE$(\"foo$\",\"arg1\",\"arg2\")","Execute a user defined subroutine, which must return a string

Synopsis

print execute$(\"foo$\",\"arg1\",\"arg2\")

Description

execute$ can be used to execute a user defined subroutine, whose name may be specified as a string expression.

This feature is the only way to execute a subroutine, whose name is not known by the time you write your program. This might happen, if you want to execute a subroutine, which is compiled (using the compile command) during the course of execution of your program.

Note however, that the execute$-function is not the preferred method to execute a user defined subroutine; almost all cases you should just execute a subroutine by writing down its name within your yab program (see the example).

Example
 
print execute$(\"foo$\",\"Hello\",\"world !\") 
sub foo$(a$,b$) 
  return a$+\" \"+b$ 
end sub 
          
The example simply prints Hello world !, which is the return value of the user defined subroutine foo$. The same could be achieved by executing:
 
print foo$(a$,b$)"

//==============================

DATA "EXECUTE()", "BSC","print EXECUTE(\"bar\",\"arg1\",\"arg2\")","Execute a user defined subroutine, which must return a number

Synopsis

print execute(\"bar\",\"arg1\",\"arg2\")

Description

The execute-function is the counterpart of the execute$-function (please see there for some caveats). execute executes subroutines, which returns a number.

Example
 
print execute(\"bar\",2,3) 

sub bar(a,b) 
  return a+b 
end sub"

//==============================

DATA "EXIT", "BSC","EXIT x","Terminate your program

Synopsis
 
exit 
exit 1 

Description

Terminate your program and return any given value to the operating system. exit is similar to end, but it will terminate your 
program immediately, no matter what.

Example
 
print \"Do you want to continue ?\" 
input \"Please answer y(es) or n(o): \" a$ 
if (lower$(left$(a$,1))=\"n\") exit 1"

//==============================

DATA "EXP()", "BSC","foo=EXP(bar)","Compute the exponential function of its single argument

Synopsis
 
foo=exp(bar) 

Description

This function computes e to the power of its argument, where e is the well known euler constant 2.71828182864.

The exp-function is the inverse of the log-function."

//==============================

DATA "EXPORT", "BSC","EXPORT sub foo(bar)","Mark a function as globally visible

Synopsis
 
export sub foo(bar) 
... 
end sub 

Description

The export-statement is used within libraries to mark a user defined subroutine as visible outside the library wherein it is defined. Subroutines, which are not exported, must be qualified with the name of the library, e.g. foo.baz (where foo is the name of the library and baz the name of the subroutine); exported subroutines may be used without specifying the name of the library, e.g. bar.

Therefore export may only be useful within libraries.

Example

The library foo.bar (which is listed below) defines two functions bar and baz, however only the function bar is exported and therefore visible even outside the library; baz is not exported and may only be used within the library foo.yab:
 
export sub bar() 
  print \"Hello\" 
end sub 

sub baz() 
  print \"World\" 
end sub 
          
Now within your main program cux.yab (which imports the library foo.yab); note that this program produces an error:
 
import foo 

print \"Calling subroutine foo.bar (okay) ...\" 
foo.bar() 
print \"done.\" 

print \"Calling subroutine bar (okay) ...\" 
bar() 
print \"done.\" 

print \"Calling subroutine foo.baz (okay) ...\" 
foo.baz() 
print \"done.\" 

print \"Calling subroutine baz (NOT okay) ...\" 
baz() 
print \"done.\" 

The output when executing yab foo.yab is this:
 
Calling subroutine foo.bar (okay) ... 
Hello 
done. 
Calling subroutine bar (okay) ... 
Hello 
done. 
Calling subroutine foo.baz (okay) ... 
World 
done. 
Calling subroutine baz (NOT okay) ... 
---Error in main.yab, line 16: can\'t find subroutine \'baz\' 
---Dump: sub baz() called in main.yab,16 
---Error: Program stopped due to an error 
As the error message above shows, the subroutine baz must be qualified with the name of the library, if used outside the library, wherein it is defined (e.g. foo.baz. I.e. outside the library foo.yab you need to write foo.baz. baz alone would be an error.

The subroutine bar (without adding the name of the library) however may (and probably should) be used in any program, which imports the library foo.yab."

//==============================

DATA "FALSE", "BSC","x=FALSE","A constant with the value of 0

Synopsis
 
okay=false 

Description

The constant false can be assigned to variables which later appear in conditions (e.g. within an if-statement.

false may also be written as FALSE or even FaLsE.

Example
 
input \"Please enter a number between 1 and 10: \" a 
if (check_input(a)) print \"Okay\" 

sub check_input(x) 
  if (x>10 or x<1) return false 
  return true 
end sub 
          
The subroutine check_input checks its argument and returns true or false according to the outcome of the check.."

//==============================

DATA "FILEPANEL", "GUI","File$=FILEPANEL Mode$, Title$, Directory$","Show a filepanel

Synopsis

File$=FILEPANEL Mode$, Title$, Directory$

Mode$=\"Load-File\"
Mode$=\"Load-Directory\"
Mode$=\"Load-File-and-Directory\"
Mode$=\"Save-File\"

Opens a filepanel in Directory$. According to the Mode$, you can either select a file, a directory or both for loading or select/enter a file for saving. The selected file is File$.

File$=FILEPANEL Mode$, Title$, Directory$, Filename$

Same as above, except that you can provide preset Filename$ for the mode \"Save-File\""

//==============================

DATA "FOR", "BSC","FOR a=x to y step z","Starts a for-loop

Synopsis 

for a=1 to 100 step 2 
  ... 
next a 

Description

The for-loop lets its numerical variable (a in the synopsis) assume all values within the given range. The optional step-clause may specify a value (default: 1) by which the variable will be incremented (or decremented, if step is negative).

Any for-statement can be replaced by a set of ifs and gotos; as you may infer from the example below this is normally not feasable. However if you want to know in detail how the for-statement works, you should study this example, which presents a for-statement and an exactly equivilant series of ifs and gotos.

Example
 
for a=1 to 10 step 2:print a:next 

a=1 
label check 
if (a>10) goto done 
  print a 
  a=a+2 
goto check 
label done 
          
This example simply prints the numbers 1, 3, 5, 7 and 9. It does this twice: First with a simple for-statment and then with ifs and gotos.

Note: Unlike some other BASIC dialects, yab will not automatically decrease the FOR numerical variable. This will not work:

FOR f=10 to 1

But you can make this work using a negative STEP value:

FOR f=10 to 1 step -1"

//==============================

DATA "FRAC()", "BSC","x=FRAC(y)","Return the fractional part of its numeric argument

Synopsis
 
x=frac(y) 

Description

The frac-function takes its argument, removes all the digits to the left of the comma and just returns the digits right of the comma, i.e. the fractional part.

Refer to the example to learn how to rewrite frac by employing the int-function.

Example
 
for a=1 to 10 
  print frac(sqr(a)) 
  print sqr(a)-int(sqr(a)) 
next a 
          
The example prints the fractional part of the square root of the numbers between 1 and 10. Each result is computed (and printed) twice: Once by employing the frac-function and once by employing the int-function."

//==============================

DATA "GETSCREEN$()", "TXT","a$=GETSCREEN$(2,2,20,20)","Returns a string representing a rectangular section of the text terminal

Synopsis
 
a$=getscreen$(2,2,20,20) 

Description

The getscreen$ function returns a string representing the area of the screen as specified by its four arguments (which specify two corners). I.e. everything you have printed within this rectangle will be encoded in the string returned (including any colour-information).

Like most other commands dealing with advanced text output, getscreen$ requires, that you have called clear screen before.

Example
 
clear screen 

for a=1 to 1000: 
        print color(\"red\") \"1\" 
        print color(\"green\") \"2\" 
        print color(\"blue\") \"3\" 
next a  
screen$=getscreen$(10,10,40,10) 
print at(10,10) \" Please Press \'y\' or \'n\' ! \"
a$=inkey$ 
putscreen screen$,10,10 
          
This program fills the screen with coloured digits and afterwards asks the user for a choice ( Please press \'y\' or \'n\' ! ). 

Afterwards the area of the screen, which has been overwritten by the question will be restored with its previous contents, which had been saved via getscreen$."

//==============================

DATA "GLOB()", "BSC","if (GLOB(string$,pattern$)) ...","Check if a string matches a simple pattern

Synopsis
 
if (glob(string$,pattern$)) ... 

Description

The glob-function takes two arguments, a string and a (glob-) pattern, and checks if the string matches the pattern. However glob does not employ the powerful rules of regular expressions; rather it has only two special characters: * (which matches any number (even zero) of characters) and ? (which matches exactly a single character).

Example
 
for a=1 to 10 
  read string$,pattern$ 
  if (glob(string$,pattern$)) then 
    print string$,\" matches \",pattern$ 
  else 
    print string$,\" does not match \",pattern$ 
  endif 
next a 
data \"abc\",\"a*\" 
data \"abc\",\"a?\" 
data \"abc\",\"a??\" 
data \"abc\",\"*b*\" 
data \"abc\",\"*\" 
data \"abc\",\"???\" 
data \"abc\",\"?\" 
data \"abc\",\"*c\" 
data \"abc\",\"A*\" 
data \"abc\",\"????\" 
          
This program checks the string abc against various patterns and prints the result. The output is:
 
abc matches a* 
abc does not match a? 
abc matches a?? 
abc matches *b* 
abc matches * 
abc matches ??? 
abc does not match ? 
abc matches *c 
abc does not match A* 
abc does not match ????"

//==============================

DATA "HEX$()", "BSC","print HEX$(foo)","Convert a number into hexadecimal

Synopsis
 
print hex$(foo) 

Description

The hex$-function converts a number into a string with its hexadecimal representation. hex$ is the inverse of the dec-function.

Example
 
open 1,\"foo\" 
while(!eof(1)) 
  print right$(\"0\"+hex$(peek(1)),2),\" \"
  i=i+1 
  if (mod(i,10)=0) print 
end while 
print 
          
This program reads the file foo and prints its output as a hex-dump using the hex-function."

//==============================

DATA "IF", "BSC","IF (...) then","Evaluate a condition and execute statements or not, depending on the result

Synopsis
 
if (...) then 
  ... 
endif 

if (...) ... 

if (...) then 
  ... 
else 
  ... 
endif 

if (...) then 
  ... 
elsif (...) 
  ... 
elsif (...) then 
  ... 
else 
  ... 
endif 

Description

The if-statement is used to evaluate a conditions and take actions accordingly. (As an aside, please note that there is no real difference between conditions and expressions.)

There are two major forms of the if-statement:

The one-line-form without the keyword then: 

if (...) ...

This form evaluates the condition and if the result is true executes all commands (seperated by colons) upt to the end of the line. There is neither an endif keyword nor an else-branch.

The multi-line-form with the keyword then: 

if (...) then ... elsif (...) ... else ... endif

(where elsif and else are optional, whereas endif is not.

According to the requirements of your program, you may specify:

elsif(...), which specifies a condition, that will be evaluated only if the condition(s) whithin if or any preceeding elsif did not match.

else, which introduces a sequence of commands, that will be executed, if none of the conditions above did match. 

endif is required and ends the if-statement."

//==============================

DATA "IMPORT", "BSC","IMPORT foo","Import a library

Synopsis
 
import foo 

Description

The import-statment imports a library. It expects a single argument, which must be the name of a library (without the trailing .yab). This library will then be read and parsed and its subroutines (and variables) will be made available within the main program.

Libraries will first be searched within the current directory (i.e. the directory within which you have invoked yab), then within /boot/home/config/lib/yab. The location of this second directory may be changed with the option -library.

Example

Lets say you have a yab-program foo.yab, which imports a library lib.yab. foo.yab reads:
 
import lib 
rem  This works ... 
lib.x(0) 
rem  This works too .. 
x(1) 
rem  And this. 
lib.y(2) 
rem  But this not ! 
y(3) 
          
Now the library lib.yab reads:
 
rem  Make the subroutine x easily available outside this library 
export sub x(a) 
  print a 
  return 
end sub 
rem  sub y must be referenced by its full name 
rem  outside this library 
sub y(a) 
  print a 
  return 
end sub 
This program produces an error:
 
0 
1 
2 
---Error in foo.yab, line 13: can\'t find subroutine \'y\' 
---Dump: sub y() called in foo.yab,13 
---Error: Program stopped due to an error 

As you may see from the error message, yab is unable to find the subroutine y without specifying the name of the library (i.e. lib.y). The reason for this is, that y, other than x, is not exported from the library lib.yab (using the export-statement)."

//==============================

DATA "INKEY$", "BSC","foo$=INKEY$","Wait, until a key is pressed

Synopsis
 
clear screen 
foo$=inkey$ 
inkey$ 
foo$=inkey$(bar) 
inkey$(bar) 

Description

The inkeys$-function waits, until the user presses a key on the keyboard or a button of his mouse, and returns this very key. 

An optional argument specifies the number of seconds to wait; if omitted, inkey$ will wait indefinitely.inkey$ may only be used, if clear screen has been called at least once.

For normal keys, yab simply returns the key, e.g. a, 1 or !. For function keys you will get f1, f2 and so on. Other special keys will return these strings respectively: enter, backspace, del, esc, scrnup (for screen up), scrndown and tab. Modifier keys (e.g. ctrl, alt or shift) by themself can not be detected (however, if you press shift and e.g. a simultaniously, inkey$ will return the letter A instead of a of course).

The string returned (e.g. MB1d+0:0028,0061, MB2u+0:0028,0061 or MB1d+1:0028,0061) is constructed as follows: 

Every string associated with a mouseclick will start with the fixed string MB

The next digit (1, 2 or 3) specifies the mousebutton pressed.

A single letter, d or u, specifies, if the mousebutton has been pressed or released: d stands for down, i.e. the mousebutton has been pressed; u means up, i.e. the mousebutton has been released.

The plus-sign (\'+\'), which follows is always fixed.

The next digit (in the range 0 to 7) encodes the modifier keys pressed, where 1 stands for shift, 2 stands for alt and 4 stands for ctrl.

The next four digits (e.g. 0028) contain the x-position, where the mousebutton has been pressed.

The comma to follow is always fixed.

The last four digits (e.g. 0061) contain the y-position, where the mousebutton has been pressed.

All those fields are of fixed length, so you may use functions like mid$ to extract certain fields. However, note that with mousex, mousey, mouseb and mousemod there are specialized functions to return detailed information about the mouseclick.

inkey$ accepts an optional argument, specifying a timeout in seconds; if no key has been pressed within this span of time, an empty string is returned. If the timeout-argument is omitted, inkey$ will wait for ever."

//==============================

DATA "INPUT", "BSC","INPUT a","Read input from the user (or from a file) and assign it to a variable

Synopsis
 
input a 
input a,b,c 
input a$ 
input \"Hello\" a 
input #1 a$ 

Description

input reads the new contents of one or many (numeric- or string-) variables, either from the keyboard (i.e. from you) or from a file. An optional first string-argument specifies a prompt, which will be issued before reading any contents.

If you want to read from an open file, you need to specify a hash (\'#\'), followed by the number, under which the file has been opened.

Note, that the input is split at spaces, i.e. if you enter a whole line consisting of many space-seperated word, the first input-statement will only return the first word; the other words will only be returned on subsequent calls to input; the same applies, if a single input reads multiple variables: The first variable gets only the first word, the second one the second word, and so on. If you don\'t like this behaviour, you may use line input, which returns a whole line (including embedded spaces) at once.

Example
 
input \"Please enter the name of a file to read: \" a$ 
open 1,a$ 
while(!eof(1)) 
  input #1 b$ 
  print b$ 
wend 
          
If this program is stored within a file test.yab and you enter this name when prompted for a file to read, you will see this output:
Please enter the name of a file to read: test.yab 
input 
\"Please 
enter 
the 
name 
of 
a 
file 
to 
read: 
\"
a$ 
open 
1,a$ 
while(!eof(1)) 
input 
#1 
b$ 
print 
b$ 
wend"

//==============================

DATA "INSTR()", "BSC","if (INSTR(a$,b$))","Searches its second argument within the first; returns its position if found

Synopsis
 
print instr(a$,b$) 
if (instr(a$,b$)) ... 
pos=instr(a$,b$,x) 

Description

The instr-functions requires two string arguments and searches the second argument within the first. If the second argument can be found within the first, the position is returned (counting from one). If it can not be found, the instr-function returns 0; this makes this function usable within the condition of an if-statement (see the example below).

If you supply a third, numeric argument to the instr-function, it will be used as a starting point for the search. Therefore instr(\"abcdeabcdeabcde\",\"e\",8) will return 10, because the search for an \"e\" starts at position 8 and finds the \"e\" at position 10 (and not the one at position 5).

Example
 
input \"Please enter a text containing the string \'bumf\': \" a$ 
if (instr(a$,\"bumf\")) then 
  print \"Well done !\" 
else 
  print \"not so well ...\" 
endif "

//==============================

DATA "INT()", "BSC","print INT(a)","Return the integer part of its single numeric argument

Synopsis
 
print int(a) 

Description

The int-function returns only the digits before the comma; int(2.5) returns 2 and int(-2.3) returns -2.

Example
 
input \"Please enter a whole number between 1 and 10: \" a 
if (a=int(a) and a>=1 and a<=10) then 
  print \"Thanx !\" 
else 
  print \"Never mind ...\" 
endif "

//==============================

DATA "ISMOUSEIN()", "GUI","State=ISMOUSEIN(View$)","Determine if the mouse cursor is in a specific view

Synopsis

State=ISMOUSEIN(View$)

Description

State=0 the mouse cursor is not in the view View$
State=1 the mouse cursor is in the view View$

Ismousein reports true whenever it is called and the mouse pointer is currently over the view named View$. This is independend of whether the window containing the view is active or not."

//==============================

DATA "KEYBOARD MESSAGE$()", "GUI","Msg$=KEYBOARD MESSAGE$(View$)","Check the keyboard for pressed buttons

Synopsis:
Msg$=KEYBOARD MESSAGE$(View$)

Description:

With keyboard message$(), you can receive key strokes. These key strokes are always sent to the view that currently has focus, so you should make sure, that you set the focus for the view named View$. This avoids trouble with textedit or textcontrol widgets that rely on user input too. 

For normal keys, yab simply returns the key, e.g. a, 1 or !. For function keys you will get f1, f2 and so on. Other special keys will return these strings respectively: enter, backspace, del, esc, pageup, pagedown and tab. Modifier keys (e.g. ctrl, alt or shift) by themself can not be detected (however, if you press shift and e.g. a simultaniously, keyboard message$ will return the letter A instead of a of course).

If you are interested in getting the key strokes in a terminal, have a look at the inkey$ command. Note, other than inkey$, keyboard message$() does not wait for a key to be pressed. It will simply return an empty string (\"\") when no key is pressed.

Design:

It is quite hard to use keyboard message$() for a input method that behaves like e.g. a textcontrol because you have to control the key repeat rate yourself. So rather use a textcontrol, spincontrol or a textedit widget for more complex editing.

Example:

window open 100,100 to 300,300, \"Example\", \"Example\"
option set \"Example\", \"Focus\", true
while(not instr(message$, \"Quit\"))
	k$=keyboard message$(\"Example\")
	if(k$<>\"\" and k$<>old_k$) then
		print \"You pressed \"+k$
		old_k$=k$
	endif
wend
window close \"Example\"

Explanation:
This simple example first sets the focus on the view that should get the keyboard messages. Whenever a key is pressed, and it is not similar to the pressed key before, we show a text message."

//==============================

DATA "LABEL", "BSC","LABEL foo","Mark a specific location within your	 program for restore

Synopsis
 
label foo 
Data bar

Description

The label-command can be used to give a name to a specific location within your program. Such a position might be referred by restore.

You may use labels safely within libraries, because a label (e.g. foo) does not collide with a label with the same name within the main program or within another library; yab will not mix them up.

As an aside, please note, that line numbers are a special (however deprecated) case of labels."

//==============================

DATA "LAUNCH", "GUI","LAUNCH FileName$","Launch the program FileName$ or the associated executable

Synopsis

LAUNCH FileName$

Description

Launch the program FileName$ or the associated executable"

//==============================

DATA "LAYOUT", "GUI","LAYOUT Layout$, WIndowOfView$","Set view layout

Synopsis

LAYOUT Layout$, WIndowOfView$

Description

Set the layout for all views on the window of View$. The layout will affect all following new widgets, but not the already created. Draw commands are not affected by the layout, put them on an own view.

Layout$ (not case sensitive):

\"Standard\"=default layout, all widgets follow bottom and right side of the window	except for listboxes and textedit which follow all sides.
\"All\"=follow all sides (widgets resize)
\"None\"=follow the top and the left side (equals \"top, left\")

-OR- Layout$ is a combination of a horizontal and a vertical command (e.g. \"Right, Top\" etc.).

Horizontal:

\"Left\"=follow left side (default, when no other horizontal layout is given)
\"Right\"=follow the right side
\"Left, Right\"=follow the left and the right side (resize)
\"H-Center\"=follow the horizontal center

Vertical:

\"Top\"=follow the top side (default, when no other vertical layout is given)
\"Bottom\"=follow the bottom side
\"Top, Bottom\"=follow the top and bottom side (resize)
\"V-Center\"=follow the vertical center"

//==============================

DATA "LEFT$()", "BSC","print LEFT$(a$,2)","Return (or change) left end of a string

Synopsis
 
print left$(a$,2) 
left$(b$,3)=\"foobar\" 

Description

The left$-function accepts two arguments (a string and a number) and returns the part from the left end of the string, whose length is specified by its second argument. Loosely spoken, it simply returns the requested number of chars from the left end of the given string.

Note, that the left$-function can be assigned to, i.e. it may appear on the left hand side of an assignment. In this way it is possible to change a part of the variable used within the left$-function. Note, that that way the length of the string cannot be changed, i.e. characters might be overwritten, but not added. For an example see below.

Example
 
input \"Please answer yes or no: \" a$ 
l=len(a$):a$=lower$(a$):print \"Your answer is \"
if (left$(\"yes\",l)=a$ and l>=1) then 
  print \"yes\" 
elsif (left$(\"no\",l)=a$ and l>=1) then 
  print \"no\" 
else 
  print \"?\" 
endif 
          
This example asks a simple yes/no question and goes some way to accept even incomplete input, while still beeing able to reject invalid input.

This second example demonstrates the capability to assign to the left$-function.
 
a$=\"Heiho World !\" 
print a$ 
left$(a$,5)=\"Hello\" 
print a$"

//==============================

DATA "LEN()", "BSC","x=LEN(a$)","Return the length of a string

Synopsis
 
x=len(a$) 

Description

The len-function returns the length of its single string argument.

Example
 
input \"Please enter a password: \" a$ 
if (len(a$)<6) error \"Password too short !\" 
          
This example checks the length of the password, that the user has entered."

//==============================

DATA "LINE INPUT", "BSC","line input a ","Read in a whole line of text and assign it to a variable

Synopsis
 
line input a 
line input a$ 
line input \"Hello\" a 
line input #1 a$ 

Description

In most respects line input is like the input-command: It reads the new contents of a variable, either from keyboard or from a file. However, line input always reads a complete line and assigns it to its variable. line input does not stop reading at spaces and is therefore the best way to read in a string which might contain whitespace. Note, that the final newline is stripped off.

Example
 
line input \"Please enter your name (e.g. Frodo Baggins): \" a$ 
print \"Hello \",a$ 
          
Note that the usage of line input is essential in this example; a simple input-statement would only return the string up to the first space, e.g. Frodo."

//==============================

DATA "LISTBOX", "GUI","LISTBOX x1,y1 TO x2,y2, ID$, ScrollbarType, View$","Create a list widget

Synopsis:

LISTBOX x1,y1 TO x2,y2, ID$, ScrollbarType, View$

Description:

The listbox provides a list widget that can be filled with text items. It is set up at the position (x1,y1) to (x2,y2) on the view named View$. It gets an own identifier ID$. Additionally you have to specify whether the listbox should get scrollbars. This is given by ScrollbarType as follows:

ScrollbarType=0 -- no scrollbar
ScrollbarType=1 -- the listbox has a vertical scrollbar
ScrollbarType=2 -- the listbox has a horizontal scrollbar
ScrollbarType=3 -- the listbox has a vertical and a horizontal scrollbar

Message:

The listbox provides two messages. The first kicks in when an item is selected by clicking once on it or by the up and down keys. This then has the format ID$+\":_Select:\"+SelectedItem$ where SelectedItem$ contains the number of the item selected. The second message is send, when a item is invoked, i.e. by double-clicking at a item or pressing the Enter key. It has the format ID$+\":_Invoke:\"+SelectedItem$.

Layout:

The listbox will follow all sides as in standard layout.

Design:

The listbox is an easy method to present a lot of data well-structured in a list. Use it instead of a dropbox when you have enough space or the list of data gets too long. For having icons or images in a list, use the columnbox instead."

//==============================

DATA "LISTBOX ADD", "GUI","LISTBOX ADD ListBox$, Item$","add an item to a listbox

Synopsis:

LISTBOX ADD ListBox$, Item$
LISTBOX ADD ListBox$, Position, Item$

Description:

This command adds a string here named Item$ to the listbox with the ID ListBox$. If Position is given too, the item will be inserted at that position."

//==============================

DATA "LISTBOX CLEAR", "GUI","LISTBOX CLEAR ListBox$","Remove all items of a listbox

Synopsis:

LISTBOX CLEAR ListBox$

Description:

Listbox clear deletes and removes all items in a listbox."

//==============================

DATA "LISTBOX COUNT", "GUI","Items=LISTBOX COUNT ListBox$","Returns the number of items in a listbox 

Synopsis:

NumberOfItems=LISTBOX COUNT ListBox$

Description:

For an existing listbox named ListBox$, this command simply returns the number of items it contains and stores it in NumberOfItems."

//==============================

DATA "LISTBOX GET", "GUI","Number=LISTBOX GET ListBox$","Returns the number of the currently selected item in a listbox

Synopsis:

ItemNumber=LISTBOX GET ListBox$

Description:

To obtain the item that is currently selected in the listbox named ListBox$, simply use this command. If no item is selected, ItemNumber will be set to 0."

//==============================

DATA "LISTBOX GET$", "GUI","Item$=LISTBOX GET$ ListBox$, Position","Get a specific item string in a listbox

Synopsis:

Item$=LISTBOX GET$ ListBox$, Position

Description:

In the given listbox named ListBox$, the item text at the position Position will be stored in Item$."

//==============================

DATA "LISTBOX REMOVE {POSITION}", "GUI","LISTBOX REMOVE ListBox$, Position","Delete a line in a listbox

Synopsis:

LISTBOX REMOVE ListBox$, Position

Description:

In the given listbox named ListBox$, the specified item at the position Position is deleted."

//==============================

DATA "LISTBOX REMOVE {ITEM}", "GUI","LISTBOX REMOVE ListBox$, Item$","Removes an item Item$ from the Listbox ID$.

Synopsis

LISTBOX REMOVE ListBox$, Item$"

//==============================

DATA "LISTBOX SELECT", "GUI","LISTBOX SELECT ListBox$, Position","Select an item in a listbox

Synopsis:

LISTBOX SELECT ListBox$, Position

Description:

In the given listbox named ListBox$, the specified item at the position Position is selected. If Position is set to 0, any former selection is revoked.

Message:

Using the listbox select command will generate a selection message. This then has the format ID$+\":_Select:\"+SelectedItem$ where SelectedItem$ contains the number of the item selected."

//==============================

DATA "LISTBOX SORT", "GUI","LISTBOX SORT ListBox$","Sort all items in a listbox

Synopsis:

LISTBOX SORT ListBox$

Description:

This command sorts the given listbox named ListBox$ alphabetically. Items starting with a number will be set before items starting with a letter. However, please note that items containing numbers will NOT be sorted as numbers. E.g. The items \"1\", \"2\", \"10\" will be sorted according to the ASCII codes and the length of the strings, thus they are sorted to: \"1\", \"10\", \"2\"

Note: After sorting, any former selection is removed."

//==============================

DATA "LOCAL", "BSC","LOCAL a,b,c$,d(10),e$(5,5)","Mark a variable as local to a subroutine

Synopsis
 
sub foo() 

  local a,b,c$,d(10),e$(5,5) 

  ... 

end sub 

Description

The local-command can (and should be) used to mark a variable (or array) as local to the containing subroutine. This means, that a local variable in your subroutine is totally different from a variable with the same name within your main program. Variables which are known everywhere within your program are called global in contrast.

Declaring variables within the subroutine as local helps to avoid hard to find bugs; therefore local variables should be used whenever possible.

Note, that the parameters of your subroutines are always local.

As you may see from the example, local arrays may be created without using the keyword dim (which is required only for global arrays).

Example
 
a=1 
b=1 
print a,b 
foo() 
print a,b 

sub foo() 
  local a 
  a=2 
  b=2 
end sub 
          
This example demonstrates the difference between local and global variables; it produces this output:

1 1 
1 2 

As you may see, the content of the global variable a is unchanged after the subroutine foo; this is because the assignment a=2 within the subroutine affects the local variable a only and not the global one. However, the variable b is never declared local and therefore the subroutine changes the global variable, which is reflected in the output of the second print-statement."

//==============================

DATA "LOG()", "BSC","a=LOG(x)","Compute the natural logarithm

Synopsis
 
a=log(x) 
a=log(x,base) 

Description

The log-function computes the logarithm of its first argument. The optional second argument gives the base for the logarithm; if this second argument is omitted, the euler-constant 2.71828... will be taken as the base."

//==============================

DATA "LOOP", "BSC","LOOP","Marks the end of an infinite loop

Synopsis
 
do 
  ... 
loop 

Description

The loop-command marks the ends of a loop (which is started by do), wherein all statements within the loop are repeated forever. In this respect the do loop-loop is infinite, however, you may leave it anytime via break or goto.

Example
 
print \"Hello, I will throw dice, until I get a 2 ...\" 
do 
  r=int(rand(6))+1 
  print r 
  if (r=2) break 
loop"

//==============================

DATA "LOWER$()", "BSC","l$=LOWER$(a$)","Convert a string to lower case

Synopsis
 
l$=lower$(a$) 

Description

The lower$-function accepts a single string-argument and converts it to all lower case.

Example
 
input \"Please enter a password: \" a$ 
if (a$=lower$(a$)) error \"Your password is NOT mixed case !\" 
          
This example prompts for a password and checks, if it is really lower case."

//==============================

DATA "LTRIM$()", "BSC","a$=LTRIM$(b$)","Trim spaces at the left end of a string

Synopsis
 
a$=ltrim$(b$) 

Description

The ltrim$-function removes all whitespace from the left end of a string and returns the result.

Example
 
input \"Please answer \'yes\' or \'no\' : \" a$ 
a$=lower$(ltrim$(rtrim$(a$))) 
if (len(a$)>0 and a$=left$(\"yes\",len(a$))) then 
  print \"Yes ...\" 
else 
  print \"No ...\" 
endif 
          
This example prompts for an answer and removes any spaces, which might precede the input; therefore it is even prepared for the (albeit somewhat patological case, that the user first hits space before entering his answer."

//==============================

DATA "MAX()", "BSC","print MAX(a,b)","Return the larger of its two arguments

Synopsis
 
print max(a,b) 

Description

Return the maximum of its two arguments.

Example
 
dim m(10) 
for a=1 to 1000 
  m=0 
  For b=1 to 10 
    m=max(m,ran(10)) 
  next b 
  m(m)=m(m)+1 
next a 

for a=1 to 9 
  print a,\": \",m(a) 
next a 
          
Within the inner for-loop (the one with the loop-variable b), the example computes the maximum of 10 random numbers. The outer loop (with the loop variable a) now repeats this process 1000 times and counts, how often each maximum appears.

The last loop reports the result."

//==============================

DATA "MENU", "GUI","MENU Head$, Menu$, Shortcut$, View$","Create a menu item for the menubar

Synopsis:

MENU Head$, Menu$, Shortcut$, View$ 

Description:

To add a menubar with menus to a window or a view named View$ is very easy. Simply call menu with the menu entry Head$ and a menu item called Menu$. If there is no menubar yet, a new one will be created. If the entry Head$ already exists, the item Menu$ will be added to the existing items at the end.

Shortcut$ can contain the following modifiers at the beginning and the shortcut character at the end:

Modifiers$+ShortcutCharacter$

\"S\" for the shift key
\"C\" for the control key
\"O\" for the option key (on most keyboards probably the Windows button)

These modifiers can be combined, but the following combinations do not work:
\"SO\", \"SC\" and \"SCO\"

Note: The command key (ALT) is always part of the shortcut."

//==============================

DATA "MENU SET", "GUI","MENU SET MenuHead$, MenuItem$, Option$, View$","Set options for the menu

Synopsis

MENU SET MenuHead$, MenuItem$, Option$, View$

Description

Enable/Disable or mark/unmark or remove a menu item.

Option$=\"Disable|Enable|Mark|Plain|Remove\""

//==============================

DATA "MENU SET {RADIO}", "GUI","MENU SET MenuHead$, SetRadioMode, View$","Set options for the menu

Synopsis

MENU SET MenuHead$, SetRadioMode, View$

Description

Put the menu in radio mode, so up to one item is marked.

Note: you have to set the first marked item yourself."

//==============================

DATA "MESSAGE SEND", "GUI","Arrived=MESSAGE SEND Application$, Message$","Send a string to the yab application with signature Application$

Synopsis

Arrived=MESSAGE SEND Application$, Message$

Description

The destination yab application will produce a message$ stating:

_Scripting:...|

where the ... are the Message$.

The command returns one of the following error codes:
0: Message was delivered
1: The destination program was not found
2: The target\'s message queue is full
3: Time out, the message never made it to the target
4: An other error occurred

The default signature is: \"application/x-vnd.yab-app\", you can change the signature when you add a comment in the first or second line of your program like this:
// mimetype \"application/x-vnd.myapp\"
Note: this does not work for bound programs currently!"

//==============================

DATA "MESSAGE$", "GUI","msg$=MESSAGE$","Receive a system message

Synopsis:

msg$=MESSAGE$

Description:

Message$ is one of the most important commands for graphical user interfaces. It checks the message queue for new messages that might have arrived from open windows or graphical widgets.

Most of the time the message queue is empty and message$ will return an empty string \"\". However, when some window or widget is selected or clicked on you probably will receive a message.

Note, once message$ is called, the queue is emptied. So you receive a message only once! It is therefore a good idea to store the message in a string (e.g. msg$) or in an array so you can evaluate it further. 

Messages are separated by the pipe symbol \"|\". Normally, you only receive one message. However, when there is some time passing between two message calls (e.g. because of a long calculation or a sleep command), several messages might have been coming in. Therefore you should always split the whole message into its message parts with the token() command (split() will do too). Use a loop to go through all messages then.

The kind of message is related to the window or widget sending the message. Check the different widget entries for more information on the type of message they send. 

Currently, there is one general system message that you always should process: \"_QuitRequested\" -- this means that your program was asked to quit by another program (e.g. by ProcessController or the system shutdown)"

//==============================

DATA "MID$()", "BSC","print MID$(a$,2,1)","Return (or change) characters from within a string

Synopsis
 
print mid$(a$,2,1) 
print mid$(a$,2) 
mid$(a$,5,3)=\"foo\" 
mid$(a$,5)=\"foo\" 

Description

The mid$-function requires three arguments: a string and two numbers, where the first number specifies a position within the string and the second one gives the number of characters to be returned; if you omit the second argument, the mid$-function returns all characters up to the end of the string.

Note, that you may assign to the mid$-function, i.e. mid$ may appear on the left hand side of an assignment. In this way it is possible to change a part of the variable used within the mid$-function. Note, that that way the length of the string cannot be changed, i.e. characters might be overwritten, but not added. For an example see below.

Example
 
input \"Please enter a string: \" a$ 
for a=1 to len(a$) 
  if (instr(\"aeiou\",lower$(mid$(a$,a,1)))) mid$(a$,a,1)=\"e\" 
next a 
print \"When you turn everything to lower case and\" 
print \"replace every vowel with \'e\', your input reads:\" 
print 
print a$ 
          
This example transforms the input string a bit, using the mid$-function to retrieve a character from within the string as well as to change it."

//==============================

DATA "MIN()", "BSC","print MIN(a,b)","Return the smaller of its two arguments

Synopsis
 
print min(a,b) 

Description

Return the minimum of its two argument.

Example
 
dim m(10) 
for a=1 to 1000 
  m=min(ran(10),ran(10)) 
  m(m)=m(m)+1 
next a 

for a=1 to 9 
  print a,\": \",m(a) 
next a 
          
For each iteration of the loop, the lower of two random number is recorded. The result is printed at the end."

//==============================

DATA "MOD()", "BSC","print MOD(a,b)","Compute the remainder of a division

Synopsis
 
print mod(a,b) 

Description

The mod-function divides its two arguments and computes the remainder. Note, that a/b-int(a/b) and mod(a,b) are always 
equal.

Example
 
clear screen 
print at(10,10) \"Please wait \"
p$=\"-\|/\" 
for a=1 to 100 
  rem  ... do something lengthy here, or simply sleep :-) 
  pause(1) 
  print at(22,10) mid$(p$,1+mod(a,4)) 
next a 
          
This example executes some time consuming action within a loop (in fact, it simply sleeps) and gives the user some indication of progress by displaying a turning bar (thats where the mod()-function comes into play)."

//==============================

DATA "MOUSE MESSAGE$()", "GUI","Mouse$=MOUSE MESSAGE$(View$)","Check the mouse for its position and the state of the buttons

Synopsis:

Mouse$=MOUSE MESSAGE$(View$)

Description:

Mouse message$() returns a string containing information of the mouse coordinates (relative to View$) and the state of the mouse buttons.

The mouse string has the format \"X:Y:LMB:MMB:RMB\" where MB is the corresponding left, middle, right mousebutton and X and Y are the coordinates relative to the view named View$. Use the token() command to split the string into an array and use val() to get the actual numerical values.

Design:

Using the mouse message$() is not recommended for beginners. Also the advanced programmer should use it not too intensively, but rather rely on the existing widgets. However, controlling the mouse gives you some means to create some own sort of widgets or some cool mouse-over effects."

//==============================

DATA "MOUSE SET", "GUI","MOUSE SET Option$","Hide or show the mouse cursor for this application.

Synopsis

MOUSE SET Option$

Description

Option$=\"Hide\" -- hide the mouse cursor
Option$=\"Show\" -- show the mouse cursor
Option$=\"Obscure\" -- hide the mouse cursor until the mouse is moved"

//==============================

DATA "MOUSEMOVE$", "GUI","Mouse$=MOUSEMOVE$","Returns more detailed mouse messages

Synopsis:

Mouse$=MOUSEMOVE$

Description:

This command is somewhat a duplicate to mouse message$(). However, it does not require a view to be given, but reports the name of the view back as part of the message Mouse$. The following messages can occur:

Control$+\":_InsideView\"
Control$+\":_EnteredView\"
Control$+\":_ExitedView\"
Control$+\":_MouseDown\"
Control$+\":_MouseUp\"
Control$+\":_LeftMouseButton\"
Control$+\":_RightMouseButton\"
Control$+\":_MiddleMouseButton\"

where Control$ is the ID of the widget or view where the event occured."

//==============================

DATA "NEXT", "BSC","NEXT f","Mark the end of a for loop

Synopsis
 
for a=1 to 10 
next a 

Description

The next-keyword marks the end of a for-loop. All statements up to the next-keyword will be repeated as specified with the for-clause. Note, that the name of the variable is optional; so instead of next a you may write next.

Example
 
for a=1 to 300000 
  for b=1 to 21+20*sin(pi*a/20) 
    print \"*\" 
  next b 
  print 
  sleep 0.1 
next a 
          
This example simply plots a sine-curve until you fall asleep."

//==============================

DATA "NOT", "BSC","if (NOT a<b) then ...","Negate an expression; can be written as !

Synopsis
 
if (not a<b) then ... 
bad=!okay 

Description

The keyword not (or ! for short) is mostly used within conditions (e.g. within if- or while-statements). There it is employed to negate the condition or expression (i.e. turn TRUE into FALSE and vice versa).

However not can be used within arithmetic calculations too., simply because there is no difference between arithmetic and logical expressions.

Example
 
input \"Please enter three ascending numbers: \" a,b,c 
if (not (a<b and b<c)) error \" the numbers you have entered are not ascending ...\" "

//==============================

DATA "NUMPARAMS", "BSC","if (NUMPARAMS=1)","Return the number of parameters, that have been passed to a subroutine

Synopsis
 
sub foo(a,b,c) 
  if (numparams=1) ... 
  ... 
end sub 

Description

Within a subroutine the local variable numparam or numparams contains the number of parameters, that have been passed to the subroutine. This information can be useful, because the subroutine may have been called with fewer parameters than actually declared. The number of values that actually have been passed while calling the subroutine, can be found in numparams.

Note, that arguments which are used in the definition of a subroutine but are left out during a call to it (thereby reducing the value of numparams) receive a value of 0 or \"\" (empty string) respectively.

Example
 
a$=\"123456789\" 
print part$(a$,4) 
print part$(a$,3,7) 

sub part$(a$,f,t) 
  if (numparams=2) then 
    return mid$(a$,f) 
  else 
    return mid$(a$,f,t-f+1) 
  end if 
end sub 
          
When you run this example, it will print 456789 and 34567. Take a look at the subroutine part$, which returns part of the string which has been passed as an argument. If (besides the string) two numbers are passed, they define the starting and end position of the substring, that will be returned. However, if only one number is passed, the rest of the string, starting from this position will be returned. Each of these cases is recognized with the help of the numparams variable."

//==============================

DATA "ON INTERRUPT", "BSC","ON INTERRUPT continue","Change reaction on keyboard interrupts

Synopsis
 
on interrupt break 
... 
on interrupt continue 

Description

With the on interrupt-command you may change the way, how yab reacts on a keyboard interrupt; it comes in two variants: on interrupt break and on interrupt continue. A keyboard interrupt is produced, if you press ctrl-C on your keyboard; normally (and certainly after you have called on interrupt break), yab will terminate with an error message. However after the command on interrupt continue yab ignores any keyboard interrupt. This may be useful, if you do not want your program beeing interruptible during certain critical operations (e.g. updating of files).

Example
 
print \"Please stand by while writing a file with random data ...\" 
on interrupt continue 
open \"random.data\" for writing as #1 
for a=1 to 100 
  print #1 ran(100) 
  print a,\" percent done.\" 
  sleep 1 
next a 
close #1 
on interrupt continue 
          
This program writes a file with 100 random numbers. The on interrupt continue command insures, that the program will not be terminated on a keyboard interrupt and the file will be written entirely in any case. The sleep-command just stretches the process arificially to give you a chance to try a ctrl-C."

//==============================

DATA "OPEN", "BSC","OPEN \"file\" for writing as #a","Open a file

Synopsis
 
open a,\"file\",\"r\" 
open #a,\"file\",\"w\" 
open #a,printer 
open \"file\" for reading as a 
open \"file\" for writing as #a 
a=open(\"file\") 
a=open(\"file\",\"r\") 
if (open(a,\"file\")) ... 
if (open(a,\"file\",\"w\")) ... 

Description

The open-command opens a file for reading or writing or a printer for printing text. open comes in a wide variety of ways; it requires these arguments:

filenumber

In the synopsis this is a or #a. In yab each file is associated with a number between 1 and a maximum value, which depends on the operating system. For historical reasons the filenumber can be preceded by a hash (\'#\'). Note, that specifying a filenumber is optional; if it is omitted, the open-function will return a filenumber, which should then be stored in a variable for later reference. This filenumber can be a simple number or an arbitrary complex arithmetic expression, in which case braces might be necessary to save yab from getting confused.

filename

In the synopsis above this is \"file\". This string specifies the name of the file to open (note the important caveat on specifying these filenames).

accessmode

In the synopsis this is \"r\", \"w\", for reading or for writing. This string or clause specifies the mode in which the file is 
opened; it may be one of: 

\"r\"

Open the file for reading (may also be written as for reading). If the file does not exist, the command will fail. 

This mode is the default, i.e. if no mode is specified with the open-command, the file will be opened with this mode.

\"w\"

Open the file for writing (may also be written as for writing). If the file does not exist, it will be created.

\"a\"

Open the file for appending, i.e. what you write to the file will be appended after its initial contents. If the file does not exist, it will be created.

\"b\"

This letter may not appear alone, but may be combined with the other letters (e.g. \"rb\") to open a file in binary mode (as opposed to text mode).

As you may see from the synopsis, the open-command may either be called as a command (without braces) or as a function (with braces). If called as a function, it will return the filenumber or zero if the operation fails. Therefore the open-function may be used within the condition of an if-statement.

If the open-command fails, you may use peek(\"error\") to retrieve the exact nature of the error.

Furthermore note, that there is another, somewhat separate usage of the open-command; if you specify the bareword printer instead of a filename, the command opens a printer for printing text. Every text (and only text) you print to this file will appear on your printer.

Finally you may read the description for peek(\"error\") to learn which errors may have happened during an open-call.

Example
 
open \"foo.bar\" for writing as #1 
print #1 \"Hallo !\" 
close #1 
if (not open(1,\"foo.bar\")) error \"Could not open \'foo.bar\' for reading\" 
while(not eof(1)) 
  line input #1 a$ 
  print a$ 
wend 
          
This example simply opens the file foo.bar, writes a single line, reopens it and reads its contents again."

//==============================

DATA "OPTION COLOR", "GUI","OPTION COLOR View$, \"BGColor\", r,g,b","Set the background color of any view

Synopsis

OPTION COLOR View$, \"BGColor\", r,g,b

Description

Set the background color of any view (note: this is different to DRAW SET!)"

//==============================

DATA "OPTION SET {ENABLE}", "GUI","OPTION SET Control$, \"Enabled\", IsEnabled","Enable / Disable a control

Synopsis
OPTION SET Control$, \"Enabled\", IsEnabled 

Description

Enable/disable the control Control$.

Note: The following widgets are controls:

CHECKBOX, RADIOBUTTON, SLIDER, TEXTCONTROL, BUTTON, COLORCONTROL, SPINCONTROL, CALENDAR"

//==============================

DATA "OPTION SET {FOCUS}", "GUI","OPTION SET View$, \"Focus\", HasFocus","Set / Remove focus on a view

Synopsis

OPTION SET View$, \"Focus\", HasFocus

Description

Set/remove the focus of View$ (when this is supported by the view)."

//==============================

DATA "OPTION SET {LABEL}", "GUI", "", "Give a Control a new label

Synopsis

OPTION SET Control$, \"Label\", NewLabel$

Description

Give a Control a new label.

Note: The following widgets are controls:

CHECKBOX, RADIOBUTTON, SLIDER, TEXTCONTROL, BUTTON, COLORCONTROL, SPINCONTROL, CALENDAR"

//==============================

DATA "OPTION SET {RESIZE}", "GUI","OPTION SET View$, \"Auto-Resize\"","Set a view's auto-resize option

Synopsis

OPTION SET View$, \"Auto-Resize\"

Description

Automatically resize the view View$ to preferred (when this is supported by the view)."

//==============================

DATA "OPTION SET {VISIBLE}", "GUI","OPTION SET Control$, \"Visible\", IsVisible","Make a control invisible

Synopsis

OPTION SET Control$, \"Visible\", IsVisible

Description

Set the control Control$ unvisible or visible

Note: The following widgets are controls:

CHECKBOX, RADIOBUTTON, SLIDER, TEXTCONTROL, BUTTON, COLORCONTROL, SPINCONTROL, CALENDAR"

//==============================

DATA "OR", "BSC","(a OR b)","Logical or, used in conditions

Synopsis
 
if (a or b) ... 
while (a or b) ... 

Description

Used in conditions (e.g within if or while) to join two expressions. Returns true, if either its left or its right or both arguments are true; returns false otherwise.

Example
 
input \"Please enter a number\" 
if (a>9 or a<1) print \"a is not between 1 and 9\""

//==============================

DATA "OR()", "BSC","x=OR(a,b)","Arithmetic or, used for bit-operations

Synopsis
 
x=or(a,b) 

Description

Used to compute the bitwise or of both its argument. Both arguments are treated as binary numbers (i.e. a series of 0 and 1); a bit of the resulting value will then be 1, if any of its arguments has 1 at this position in their binary representation.

Note that both arguments are silently converted to integer values and that negative numbers have their own binary representation and may lead to unexpected results when passed to or.

Example
 
print or(14,3) 
          
This will print 15. This result is clear, if you note, that the binary representation of 14 and 3 are 1110 and 0011 respectively; this will yield 1111 in binary representaion or 15 as decimal."

//==============================

DATA "PAUSE/SLEEP/WAIT", "BSC","PAUSE x","Pause, sleep, wait for the specified number of seconds

Synopsis
 
pause x 

Description

The pause-command has many different names: You may write pause, sleep or wait interchangable; whatever you write, yab will always do exactly the same.

The pause-command will simply wait for the specified number of seconds. This may be a fractional number, so you may well wait less than a second. However, if you try to pause for a smaller and smaller interval (e.g. 0.1 seconds, 0.01 seconds, 0.001 seconds and so on) you will find that at some point yab will not wait at all. The minimal interval that can be waited depends on the system you are using.

The pause-command cannot be interrupted. However, sometimes you may want the wait to be interuptible by simply pressing a key on the keyboard. In such cases you should consider using the inkey$-function, with a number of seconds as an argument).

Example
 
deg=0 
do 
  maxx=44+40*sin(deg) 
  for x=1 to maxx 
    print \"*\" 
  next x 
  pause 0.1+(maxx*maxx/(4*84*84)) 
  print 
  deg=deg+0.1 
loop 
          
This example draws a sine-curve; due to the pause-statement the speed of drawing varies in the same way as the speed of a ball might vary, if it would roll along this curve under the influence of gravity."

//==============================

DATA "PEEK", "BSC","print PEEK(\"foo\")","Retrieve various internal informations

Synopsis
 
print peek(\"foo\") 
a=peek(#1) 

Description

The peek-function has many different and mostly unrelated uses. It is a kind of grabbag for retrieving all kinds of numerical information, internal to yab. The meaning of the numbers returned be the peek-function depends on the string or number passed as an argument.

peek always returns a number, however the closely related peek$-function exists, which may be used to retrieve string information from among the internals of yab. Finally note, that some of the values which are retrieved with peek may even be changed, using the poke-function.

There are two variants of the peek-function: One expects an integer, positive number and is described within the first entry of the list below. The other variant expects one of a well defined set of strings as described in the second and all the following entries of the list below.

peek(a), peek(#a)

Read a single character from the file a (which must be open of course).

peek(\"screenheight\")

Return the height in characters of the window, wherein yab runs. If you have not called clear screen yet, this peek will return 0, regardless of the size of your terminal.

peek(\"screenwidth\")

Return the width in characters of the window, wherein yab runs. If you have not called clear screen yet, this peek will return 0, regardless of the size of your terminal.

peek(\"argument\")

Return the number of arguments, that have been passed to yab at invocation time. E.g. if yab has been called like this: yab foo.yab bar baz, then peek(\"argument\") will return 2. This is because foo.yab is treated as the name of the program to run, whereas bar and baz are considered arguments to the program, which are passed on the commandline. Note, that for windows-users, who tend to click on the icon (as opposed to starting yab on the command line), this peek will mostly return 0.

The function peek(\"argument\") can be written as peek(\"arguments\") too.

You will want to check out the corresponding function peek$(\"argument\") to actually retrieve the arguments. Note, that each call to peek$(\"argument\") reduces the number returned by peek(\"argument\").

peek(\"isbound\")

Return true, if the executing yab-program is part of a standalone program; see the section about creating a standalone-program for details.

peek(\"version\")

Return the version number of yab (e.g. 2.72).

peek(\"error\")

Return a number specifying the nature of the last error in an open- or seek-statement. Normally an error within an open-statement immediately terminates your program with an appropriate error-message, so there is no chance and no need to learn more about the nature of the error. However, if you use open as a condition (e.g. if (open(#1,\"foo\")) ...) the outcome (success or failure) of the open-operation will determine, if the condition evaluates to true or false.

If now such an operation fails, your program will not be terminated and you might want to learn the reason for failure. 

This reason will be returned by peek(\"error\") (as a number) or by peek$(\"error\") (as a string)

The table below shows the various error codes; the value returned by peek$(\"error\") explains the nature of the error. 

Note, that the codes 10,11 and 12 refer to the seek-command.

Table 6.1. Error codes

peek(\"error\")
peek$(\"error\")
Explanation
2
Stream already in use
Do not try to open one and the same filenumber twice; rather close it first.
3
\'x\' is not a valid filemode
The optional filemode argument, which may be passed to the open-function, has an invalid value
4
could not open \'foo\'
The open-call did not work, no further explanation is available.
5
reached maximum number of open files

You have opened more files than your operating system permits.
6
cannot open printer: already 
printing graphics
The commands open printer and open #1,printer both open a printer (refer to their description for the difference). However, only one can be active at a time; if you try to do both at the same time, you will receive this error.
7
could not open line printer
Well, it simply did not work.
9
invalid stream number
An attempt to use an invalid (e.g. negative) stream number; example: open(-1,\"foo\")
10
could not position stream x to 
byte y
seek did not work.
11
stream x not open
You have tried to seek within a stream, that has not been opened yet.
12
seek mode \'x\' is none of begin,end,here
The argument, which has been passed to seek is invalid.

Example
 
open \"foo\" for reading as #1 
open \"bar\" for writing as #2 
while(not eof(#1)) 
  poke #2,chr$(peek(#1)); 
wend 
          
This program will copy the file foo byte by byte to bar.

Note, that each peek does something entirely different, and only one has been demonstrated above. Therefore you need to make up examples yourself for all the other peeks."

//==============================

DATA "PEEK {GUI}", "GUI","x=PEEK(\"foo\"","Retrieve various internal string-informations

Synopsis
 
x=PEEK(\"DesktopWidth\")
Returns the current X-resolution of the current desktop
  
y=PEEK(\"DesktopHeight\")
Returns the current Y-resolution of the current desktop
  
x=PEEK(\"Deskbar-x\")
Returns the position of the left side of the Deskbar
  
y=PEEK(\"Deskbar-y\")
Returns the position of the top side of the Deskbar
  
w=PEEK(\"DeskbarWidth\")
Returns the height of the Deskbar
  
h=PEEK(\"DeskbarHeight\")
Returns the width of the Deskbar
  
p=PEEK(\"Deskbarposition\")
Returns the position of the Deskbar as follows (clockwise):
1=top-left
2=top
3=top-right
4=bottom-right
5=bottom
6=bottom-left
  
i=PEEK(\"Deskbarexpanded\")
Returns true if the Deskbar is expanded (only possibe in position 1 and 3) and false if not.
  
Height=PEEK(\"menuheight\")
Returns the height of the menu (which is related to the user\'s font settings). 
This returns the height only when any window already has a menu, otherwise it returns -1.
  
Width=PEEK(\"scrollbarwidth\")
Returns the width of the scrollbars.
Different to \"menuheight\", it returns the correct width even if no scrollbars are used.
  
Height=PEEK(\"tabheight\")
Returns the height of the tabfield."

//==============================

DATA "PEEK$", "BSC","print PEEK$(\"foo\")","Retrieve various internal string-informations

Synopsis
 
print peek$(\"foo\") 

Description

The peek$-function has many different and unrelated uses. It is a kind of grabbag for retrieving all kinds of string information, internal to yab; the exact nature of the strings returned be the peek$-function depends on the string passed as an argument.

peek$ always returns a string, however the closely related peek-function exists, which may be used to retrieve numerical information from among the internals of yab. Finally note, that some of the values which are retrieved with peek$ may even be changed, using the poke-function.

The following list shows all possible arguments to peek$:

peek$(\"infolevel\")

Returns either \"debug\", \"note\", \"warning\", \"error\" or \"fatal\", depending on the current infolevel. This value can be specified with an option on the commandline or changed during the execution of the program with the corresponding poke; however, normally only the author of yab (me !) would want to change this from its default value \"warning\".

peek$(\"textalign\")

peek$(\"windoworigin\")

This peek returns a two character string, which specifies the position of the origin of the coordinate system of the window; this string might be changed with the corresponding command poke \"windoworigin\",x,y or specified as the argument of the origin command; see there for a detailed description of the string, which might be returned by this peek.

peek$(\"error\")

Return a string describing the nature of the last error in an open- or seek-statement. See the corresponding peek(\"error\") for a detailed description.

peek$(\"library\")

Return the name of the library, this statement is contained in. See the import-command for a detailed description or for more about libraries.

peek$(\"os\")

This peek returns the name of the operating system, where your program executes.

peek$(\"env\",\"NAME\")

Return the environment variable specified by NAME (which may be any string expression). Which kind of environment variables are available on your system depends, as well as their meaning, on your system; however typing env on the commandline will produce a list (for Windows and Unix alike). Note, that peek$(\"env\",...) can be written as peek$(\"environment\",...) too.

peek$(\"argument\")

Return one of the arguments, that have been passed to yab at invocation time (the next call will return the the second argument, and so on). E.g. if yab has been called like this: yab foo.yab bar baz, then the first call to peek$(\"argument\") will return bar. This is because foo.yab is treated as the name of the program to run, whereas bar and baz are considered arguments to this program, which are passed on the commandline. The second call to peek$(\"argument\") will return baz. Note, that for windows-users, who tend to click on the icon (as opposed to starting yab on the command line), this peekwill mostly return the empty string.

Note, that peek$(\"argument\") can be written as peek$(\"arguments\").Finally you will want to check out the corresponding function peek(\"argument\").

Example
 
print \"You have supplied these arguments: \"
while(peek(\"argument\")) 
  print peek(\"argument\"),peek$(\"argument\") 
wend 
          
If you save this program in a file foo.yab and execute it via yab t.yab a b c , you will get this output:
 
3a 
2b 
1c"

//==============================

DATA "PEEK$ {GUI}", "GUI","peek$(\"foo\")","Retrieve various internal string-informations

Synopsis
 
Directory$=PEEK$(\"directory\")

Description

Returns application directory. Use this in the following way:

if (peek(\"isbound\")) then
  directory$=peek$(\"directory\")
else
  Directory$=system$(\"pwd\")
endif

TrackerItem$=PEEK$(\"refsreceived\")

Returns TrackerItem which you used \'open with...\' your application on."

//==============================

DATA "PI", "BSC","PI","A constant with the value 3.14159

Synopsis
 
print pi 

Description
pi is 3.14159265359 (well at least for yab); do not try to assign to pi (e.g. pi=22/7) this would not only be mathematically dubious, but would also result in a syntax error.

Example
 
for a=0 to 180 
  print \"The sine of \",a,\" degrees is \",sin(a*pi/180) 
next a 
          
This program uses pi to transform an angle from degrees into radians."

//==============================

DATA "POKE", "BSC","POKE \"foo\",\"bar\"","Change selected internals of yab

Synopsis
 
poke \"foo\",\"bar\" 
poke \"foo\",baz 
poke #a,\"bar\" 
poke #a,baz 

Description

The poke-command may be used to change details of yabs behaviour. Like the related function peek, poke does many different things, depending on the arguments supplied.

Here are the different things you can do with poke:

poke \"textalign\",\"cc\"

This poke changes the default alignment of text with respect to the coordinates supplied within the text-command. 

However, this value does not apply, if the text-command explicitly specifies an alignment. The second argument (\"cc\" in the example) must always be two characters long; the first character can be one of l (left), r (right) or c (center); the second character can be either t (top), b (bottom) or c (center); see the corresponding peek$(\"textalign\") for a detailed description of this argument.

poke \"windoworigin\",\"lt\"

This poke moves the origin of the coordinate system of the window to the specified position. The second argument (\"lt\" in the example) must always be two characters long; the first character can be one of l (left), r (right) or c (center); the second character can be either t (top), b (bottom) or c (center). Together those two characters specify the new position of the coordinate-origin. See the corresponding peek$(\"windoworigin\") for a more in depth description of this argument.

poke \"infolevel\",\"debug\"

Change the amount of internal information, that yab outputs during execution.

The second argument can be either \"debug\", \"note\", \"warning\", \"error\" or \"fatal\". However, normally you will not want to change this from its default value \"warning\".

See also the related peek$(\"infolevel\").

poke #1,a

Write the given byte (a in the example above) to the specified stream (#a in the example).

Example
 
print \"Hello, now you will see, how much work\" 
print \"a simple for-loop involves ...\" 
input \"Please press return \" a$ 
poke \"infolevel\",\"debug\" 
for a=1 to 10:next a 
          
This example only demonstrates one of the many pokes, which are described above: The program switches the infolevel to debug, which makes yab produce a lot of debug-messages during the subsequent for-loop."

//==============================

DATA "POPUPMENU", "GUI","Selected$=POPUPMENU x,y, MenuItems$, View$","Open a popup menu

Synopsis:

Selected$=POPUPMENU x,y, MenuItems$, View$ 

Description:

This function pops up a menu at the position (x,y) as upper left corner on View$. The menu contains several menu items which are given as MenuItems$. The items are separated by a pipe \"|\". If a menu item is a double minus, it will be used as a separator.

Your program will wait until an item is selected from the menu or the user clicks somewhere else. The command will then return either the selected item name or an empty string \"\" when nothing was selected.

Note, you cannot add submenus, have a radio mode or select items which is possible for menus in a menubar.

Similar to the menu, the Selected$ will contain the translation of the selected item when localization is used. Use translate$ where necessary, as explained for the menu command.

Design:

Remember to give the user a hint so he can expect a popup menu. E.g. add a small down-arrow to a button image, if this button opens a popup menu."

//==============================

DATA "PRINT", "TXT","PRINT \"foo\",a$,b ","Write to terminal or file

Synopsis
 
print \"foo\",a$,b 
print \"foo\",\"a$,b; 
print #a \"foo\",a$ 
print #a \"foo\",a$; 
print foo using \"##.###\" 
print reverse \"foo\" 
print at(10,10) a$,b 
print @(10,10) a$,b 
print color(\"red\",\"blue\") a$,b 
print color(\"magenta\") a$,b 
print color(\"green\",\"yellow\") at(5,5) a$,b 

Description

The print-statement outputs strings or characters, either to your terminal (also known as console) or to an open file.

To understand all those uses of the print-statement, let\'s go throught the various lines in the synopsis above:

print \"foo\",a$,b

Print the string foo as well as the contents of the variables a$ and b onto the screen, silently adding a newline.

print \"foo\",a$,b;

(Note the trailing semicolon !) This statement does the same as the one above; only the implicit newline is skipped, which means that the next print-statement will append seamlessly.

print #a \"foo\",a$

This is the way to write to files. The file with the number a must be open already, an implicit newline is added. Note the file-number #a, which starts with a hash (\'#\') amd is separated from the rest of the statement by a space only. 

The file-number (contained in the variable a) must have been returned by a previous open-statement (e.g. a=open(\"bar\")).

print #a \"foo\",a$;

The same as above, but without the implicit newline.

print foo using \"##.###\"

Print the number foo with as many digits before and after the decimal dot as given by the number of \'#\'-signs. See the entries for using and str$ for a detailed description of this format.

print reverse \"foo\"

As all the print-variants to follow, this form of the print-statement can only be issued after clear screen has been called. The strings and numbers after the reverse-clause are simply printed inverse (compared to the normal print-statement).

print at(10,10) a$,b

Print at the specified (x,y)-position. This is only allowed after clear screen has been called. You may want to query peek$(\"screenwidth\") or peek$(\"screenheight\") to learn the actual size of your screen. You may add a semicolon to suppress the implicit newline.

print @(10,10) a$,b

This is exactly the same as above, however, at may be written as @.

print color(\"red\",\"blue\") at(5,5) a$,b

Print with the specified fore- (\"red\") and background (\"blue\") color (or colour). The possible values are \"black\", \"white\", \"red\", \"blue\", \"green\", \"yellow\", \"cyan\" or \"magenta\". Again, you need to call clear screen first and add a semicolon if you want to suppress the implicit newline.

print color(\"magenta\") a$,b

You may specify the foreground color only.

print color(\"green\",\"yellow\") a$,b

A color and a position (in this sequence, not the other way around) may be specified at once.

Example
 
clear screen 
columns=peek(\"screenwidth\") 
lines=peek(\"screenheight\") 
dim col$(7) 
for a=0 to 7:read col$(a):next a 
data \"black\",\"white\",\"red\",\"blue\",\"green\",\"yellow\",\"cyan\",\"magenta\" 

for a=0 to 2*pi step 0.1 
  print colour(col$(mod(i,8))) at(columns*(0.8*sin(a)+0.9)/2,lines*(0.8*cos(a)+0.9)/2) \"*\" 
  i=i+1 
next a 
          
This example draws a cloured ellipse within the text window."

//==============================

DATA "PRINTER", "GUI","PrintingError=PRINTER JobName$, SetupFile$, View$","Send a view to the printer

Synopsis:

PrintingError=PRINTER JobName$, SetupFile$, View$

Description:
Printer is a powerful but yet simple command to print a view named View$. The view is send to the currently active printer and put into the spooling queue. There, it is visible under the name JobName$.

SetupFile$ gives a files as saved by the printer setup command. If the setup file is not valid or empty (\"\"), the printing setup is called first automatically. Otherwise the saved setup is used for the printing.

Printer returns one of the following numbers:

0=No Problems
1=Page setup failed (probably communication problems with the print server)
2=The configuration file was loaded but page setup failed
3=The view View$ was not found
4=The number of pages is 0 or less
5=The printing was canceled or something went wrong with printing

Note: PrintingError=4 can happen because of a bug in the PDF printing driver; although a page size is shown, none is selected. If this happens, you may want to call a PRINTER SETUP for the user and try to print again.

Note: When an error with code 1,2,3 or 4 occurs, you can be sure that nothing was sent to the printer yet.

Note: Alpha transparency is not printed correctly!"

//==============================

DATA "PRINTER SETUP", "GUI","PRINTER SETUP SetupFile$","Setup the current printer

Synopsis:

PRINTER SETUP SetupFile$

Description:

Printer setup call the setup window of the currently active printer. Here, the user can specify printing parameters like paper size or a border width. The setup is saved in the file called SetupFile$. No file is created when the user cancels the setup.

Note: At least one window has to be open before printer setup can be called."

//==============================

DATA "PUTSCREEN", "TXT","PUTSCREEN a$,x,x","Draw a rectangle of characters into the text terminal

Synopsis
 
clear screen 
... 
a$=getscreen$(5,5,10,10) 
... 
putscreen a$,7,7 

Description

The putscreen-command is the counterpart of the getscreen$-function. putscreen requires a string as returned by the getscreen-function. Such a string contains a rectangular detail from the terminal; the putscreen-function puts such a region back into the terminal-window.

Note, that clear screen must have been called before.

Example
 
clear screen 
for a=1 to 200 
  print color(\"red\") \"Hallo !\" 
  print color(\"blue\") \"Welt !\" 
next a 
r$=getscreen$(0,0,20,20) 
for x=0 to 60 
  putscreen r$,x,0 
  sleep 0.1 
next x 
          
This example prints the string \"Hallo !Welt !\" all over the screen and then moves a rectangle from one side to the other."

//==============================

DATA "RADIOBUTTON", "GUI","RADIOBUTTON x,y, ID$, Label$, IsActivated, View$","reate a new radiobutton

Synopsis:

RADIOBUTTON x,y, ID$, Label$, IsActivated, View$

Description:

Set up a radiobutton named ID$ at the position (x,y). It will display the label Label$ next to the button. If IsActivated is set to true, the radiobutton will be selected. All radiobuttons on one view will act as a group. Thus on a view only one radiobutton will be active. 

Note: On setup it is up to you to preselect a radiobutton. You can even make more than one radiobutton active but this is hardly useful. When the user selects a radiobutton, all others will be deselected automatically.

You can use option set to disable the radiobutton or to change the label.

Message:

The radiobutton when selected will send a message string with its ID$.

Layout:

In standard layout, the radiobutton will follow the lower, right corner of the view or window.

Design:

Try to align radiobuttons below each other."

//==============================

DATA "RADIOBUTTON SET", "GUI","RADIOBUTTON SET RadioButton$, IsActivated","(de-)activate the radiobutton

Synopsis:

RADIOBUTTON SET RadioButton$, IsActivated

Description:

If IsActivated is set to true, the radiobutton named RadioButton$ will be selected. If IsActivated is set to false, the radiobutton will be deselected. Note: This allows you to activate more than one radiobutton in a group which is not recommended."

//==============================

DATA "RAN()", "BSC","x=RAN(y)","Return a random number

Synopsis
 
print ran() 
x=ran(y) 

Description

The ran-function returns a random number. If no argument is given, the number returned is in the range from 0 to 1; where 
only 0 is a possible value; 1 will never be returned. If an argument is supplied, the number returned will be in the range from 
0 up to this argument, whereas this argument itself is not a possible return value.

Example
 
clear screen 
c=peek(\"screenwidth\")-1 
l=peek(\"screenheight\") 
dim col$(8) 
for a=0 to 7:read col$(a):next a 
data \"black\",\"white\",\"red\",\"blue\",\"green\",\"yellow\",\"cyan\",\"magenta\" 
do 
  x=ran(c) 
  y=l-ran(l*exp(-32*((x/c-1/2)**2))) 
  i=i+1 
  print color(col$(mod(i,8))) at(x,y) \"*\" 
loop 
          
This example will print a cloured bell-curve."

//==============================

DATA "READ", "BSC","READ a$,a","Read data from data-statements

Synopsis
 
read a$,a 
... 
data \"Hello !\",7 

Description

The read-statement retrieves literal data, which is stored within data-statements elsewhere in your program.

Example
 
read num 
dim col$(num) 
for a=1 to num:read col$(a):next a 
clear screen 
print \"These are the colours known to yab:\n\" 
for a=1 to num 
  print colour(col$(a)) col$(a) 
next a 
data 8,\"black\",\"white\",\"red\",\"blue\" 
data \"green\",\"yellow\",\"cyan\",\"magenta\" 
          
This program prints the names of the colors known to yab in those very colors."

//==============================

DATA "REDIM()", "BSC","DIM","Create an array prior to its first use. A synonym for dim

Synopsis
 
See the dim-command. 

Description

The redim-command does exactly the same as the dim-command; it is just a synonym. redim has been around in older versions of basic (not even yabasic) for many years; therefore it is supported in yab for compatibility reasons.

Please refer to the entry for the dim-command for further information."

//==============================

DATA "REM", "BSC","REM","Start a comment

Synopsis
 
rem  Hey, this is a comment 
#    this is a comment too 
// even this 
print \"Not a comment\" #    This is an error !! 
print \"Not a comment\"://   But this is again a valid comment 
print \"Not a comment\" //   even this. 
print \"Not a comment\" rem  and this ! 

Description

rem introduces a comment (like # or //), that extends up to the end of the line.

Those comments do not even need a colon (\':\' infront of them); they (rem, # and //) all behave alike except for #, which may only appear at the very beginning of a line; therefore the fourth example in the synopsis above (print \"Not a comment\" # This is an error !!) is indeed an error.

Note, that rem is an abbreviation for remark. remark however is not a valid command in yab.

Finally note, that a comment intoduced with \'#\' may have a special meaning under unix; see the entry for # for details.

Example
 
# 
rem   comments on data structures 
#     are more useful than 
//    comments on algorithms. 
rem 
          
This program does nothing, but in a splendid and well commented way."

//==============================

DATA "REPEAT", "BSC","REPEAT","Start a repeat-loop

Synopsis
 
repeat 
  ... 
until (...) 

Description

The repeat-loop executes all the statements up to the final until-keyword over and over. The loop is executed as long as the condition, which is specified with the until-clause, becomes true. By construction, the statements within the loop are executed at least once.

Example
 
x=0 
clear screen 
print \"This program will print the numbers from 1 to 10\" 
repeat 
  x=x+1 
  print x 
  print \"Press any key for the next number, or \'q\' to quit\" 
  if (inkey$=\"q\") break 
until(x=10) 
          
This program is pretty much useless, but self-explanatory."

//==============================

DATA "RESTORE", "BSC","RESTORE foo","Reposition the data-pointer

Synopsis
 
read a,b,c,d,e,f 
restore 
read g,h,i 
restore foo 
data 1,2,3 
label foo 
data 4,5,6 

Description

The restore-command may be used to reset the reading of data-statements, so that the next read-statement will read data from the first data-statement.

You may specify a label with the restore-command; in that case, the next read-statement will read data starting at the given label. If the label is omitted, reading data will begin with the first data-statement within your program.

Example
 
input \"Which language (german/english) ? \" l$ 
if (instr(\"german\",l$)>0) then 
  restore german 
else 
  restore english 
endif 

for a=1 to 3 
  read x,x$ 
  print x,\"=\",x$ 
next a 

label english 
data 1,\"one\",2,\"two\",3,\"three\" 
label german 
data 1,\"eins\",2,\"zwei\",3,\"drei\" 
          
This program asks to select one of those languages known to me (i.e. english or german) and then prints the numbers 1,2 and 3 and their textual equivalents in the chosen language."

//==============================

DATA "RETURN", "BSC","RETURN foo","Return from a subroutine

Synopsis
 
sub bar(baz) 
  ... 
  return quertz 
end sub 

Description

The return-statement serves to return control from within a subroutine to the place in your program, where the subroutine has been called. If the subroutine is declared to return a value, the return-statement might be accompanied by a string or number, which constitutes the return value of the subroutine.

However, even if the subroutine should return a value, the return-statement need not carry a value; in that case the subroutine will return 0 or the empty string (depending on the type of the subroutine). Moreover, feel free to place multiple return-statements within your subroutine; it\'s a nice way of controlling the flow of execution.

Example
 
do 
  read a$ 
  if (a$=\"\") then 
    print 
    end 
  endif 
  print mark$(a$),\" \"
loop 

data \"The\",\"quick\",\"brown\",\"fox\",\"jumped\" 
data \"over\",\"the\",\"lazy\",\"dog\",\"\" 

sub mark$(a$) 
  if (instr(lower$(a$),\"q\")) return upper$(a$) 
  return a$ 
end sub 
          
This example features a subroutine mark$, that returns its argument in upper case, if it contains the letter \"q\", or unchanged otherwise. In the test-text the word quick will end up being marked as QUICK."

//==============================

DATA "REVERSE", "BSC","print REVERSE \"foo\"","Print reverse (background and foreground colors exchanged)

Synopsis
 
clear screen 
... 
print reverse \"foo\" 

Description
reverse may be used to print text in reverse. reverse is not a seperate command, but part of the print-command; it may be included just after the print and can only be issued once that clear screen has been issued.

Example
 
clear screen 
print \"1 \"
c=3 
do 
  prim=true 
  for a=2 to sqrt(c) 
    if (frac(c/a)=0) then 
      prim=false 
      break 
    endif 
  next a 
  if (prim) then 
    print 
    print reverse c; 
  else 
    print c; 
  endif 
  print \" \"
  c=c+1 
loop 
          
This program prints numbers from 1 on and marks each prime number in reverse."

//==============================

DATA "RIGHT$()", "BSC","print RIGHT$(a$,x)","Return (or change) the right end of a string

Synopsis
 
print right$(a$,2) 
right$(b$,2)=\"baz\" 

Description

The right$-function requires two arguments (a string and a number) and returns the part from the right end of the string, whose length is specified by its second argument. So, right$ simply returns the requested number of chars from the right end of the given string.

Note, that the right$-function can be assigned to, i.e. it may appear on the left hand side of an assignment. In this way it is possible to change a part of the variable used within the right$-function. Note, that that way the length of the string cannot be changed, i.e. characters might be overwritten, but not added. For an example see below.

Example
 
print \"Please enter a length either in inch or centimeter\" 
print \"please add \'in\' or \'cm\' to mark the unit.\" 
input \"Length: \" a$ 
if (right$(a$,2)=\"in\") then 
   length=val(a$)*2.56 
elsif (right$(a$,2)=\"cm\") then 
   length=val(a$) 
else 
   error \"Invalid input: \"+a$ 
endif 
          
This program allows the user to enter a length qulified with a unit (either inch or centimeter).

This second example demonstrates the capability to assign to the right$-function.
 
a$=\"Heiho World !\" 
print a$ 
right$(a$,7)=\"dwarfs.\" 
print a$"

//==============================

DATA "RINSTR()", "BSC","pos=RINSTR(a$,b$,x)","Find the rightmost occurence of one string within the other

Synopsis
 
pos=rinstr(\"Thequickbrownfox\",\"equi\") 
pos=rinstr(a$,b$,x) 

Description

The rinstr-function accepts two string-arguments and tries to find the second within the first. However, unlike the instr, the rinstr-function finds the rightmost (or last) occurence of the string; whereas the instr-function finds the leftmost (or first) occurence. In any case however, the position is counted from the left.

If you supply a third, numeric argument to the rinstr-function, it will be used as a starting point for the search. Therefore rinstr(\"abcdeabcdeabcde\",\"e\",8) will return 5, because the search for an \"e\" starts at position 8 and finds the first one at position 5.

Example
 
print rinstr(\"foofoofoobar\",\"foo\") 
          
This simple example will print 7, because it finds the rightmost among the three occurences of foo within the string. Note, that
 
print instr(\"foofoofoobar\",\"foo\") 
would have printed 1."

//==============================

DATA "RTRIM$()", "BSC","a$=RTRIM$(b$)","Trim spaces at the right end of a string

Synopsis
 
a$=rtrim$(b$) 

Description

The rtrim$-function removes all wthitespace from the right end of a string and returns the result.

Example
 
open 1,\"foo\" 
dim lines$(100) 
l=1 
while(not eof(1)) 
  input #1 a$ 
  a$=rtrim$(a$) 
  if (right$(line$,1)=\"\\\") then 
    line$=line$+\" \"+a$ 
  else 
    lines$(l)=line$ 
    l=l+1 
    line$=a$ 
  endif 
end while 
print \"Read \",l,\" lines\" 
          
This example reads the file foo allowing for continuation lines, which are marked by a \, which appears as the last character on a line. For convenience whitespace at the right end of a line is trimmed with rtrim."

//==============================

DATA "SCREENSHOT", "GUI","SCREENSHOT x1, y1 to x2, y2, Bitmap$","Takes a screenshot

Synopsis

SCREENSHOT x1, y1 to x2, y2, Bitmap$

Description

Takes a screenshot and copies the specified region of the desktop onto Bitmap$, which will be created"

//==============================

DATA "SCROLLBAR", "GUI","SCROLLBAR ID$, ScrollbarType, View$","Make View scrollable.
  
Synopsis

SCROLLBAR ID$, ScrollbarType, View$

Description

Make View$ scrollable."

//==============================

DATA "SCROLLBAR GET", "GUI","Position=SCROLLBAR GET Scrollbar$, option$","Get the current position of the scrollbars

Synopsis

Position=SCROLLBAR GET Scrollbar$, \"Horizontal\"
Position=SCROLLBAR GET Scrollbar$, \"Vertical\""

//==============================

DATA "SCROLLBAR SET", "GUI","SCROLLBAR SET Scrollbar$, option$, parameter","Set scrollbar properties

Synopsis

SCROLLBAR SET Scrollbar$, Borderoption$
Borderoption$=\"no-border\" or \"plain-border\" or \"fancy-border\" (default)

SCROLLBAR SET Scrollbar$, \"Vertical Position\", Position
SCROLLBAR SET Scrollbar$, \"Horizontal Position\", Position
Set the scrollbar to the position Position. Default is (0,0).

SCROLLBAR SET Scrollbar$, \"Vertical Range\", Min, Max
SCROLLBAR SET Scrollbar$, \"Horizontal Range\", Min, Max
Set the scrollbars to a maximum range, default is (1000,1000).
Note: the Max value will be added to the view\'s actual width/height.

SCROLLBAR SET Scrollbar$, \"Vertical Steps\", SmallSteps, BigSteps
SCROLLBAR SET Scrollbar$, \"Horizontal Steps\", SmallSteps, BigSteps
Set the scrollbar steps. 

SmallSteps are the scrolling steps when the user clicks on the arrow buttons (default is 1.0).

BigSteps are the scrolling steps when the user clicks on the empty part of the scrollbar (default is 10.0)."

DATA "SEEK()", "BSC","SEEK #1,q","Change the position within an open file

Synopsis
 
open 1,\"foo\" 
seek #1,q 
seek #1,x,\"begin\" 
seek #1,y,\"end\" 
seek #1,z,\"here\" 

Description

The seek-command changes the position, where the next input (or peek) statement will read from an open file. Usually files are read from the beginning to the end sequentially; however sometimes you may want to depart from this simple scheme. 

This can be done with the seek-command, allowing you to change the position, where the next piece of data will be read from the file.

seek accepts two or three arguments: The first one is the number of an already open file. The second one is the position where the next read from the file will start. The third argument is optional and specifies the the point from where the position (the second argument) will count. It can be one of:

begin

Count from the beginning of the file.

end

Count from the end of the file.

here

Count from the current position within the file.

Example
 
open #1,\"count.dat\",\"w\" 
for a=1 to 10 
  print #1,\"00000000\" 
  if (a<10) print #1,\"\" 
next a 
dim count(10) 
do 
  x=int(ran(10)) 
  i=i+1 
  if (mod(i,1000)=0) print \".\" 
  count(x)=count(x)+1 
  curr$=right$(\"00000000\"+str$(count(x)),8) 
  seek #1,9*x,\"begin\" 
  print #1,curr$; 
loop 
          
This example increments randomly one of ten counters (in the array count()); however, the result is always kept and updated within the file count.dat, so even in case of an unexpected interrupt, the result will not be lost."

//==============================

DATA "SHORTCUT", "GUI","SHORTCUT View$, Shortcut$, MyMessage$","Sends a message when a specified shortcut key is pressed

Synopsis:

SHORTCUT View$, Shortcut$, MyMessage$

Description:

For adding keyboard shortcuts to your program that are not related to menu entries, use the shortcut command. It sends the message MyMessage$ whenever the key combination Shortcut$ is pressed and the view named View$ has focus.

The first letter of Shortcut$ specifys the shortcut key for this menu item. It is always combined with the command key which is ALT normally (or CTRL when CTRL and ALT are switched in the preferences). E.g. consider a Shortcut$ of \"O\" then ALT-O will send MyMessage$ to the message queue. Additionaly to the command key you can specify further modifiers which are set before the shortcut letter."

//==============================

DATA "SIG()", "BSC","a=SIG(b)","Return the sign of its argument

Synopsis
 
a=sig(b) 

Description

Return +1, -1 or 0, if the single argument is positive, negative or zero.

Example
 
clear screen 
dim c$(3):c$(1)=\"red\":c$(2)=\"white\":c$(3)=\"green\" 
do 
  num=ran(100)-50 
  print color(c$(2+sig(num))) num 
loop 
          
This program prints an infinite sequence of random number; positive numbers are printed in green, negative numbers are printed red (an exact zero would be printed white)."

//==============================

DATA "SIN()", "BSC","y=SIN(angle)","Return the sine of its single argument

Synopsis
 
y=sin(angle) 

Description

The sin-function expects an angle (in radian, not degree) and returns its sine."

//==============================

DATA "SLIDER", "GUI","SLIDER x1,y1 TO x2,y2, ID$, Label$, Min, Max, View$","Add a slider

Synopsis

SLIDER x1,y1 TO x2,y2, ID$, Label$, Min, Max, View$
SLIDER x1,y1 TO x2,y2, ID$, Label$, Min, Max, Option$, View$

Option$=\"block/triangle, horizontal/vertical\"

Description

Add a slider with a minimum and and a maximum value (Min, Max)."

//==============================

DATA "SLIDER COLOR", "GUI","SLIDER COLOR Slider$, Part$, r,g,b","Set slider\'s color

Synopsis

SLIDER COLOR Slider$, Part$, r,g,b

Part$=\"barcolor\"
Part$=\"fillcolor\""

//==============================

DATA "SLIDER GET", "GUI","Value=SLIDER GET Slider$","Get the currently selected value of the slider.

Synopsis

Value=SLIDER GET Slider$

Description

Get the currently selected value of the slider."

//==============================

DATA "SLIDER LABEL", "GUI","SLIDER LABEL Slider$, StartLabel$, EndLabel$","Set start and end limit labels
  
Synopsis
  
SLIDER LABEL Slider$, StartLabel$, EndLabel$"

//==============================

DATA "SLIDER SET", "GUI","SLIDER SET Slider$, Value","Set the slider Value

Synopsis

SLIDER SET Slider$, Value"

//==============================

DATA "SLIDER SET {HASHMARKS}", "GUI","SLIDER SET Silder$, Location$, Count","Set the hashmarks

Synopsis

SLIDER SET Silder$, Location$, Count

Description

Set the hashmarks.

Location$=\"none/bottom/top/both\" use hashmarks for horizontal sliders
Location$=\"none/left/rigth/both\" use hashmarks for vertical sliders
Count=number of hashmarks"

//==============================

DATA "SOUND PLAY", "GUI","ID=SOUND PLAY SoundFile$","Play a sound

Synopsis

ID=SOUND PLAY SoundFile$

Description

Play the sound file SoundFile$.

You are given an ID to handle the playback later in your code."

//==============================

DATA "SOUND STOP ", "GUI","SOUND STOP ID","Stop a sound

Synopsis

SOUND STOP ID

Description

Stop the sound with ID"

//==============================

DATA "SOUND WAIT", "GUI","SOUND WAIT ID","Wait for a sound to finish

Synopsis

SOUND WAIT ID

Description

Waits until the sound with ID is finished playing."

//==============================

DATA "SPINCONTROL", "GUI","SPINCONTROL x,y, ID$, Label$, Min, Max, Step, View$","Create a spincontrol

Synopsis

SPINCONTROL x,y, ID$, Label$, Min, Max, Step, View$

Description

Set a spin control for the range (Min,Max), counting by Step."

//==============================

DATA "SPINCONTROL GET", "GUI","Value=SPINCONTROL GET SpinControl$","Get the current spin control value.

Synopsis

Value=SPINCONTROL GET SpinControl$"

//==============================

DATA "SPINCONTROL SET", "GUI","SPINCONTROL SET SpinControl$, Value","Set the spin control

Synopsis

SPINCONTROL SET SpinControl$, Value

Description

Set the spin control SpinControl$ to Value."

//==============================

DATA "SPLIT()", "BSC","num=SPLIT(a$,w$())","Split a string into many strings

Synopsis
 
dim w$(10) 
... 
num=split(a$,w$()) 
num=split(a$,w$(),s$) 

Description

The split-function requires a string (containing the text to be split), a reference to a string-array (which will receive the resulting strings, i.e. the tokens) and an optional string (with a set of characters, at which to split, i.e. the delimiters).

The split-function regards its first argument (a string) as a list of tokens separated by delimiters and it will store the list of tokens within the array-reference you have supplied. Note, that the array, which is passed as a reference (w$() in the synopsis), will be resized accordingly, so that you don\'t have to figure out the number of tokens in advance. The element at position zero (i.e. w$(0)) will not be used.

Normally (i.e. if you omit the third, which is the delimiter-argument) the function will regard space or tab as delimiters for tokens; however by supplying a third argument, you may split at any single of the characters within this string. E.g. if you supply \":;\" as the third argument, then colon (:) or semicolon (;) will delimit tokens.

Note, that a sequence of separator-characters will produce a sequence of empty tokens; that way, the number of tokens returned will always be one plus the number of separator characters contained within the string. Refer to the closely related token-function, if you do not like this behaviour. In some way, the split-function focuses on the separators (other than the token-function, which focuses on the tokens), hence its name.

The second argument is a reference on a string-array, where the tokens will be stored; this array will be expanded (or shrinked) to have room for all tokens, if necessary.

The first argument finally contains the text, that will be split into tokens. The split-function returns the number of tokens that have been found.

Please see the examples below for some hints on the exact behaviour of the split-function and how it differs from the token-function:

Example
 
print \"This program will help you to understand, how the\" 
print \"split()-function exactly works and how it behaves\" 
print \"in certain special cases.\" 
print 
print \"Please enter a line containing tokens separated\" 
print \"by either \'=\' or \'-\'\" 
dim t$(10) 
do 
  print 
  input \"Please enter a line: \" l$ 
  num=split(l$,t$(),\"=-\") 
  print num,\" Tokens: \"
  for a=1 to num 
    if (t$(a)=\"\") then 
      print \"(EMPTY)\" 
    else 
      print t$(a); 
    endif 
    if (a<num) print \",\" 
  next a 
  print 
loop 
          
This program prints the following output:
 
Please enter a line: a 
1 Tokens: a 

Please enter a line: 
0 Tokens: 

Please enter a line: ab 
1 Tokens: ab 

Please enter a line: a=b 
2 Tokens: a,b 

Please enter a line: a- 
2 Tokens: a,(EMPTY) 

Please enter a line: a-= 
3 Tokens: a,(EMPTY),(EMPTY) 

Please enter a line: =a- 
3 Tokens: (EMPTY),a,(EMPTY) 

Please enter a line: a=-b 
3 Tokens: a,(EMPTY),b 

Please enter a line: a--b- 
4 Tokens: a,(EMPTY),b,(EMPTY) 

Please enter a line: -a==b-c== 
7 Tokens: (EMPTY),a,(EMPTY),b,c,(EMPTY),(EMPTY)"

//==============================

DATA "SPLITVIEW", "GUI","SPLITVIEW x1,y1 TO x2,y2, ID$, IsVerticalSplit, NormalStyle, View$","Create a split view

Synopsis

SPLITVIEW x1,y1 TO x2,y2, ID$, IsVerticalSplit, NormalStyle, View$

Description

Set up the new view ID$ and split it into two new views ID$+\"1\" and ID$+\"2\".

If IsVerticalSplit=true, a vertical splitter is set,
if IsVerticalSplit=false, a horizontal splitter is set.
If NormalStyle=true, the splitter is 10 pixels thick,
If NormalStyle=false, the splitter is 4 pixels thick."

//==============================

DATA "SPLITVIEW GET", "GUI","Position=SPLITVIEW GET SplitView$, \"Divider\"","Get splitter position

Synopsis

Position=SPLITVIEW GET SplitView$, \"Divider\"

Description

Get the current position of the divider."

//==============================

DATA "SPLITVIEW SET {MINSIZE}", "GUI","SPLITVIEW SET SplitView$ \"MinimumSizes\", LeftOrTop, RightOrBottom","Set minimum sizes of views

Synopsis

SPLITVIEW SET SplitView$ \"MinimumSizes\", LeftOrTop, RightOrBottom

Description

Set the minimum sizes of the left (or top) view and the right (or bottom) view."

//==============================

DATA "SPLITVIEW SET {POSITION}", "GUI","SPLITVIEW SET SplitView$ \"Divider\", Position","Set divider position

Synopsis

SPLITVIEW SET SplitView$ \"Divider\", Position

Description

Set the position of the divider, default is the half of the total split view."

//==============================

DATA "SQR()", "BSC","a=SQR(b)","Compute the square of its argument

Synopsis
 
a=sqr(b) 

Description

The sqr-function computes the square of its numerical argument (i.e. it multiplies its argument with itself).

Example
 
for a=1 to 10 
  print a,sqr(a),a**2 
next a 
          
As you may see from the output, sqr can be written as **2 (or ^2) too."

//==============================

DATA "SQRT()", "BSC","SQRT(a)","Compute the square root of its argument

Description

The sqrt-function computes the square root of its numerical argument.

Example
 
for a=1 to 5 
  print a,sqrt(a),a**(1/2) 
next a 
          
As you may see from the output, sqrt can be written as **(1/2) (or ^(1/2)) too."

//==============================

DATA "STACKVIEW", "GUI","STACKVIEW x1,y1 TO x2,y2, ID$, NumberOfViews, View$","Create views above each other

Synopsis:

STACKVIEW x1,y1 TO x2,y2, ID$, NumberOfViews, View$

Description:

Stackview creates several views on top of each other. All views have the same coordinates (x1,y1)-(x2,y2) on the view named View$. NumberOfViews specifies how many views should be created. Obviously it should be greater or equal to 2 to be useful. 

All stacked views get a own ID which is ID$ and the number of the view. E.g. if ID$=\"MyStack\" and NumberOfViews=3, then the stacked views have the IDs \"MyStack1\", \"MyStack2\" and \"MyStack3\". Use the command stackview set to switch between these views.

Layout:

The stackview and all views it contains will follow all sides as in standard layout.

Design:
		
You can think of a stackview as a tabview without tabs. Therefore it is up to the programmer to provide a method to switch between the stacked views."

//==============================

DATA "STACKVIEW GET", "GUI","ViewNumber=STACKVIEW GET StackView$","Get the number of the shown view in a stackview

Synopsis:

ViewNumber=STACKVIEW GET StackView$

Description:

Stackview get will return you the number of the currently shown view. Remember: Numbering starts with 1."

//==============================

DATA "STACKVIEW SET", "GUI","STACKVIEW SET StackView$, ViewNumber","Set the shown view in a stackview

Synopsis:

STACKVIEW SET StackView$, ViewNumber

Description:

To switch the views of a stackview, you have to use this command. Simply provide it with the ID of the stackview (here: StackView$) and the number of the view you want it to show. Remember: The first view on the stack has the number 1. If you provide an invalid number, nothing will happen."

//==============================

DATA "STATIC", "BSC","STATIC a","Preserves the value of a variable between calls to a subroutine

Synopsis
 
sub foo() 
  static a 
  ... 
end sub 

Description

The static keyword can be used within subroutines to mark variables as static. This has two effects: First, the variable is local to the subroutine, i.e. its value is not know outside the subroutine (this is the effect of the local keyword). Second, the static-keyword arranges things, so that the variable keeps its value between invocations of the subroutine (this is different from the local-keyword).

Example
 
foo() 
foo() 
foo() 

sub foo() 
  static a 
  local b 
  a=a+1 
  b=b+1 
  print a,b 
end sub 
          
This program shows the difference between static and local variables within a subroutine; it produces this output:
1 1 
2 1 
3 1 
The output shows, that the static variable a keeps its value between subroutine calls, whereas b is initialized with the value 0 at every call to the subroutine foo."

//==============================

DATA "STATUSBAR", "GUI","STATUSBAR x1, y1 TO x2, y2, ID$, LeftLabel$, RightLabel$, View$","Create a progress or status bar

Synopsis:

STATUSBAR x1, y1 TO x2, y2, ID$, LeftLabel$, RightLabel$, View$

Description:

Use the statusbar to visualize the progress of a long computation process, e.g. installation or search. The statusbar is simply set up with the identifier ID$ at (x1,y1) to (x2,y2) on the view named View$. It takes two labels, LeftLabel$ is shown on the left side above of the statusbar and RightLabel$ is shown on the right side above of the statusbar.

Layout:

The statusbar will follow the lower right corner of a window in standard layout.

Design:

The statusbar should give the user an idea how long a specific process takes. This of course is only useful for processes that take some time. Also having a statusbar that stays for one minute at 5% and then immediatly jumps to 100% should be avoided although this sometimes is not in control of the programmer."

//==============================

DATA "STATUSBAR SET", "GUI","STATUSBAR SET Statusbar$, LeftLabel$, RightLabel$, State","Set the value for a status bar

Synopsis:

STATUSBAR SET Statusbar$, LeftLabel$, RightLabel$, State

Description:

Use statusbar set to actually set the bar to a specific value. This value named State here is a number between 0 and 100. Thus, 0 is the empty statusbar while 100 is the full statusbar. During your update, you can change the labels at the left and right (LeftLabel$ and RightLabel$).

OTHER USES

STATUSBAR SET ID$, r, g, b
Set the color of the statusbar

STATUSBAR SET ID$, BarHeight
Set the height of the statusbar"

//==============================

DATA "STEP", "BSC","for x=1 to 1000 STEP y","Specifies the increment step in a for-loop

Synopsis
 
for a=1 to 10 step 3 
  ... 
next a 

Description

Specify, by which amount the loop-variable of a for-loop will be incremented at each step.

The step (as well as the lower and upper bound) are computed anew in each step; this is not common, but possible, as the example below demonstrates.

Example
 
for x=1 to 1000 step y 
  y=x+y 
  print x,\" \",y,\" \"
next x 
print 
          
This program computes the fibonacci numbers between 1 and 1000.

Note: Unlike some other BASIC dialects, yab will not automatically decrease the FOR numerical variable. This will not work:

FOR f=10 to 1

But you can make this work using a negative STEP value:

FOR f=10 to 1 step -1"

//==============================

DATA "STR$()", "BSC","a$=STR$(a)","Convert a number into a string

Synopsis
 
a$=str$(a) 

Description

The str$-function accepts a numeric argument and returns it as a string."

//==============================

DATA "SUB", "BSC","SUB foo(bar,baz$)","Declare a user defined subroutine

Synopsis
 
foo(2,\"hello\") 
... 
sub foo(bar,baz$) 
  ... 
  return qux 
  ... 
end sub 

Description

The sub-keyword starts the definition of a user defined subroutine. With user defined subroutines you are able to somewhat extend yab with your own commands or functions. A subroutine accepts arguments (numbers or strings) and returns a number or a string (however, you are not required to assign the value returned to a variable).

The name of the subroutine follows after the keyword sub. If the name (in the synopsis: foo) ends on a \'$\', the subroutine should return a string (with the return-statement), otherwise a number.

After the name of the subroutine yab requires a pair of braces; within those braces you may specify a list of parameters, for which values can (but need not) be included when calling the subroutine. If you omit one of those parameters when calling such a subroutine, it assumes the value zero (for numeric parameters) or the empty string (for string-parameters). However with peek(\"argument\") you may find out, how many arguments have really been passed while calling the subroutine.

Parameters of a subroutine are always local variables (see the keyword local for more explanation).

From within the subroutine you may return any time with the keyword return; along with the return-keyword you may specify the return value. Note that more than one return is allowed within a single subroutine.

Finally, the keyword end sub ends the subroutine definition. Note, that the definition of a subroutine need not appear within the program before the first call to this sub.

Note

As braces have two uses in yab (i.e. for supplying arguments to a subroutine as well as to list the indices of an array). yab can not tell apart an array from a subroutine with the same name. Therefore you cannot define a subroutine with the same name as an array !

Example
 
p=2 
do 
  if (is_prime(p)) print p 
  p=p+1 
loop 
sub is_prime(a) 
  local b 
  for b=2 to sqrt(a) 
    if (frac(a/b)=0) return false 
  next b 
  return true 
end sub 
          
This example is not the recommended way to compute prime numbers. However, it gives a nice demonstration of using a subroutine."

//==============================

DATA "SUBMENU", "GUI","SUBMENU MenuHead$, MenuItem$, SubMenuItem$, Shortcut$, View$","Create a submenu item for an existing menu

Synopsis:

SUBMENU MenuHead$, MenuItem$, SubMenuItem$, Shortcut$, View$

Description:

To have a submenu to an existing menu, you have to specify the menu title MenuHead$, the menu item that will contain the submenu MenuItem$ and the new name for the submenu entry SubMenuItem$. If MenuHead$ or MenuItem$ do not exist, they are created. Similar to the menu command the submenu item can be called by a shortcut key Shortcut$."

//==============================

DATA "SUBMENU SET", "GUI","SUBMENU SET MenuHead$, MenuItem$, SetRadioMode, View$","Set options for the submenu

Synopsis:
SUBMENU SET MenuHead$, MenuItem$, SetRadioMode, View$
SUBMENU SET MenuHead$, MenuItem$, SubMenuItem$, Option$, View$ 

Description:
This lets you set some options for the second level menu. 

Given a MenuHead$ and a MenuItem$ you can put the entire submenu in radio mode, i.e. only one item can be selected at a time. Set SetRadioMode to true to allow radio mode, set it to false to return to a normal behavior again. Note, you have to select the first item yourself after switching to radio mode. Use the following option to do so.

Given a MenuHead$, a MeniItem$ and a SubMenuItem$ you can disable or enable the item or you can select it by putting a mark to it or remove the mark again. Thus the following options are valid:

Option$=\"Disable|Enable|Mark|Plain\""

//==============================

DATA "SWITCH", "BSC","SWITCH x","Select one of many alternatives depending on a value

Synopsis
 
switch a 
  case 1 
  case 2 
  ... 
end switch 

... 

switch a$ 
  case \"a\" 
  case \"b\" 
end switch 

Description

The switch-statment selects one of many codepaths depending on a numerical or string expression. I.e. it takes an expression (either numeric or string) and compares it with a series of values, each wrapped within a case-clause. If the expression equals the value given in a case-clause, the subsequent statements are executed.

The default-clause allows to specify commands, which should be executed, if none of case-clauses matches.

Note, that many case-clauses might be clustered (e.g. case \"a\":case \"b\":case \"c\"). Or put another way: You need a break-statement at the end of a case-branch, if you do not want to run into the next case.

Example
 
input \"Please enter a single digit: \" n 
switch n 
  case 0:print \"zero\":break 
  case 1:print \"one\":break 
  case 2:print \"two\":break 
  case 3:print \"three\":break 
  case 4:print \"four\":break 
  case 5:case 6: case 7:case 8:case 9 
    print \"Much !\":break 
  default:print \"Hey ! That was more than a single digit !\" 
end switch 
          
This example translates a single digit into a string; note, how the cases 5 to 7 are clustered."

//==============================

DATA "SYSTEM$()", "BSC","print SYSTEM$(\"dir\")","Hand a statement over to your operating system and return its output

Synopsis
 
print system$(\"dir\") 

Description

The system$-command accepts a single string argument, specifying a command, that can be found and executed by your operating system. It returns the output of this command as one big string.

Example
 
input \"Please enter the name of a directory: \" d$ 
print 
print \"This is the contents of the \'\"+d$+\"\':\" 
print system$(\"dir \"+d$) 
          
This example lists the contents of a directory, employing the dir-command (which is about the only program, that is known under Unix as well as Windows)."

//==============================

DATA "SYSTEM()", "BSC","SYSTEM(\"bar\")","Hand a statement over to your operating system and return its exitcode

Synopsis
 
ret=system(\"foo\") 
system(\"bar\") 

Description

The system-command accepts a single string argument, which specifies a command to be executed. The function will return the exitcode of the command; its output (if any) will be lost.

Example
 
print \"Please enter the name of the file, that should be deleted.\" 
input f$ 
if (system(\"rm \"+f$+\" >/dev/null 2>&1\")) then 
  print \"Error !\" 
else 
  print \"okay.\" 
endif"

//==============================

DATA "TABVIEW", "GUI","TABVIEW x1,y1 TO x2,y2, ID$, Option$, View$","Create a Tabbed View

Synopsis

TABVIEW x1,y1 TO x2,y2, ID$, Option$, View$

Description 

The Option$=\"top, bottom\" is ZETA only, Haiku users have to set this too, but the Haiku-tabs always stay on the top currently."

//==============================

DATA "TABVIEW ADD", "GUI","TABVIEW ADD TabView$, TabName$","Add a tab

Synopsis

TABVIEW ADD TabView$, TabName$

Description

For each tab, a new view is created; you can add widgets or draw on these views as ususal.

The ids for the views are TabView$+\"1\" for the first, TabView$+\"2\" for the second view, etc."

//==============================

DATA "TABVIEW GET", "GUI","TabNumber=TABVIEW GET TABVIEW$","Get the current opened tab.

Synopsis

TabNumber=TABVIEW GET TABVIEW$"

//==============================

DATA "TABVIEW SET", "GUI","TABVIEW SET TabView$, TabNumber","Open a tab

Synopsis

TABVIEW SET TabView$, TabNumber

Description

Open the tab number TabNumber."

//==============================

DATA "TAN()", "BSC","foo=TAN(bar)","Return the tangens of its argument

Synopsis
 
foo=tan(bar) 

Description

The tan-function computes the tangens of its arguments (which should be specified in radian).

Example
 
for a=0 to 45 
  print tan(a*pi/180) 
next a 
          
This example simply prints the tangens of all angles between 0 and 45 degree."

//==============================

DATA "TELL", "BSC","position=TELL(#1) ","Get the current position within an open file

Synopsis
 
open #1,\"foo\" 
  ... 
position=tell(#1) 

Description

The tell-function requires the number of an open file as an argument. It returns the position (counted in bytes, starting from the beginning of the file) where the next read will start.

Example
 
open #1,\"foo\",\"w\" 
print #1 \"Hello World !\" 
close #1 

open #1,\"foo\" 
seek #1,0,\"end\" 
print tell(#1) 
close 1 
          
This example (mis)uses tell to get the size of the file. The seek positions the file pointer at the end of the file, therefor the call to tell returns the total length of the file."

//==============================

DATA "TEXT {GUI}", "GUI","TEXT x,y, ID$, Text$, View$","Write permanent text labels

Synopsis

TEXT x,y, ID$, Text$, View$
TEXT x1,y1 TO x2,y2, ID$, Text$, View$

Description

Displays Text$ at position (x,y) on View$. This cannot be flushed like DRAW TEXT and is meant for permanent labels.

Furthermore you can set the alignment for this command with the TEXT SET command."

//==============================

DATA "TEXT SET", "GUI","TEXT SET Text$, Alignment$","Set text alignment

Synopsis

TEXT SET Text$, Alignment$

Description

Set the alignment of Text$ to either \"align-left\", \"align-center\" or \"align-right\"."

//==============================

DATA "TEXTCONTROL", "GUI","TEXTCONTROL x1,y1 TO x2,y2, ID$, Label$, Text$, View$","Open a 1-line text control

Synopsis

TEXTCONTROL x1,y1 TO x2,y2, ID$, Label$, Text$, View$

Description

Opens a textcontrol from (x1,y1) to (x2,y2) with Label$ and preset Text$ on View$"

//==============================

DATA "TEXTCONTROL CLEAR", "GUI","TEXTCONTROL CLEAR TextControl$"," Clear the contents of a textcontrol

Synopsis

TEXTCONTROL CLEAR TextControl$"

//==============================

DATA "TEXTCONTROL GET$", "GUI","Text$=TEXTCONTROL GET$ TextControl$","Get text from a Textcontrol

Synopsis

Text$=TEXTCONTROL GET$ TextControl$

Description

Get the entry of the text control TextControl$. Even works, when Return was not pressed."

//==============================

DATA "TEXTCONTROL SET", "GUI","TEXTCONTROL SET TextControl$, Text$","Set the text in a Textcontrol

Synopsis

TEXTCONTROL SET TextControl$, Text$

Description

Set the text control\'s text to Text$."

//==============================

DATA "TEXTCONTROL SET {PASSWD}", "GUI","TEXTCONTROL SET TextControl$, IsPassword","Obscure typing in a Textcontrol

Synopsis

TEXTCONTROL SET TextControl$, IsPassword

Description

IsPassword=false Normal typing
IsPassword=true Hide typing"

//==============================

DATA "TEXTEDIT", "GUI","TEXTEDIT x1,y1 TO x2,y2, ID$, ScrollbarType, View$","Create a multiline text editor

Synopsis

TEXTEDIT x1,y1 TO x2,y2, ID$, ScrollbarType, View$

Description

Opens an editor at (x1,y1) to (x2,y2) with ID$ (not displayed) on View$. For the scrollbartypes look at the listbox entry.

TEXTEDIT also follows all sides in standard layout."

//==============================

DATA "TEXTEDIT ADD", "GUI","TEXTEDIT ADD TextEdit$, Text$","Add text to a Textedit

Synopsis

TEXTEDIT ADD TextEdit$, Text$

Description

Insert Text$ in the textedit TextEdit$ on View$."

//==============================

DATA "TEXTEDIT CLEAR", "GUI","TEXTEDIT CLEAR TextEdit$","Clears text from a Textedit

Synopsis

TEXTEDIT CLEAR TextEdit$

Description

Clears the text from the textedit TextEdit$ on View$."

//==============================

DATA "TEXTEDIT COLOR", "GUI","TEXTEDIT COLOR TextEdit$, Option$, Command$","Change the colors in a Textedit

Synopsis

TEXTEDIT COLOR TextEdit$, Option$, Command$

Option$=\"color1, color2, color3, color4, char-color\", Command$

Add the command Command$ to the list of words that are checked for syntax highlighting

The char-color behaves differently and highlights only the first character of Command$ (this happens after the highlighting of the other colors).

TEXTEDIT COLOR TextEdit$, Option$, r,g,b

Option$=\"bgcolor, textcolor, color1, color2, color3, color4, char-color\", r,g,b

Default colors are:
bgcolor=255,255,255 (white)
textcolor=0,0,0 (black)
color1=0,0,255 (blue)
color2=255,0,0 (red)
color3=0,250,0 (green)
color4=185,185,185 (gray)
char-color=200,0,255 (magenta)"

//==============================

DATA "TEXTEDIT GET", "GUI","LineNumber=TEXTEDIT GET TextEdit$, Option$","Retrieve numerical info from a TextEdit

Synopsis

Width=TEXTEDIT GET TextEdit$, \"Line-Width\", LineNumber
Height=TEXTEDIT GET TextEdit$, \"Line-Height\", LineNumber

LineNumber=TEXTEDIT GET TextEdit$, Option$, Search$

LineNumber=Option$=\"Find\", Search$
LineNumber=Option$=\"Case-Sensitive-Find\", Search$

LineNumber=TEXTEDIT GET TextEdit$, Option$
IsChanged=Option$=\"hasChanged\"
LineNumber=Option$=\"countlines\"
LineNumber=Option$=\"currentline\"
YOffset=Option$=\"vertical-scrollbar\"
XOffset=Option$=\"horizontal-scrollbar\"
Position=Option$=\"cursor-position\"
TextLength=Option$=\"textlength\"
PhysicalLines=Option$=\"countphysicallines\"
"
//==============================

DATA "TEXTEDIT GET$", "GUI","EnteredText$=TEXTEDIT GET$ TextEdit$","Retrieve text from a Texedit

Synopsis

EnteredText$=TEXTEDIT GET$ TextEdit$

EnteredText$ holds the text of the textedit ID$ on View$

SelectedText$=TEXTEDIT GET$ TextEdit$, Option$

Returns the current selected text, can be empty of course.
Option$=\"Selection\"

TextLine$=TEXTEDIT GET$ TextEdit$, LineNumber"

//==============================

DATA "TEXTEDIT SET", "GUI","TEXTEDIT SET TextEdit$, Option$","Set Textedit parameters

Synopsis

TEXTEDIT SET TextEdit$, Option$
Applies an option to the textedit TextEdit$ on View$.
Option$=\"cut, copy, paste, clear, select-all, undo\"

TEXTEDIT SET TextEdit$, Option$, Value
Option$=\"autoindent\", true/false
Option$=\"wordwrap\", true/false
Option$=\"editable\", true/false
Option$=\"color-case-sensitive\", true/false
Option$=\"changed\", true/false
Option$=\"gotoline\", LineNumber
Option$=\"select\", LineNumber
Option$=\"tabwidth\", TabWidth
Option$=\"textwidth\", TextWidth
Option$=\"autocomplete-start\"
Option$=\"has-autocompletion\"
Default options are:
autoindent=false
wordwrap=true
editable=true
color-case-sensitive=false
changed=false
has-autocompletion=true
autocomplete-start=4

TEXTEDIT SET TextEdit$, Option$, Value$
Option$=\"autocomplete\"
Add a word Value$ to the auto-completion list.
Option$=\"font\"
Set the font to Value$ (similar to DRAW SET); default is \"system-plain\"

TEXTEDIT SET TextEdit$, \"cursor\", offset
Moves the cursor to the offset (bytes from the beginning) indicated."

//==============================

DATA "TEXTURL", "GUI","TEXTURL x,y, ID$, Label$, Address$, View$","Set a TextURL

Synopsis

TEXTURL x,y, ID$, Label$, Address$, View$

Description

Set the web/email/ftp address at (x,y) with the label Label$ and the url Address$.

This widget is quite nice, it launches the appropriate application when clicked, it supports a right-click popup-menu and you can drag the url to create either a person file or a bookmark.

Email can be either of the style: \"mailto:foo@bar.com\" or just \"foo@bar.com\"

A web url starts either with \"http://\" or with \"file://\"

And a ftp address starts with \"ftp://\""

//==============================

DATA "TEXTURL COLOR", "GUI","TEXTURL COLOR TextURL$, Option$, r,g,b","Set the colors of a TextURL

Synopsis

TEXTURL COLOR TextURL$, Option$, r,g,b

Description

Set the colors for the URL. Valid options are:
\"Label\" for the color of the label,
\"Click\" for the color of the label, when clicked and
\"Mouse-over\" for the color of the label, when the mouse is moved over the label."

//==============================

DATA "THEN", "BSC","if (...) THEN","Tell the long from the short form of the if-statement

Synopsis
 
if (a<b) then 
  ... 
endif 

Description

The keyword then is part of the if-statement; please see there for further explanations. However, not every if-statement requires the keyword then: If the keyword then is present, the if-clause may extend over more than one line, and the keyword endif is required to end it. If the keyword then is not present, the if-statement extends up to the end of the line, and any endif would be an error.

Example
 
if (1<2) then 
  print \"Hello \"
endif 

if (2<3) print \"world\" 
if (2<1) 
  print \"!\" 
          
This example prints Hello world. Note, that no exclamation mark (!) is printed, which might come as a surprise and may be changed in future versions of yab."

//==============================

DATA "THREAD GET", "GUI","Id=THREAD GET Option$, Program$","Get a team or thread ID

Synopsis

Id=THREAD GET Option$, Program$

Description

Option$=\"TeamID\" returns the team ID for the program named Program$
Specify the whole path with parameters (only the first 64 characters are important) for the team, the first team with this path and parameters will be returned.

Option$=\"ThreadID\" returns the thread ID for the program named Program$
Specify the program name, the first thread with this name will be returned. Returns -1 when the program was not found."

//==============================

DATA "THREAD REMOVE", "GUI","Success=THREAD REMOVE Option$, ID","Kill a thread

Synopsis

Success=THREAD REMOVE Option$, ID

Option$=\"TeamID\" kills the team with number ID
Option$=\"ThreadID\" kills the thread with number ID

Returns True when successful and False otherwise.

Note: You can crash your system with this command! If you don\'t know what this command is meant for, then don\'t use it! "

//==============================

DATA "TIME$", "BSC","print TIME$ ","Return a string containing the current time

Synopsis
 
print time$ 
print time$() 

Description

The time$ function returns the current time in four fields separated by hyphens \'-\'. The fields are:

The current hour in the range from 0 to 23, padded with zeroes (e.g. 00 or 04) to a length of two characters.

The number of minutes, padded with zeroes.

The number of seconds, padded with zeroes.

The number of seconds, that have elapsed since the program has been started. This value encreases as long as your program runs and is therefore unbound and not padded with zeroes.

At the time of writing this documentation, time$ returns 22-58-53-0. Note, that the first three of the four fields returned by time$ have a fixed width; therefore it is easy to extract some fields with the usual string-functions mid$ (and others).

Example
 
print \"Hello it is \",time$ 
print \"An empty for-loop with ten million iterations takes \"
s=val(mid$(time$,10)) 
for a=1 to 10000000:next a 
e=val(mid$(time$,10)) 
print e-s,\" seconds\" 
          
This program benchmarks the for-loop and uses the fourth field of the string returned by time$."

//==============================

DATA "TO", "BSC","for a=1 TO 100 step 2","This keyword appears as part of other statements

Synopsis
 
for a=1 to 100 step 2 
  ... 
next a 

line x,y to a,b "

//==============================

DATA "TOKEN()", "BSC","num=TOKEN(a$,w$())","Split a string into multiple strings

Synopsis
 
dim w$(10) 
... 
num=token(a$,w$()) 
num=token(a$,w$(),s$) 

Description

The token-function accepts a string (containing the text to be split), a reference to a string-array (which will receive the resulting strings, i.e. the tokens) and an optional string (with a set of characters, at which to split, i.e. the delimiters).

The token-function regards its first argument as a list of tokens separated by delimiters and it will store the list of tokens within the array-reference that has been supplied. Note, that the array, which is passed as a reference (w$() in the synopsis), will be resized accordingly, so that you don\'t have to figure out the number of tokens in advance. The element at position zero (i.e. w$(0)) will not be used.

Normally (i.e. if you omit the third, the delimiter-argument) the function will regard space or tab as delimiters for tokens; however by supplying a third argument, you may split at any single of the characters within this string. E.g. if you supply \":;\" as the third argument, then colon (:) or semicolon (;) will delimit tokens.

Note, that token will never produce empty tokens, even if two or more separators follow in sequence. Refer to the closely related split-function, if you do not like this behaviour. In some way, the token-function focuses on the tokens and not on the separators (other than the split-function, which focuses on the separators).

The second argument is a reference on a string-array, where the tokens will be stored; this array will be expanded (or shrinked) as necessary to have room for all tokens.

The first argument finally contains the text, that will be split into tokens. The token-function returns the number of tokens, that have been found.

Please see the examples below for some hints on the exact behaviour of the token-function and how it differs from the split-function:

Example
 
print \"This program will help you to understand, how the\" 
print \"token()-function exactly works and how it behaves\" 
print \"in certain special cases.\" 
print 
print \"Please enter a line containing tokens separated\" 
print \"by either \'=\' or \'-\'\" 
dim t$(10) 
do 
  print 
  input \"Please enter a line: \" l$ 
  num=token(l$,t$(),\"=-\") 
  print num,\" Tokens: \"
  for a=1 to num 
    if (t$(a)=\"\") then 
      print \"(EMPTY)\" 
    else 
      print t$(a); 
    endif 
    if (a<num) print \",\" 
  next a 
  print 
loop 
          
This program prints the following output: 

Please enter a line: a 
1 Tokens: a 

Please enter a line: 
0 Tokens: 

Please enter a line: ab 
1 Tokens: ab 

Please enter a line: a=b 
2 Tokens: a,b 

Please enter a line: a- 
1 Tokens: a 

Please enter a line: a-= 
1 Tokens: a 

Please enter a line: =a- 
1 Tokens: a 

Please enter a line: a=-b 
2 Tokens: a,b 

Please enter a line: a--b- 
2 Tokens: a,b 

Please enter a line: -a==b-c== 
3 Tokens: a,b,c"

//==============================

DATA "TOOLTIP", "GUI","TOOLTIP View$, Text$","Add a tooltip to a view or widget

Synopsis:

TOOLTIP View$, Text$

Description:

A tooltip is a small popup that appears when the mouse moves over a widget to give some more information.

To have a tooltip to any sort of view or widget named View$, simply add the tooltip string Text$. Text$ should be only one line without linebreaks. If Text$ is set to the empty string \"\", the tooltip is removed again from View$.

EDIT: You can have multiline tooltips using \\n, but be sure to test them thoroughly!

Design:

Tooltips can be of great help for the user to understand icons or buttons and the like. However, it does not make sence to add a tooltip \"New\" to a button that already has the label \"New\". Rather be more descriptive and provide additional information, e.g. \"Open a new image file\". For tooltips only the first word should be written with a capital letter.

And remember, too many tooltips can be annoying too."

//==============================

DATA "TREEBOX", "GUI","TREEBOX x1,y1 to x2,y2, ID$, ScrollbarType, View$","Add a treebox

Synopsis

TREEBOX x1,y1 to x2,y2, ID$, ScrollbarType, View$

Description

Adds a tree box. This behaves just like a LISTBOX but is able to show nested trees."

//==============================

DATA "TREEBOX ADD", "GUI","TREEBOX ADD TreeBox$, RootItem$","Add items to a treebox

Synopsis

TREEBOX ADD TreeBox$, RootItem$

Add the item RootItem$ to the top level of the tree.

TREEBOX ADD TreeBox$, HeadItem$, ListItem$, IsExpanded

Add the item ListItem$ under the level of HeadItem$ of the tree."

//==============================

DATA "TREEBOX CLEAR", "GUI","TREEBOX CLEAR TreeBox$","Clear a treebox

Synopsis

TREEBOX CLEAR TreeBox$"

//==============================

DATA "TREEBOX COLLAPSE", "GUI","TREEBOX COLLAPSE TreeBox$, Head$","Collapse a treebox item

Synopsis

TREEBOX COLLAPSE TreeBox$, Head$

Description

Collapses Head$ in TreeBox$."

//==============================

DATA "TREEBOX COUNT", "GUI","n=TREEBOX COUNT TreeBox$","Count the entries in a treebox

Synopsis

n=TREEBOX COUNT TreeBox$

Description

Returns the number of entries in TreeBox$"

//==============================

DATA "TREEBOX EXPAND", "GUI","TREEBOX EXPAND TreeBox$, Head$","Expand an item in a treebox

Synopsis

TREEBOX EXPAND TreeBox$, Head$

Description

Expands Head$ in TreeBox$."

//==============================

DATA "TREEBOX GET", "GUI","Item$=TREEBOX GET TreeBox$, Position","Get a treebox item

Synopsis

Item$=TREEBOX GET TreeBox$, Position

Description

Returns the Item$ at position Position in TreeBox$."

//==============================

DATA "TREEBOX REMOVE", "GUI","TREEBOX REMOVE TreeBox$, ListItem$","Remove a treebox item

Synopsis

TREEBOX REMOVE TreeBox$, ListItem$
Removes the first list item ListItem$ from the tree. Note: this also removes all subitems!

TREEBOX REMOVE TreeBox$, Position
Removes the entry at position Position in TreeBox$.

TREEBOX REMOVE TreeBox$, Head$, ListItem$
Removes ListItem$ under Head$ in TreeBox$."

//==============================

DATA "TREEBOX SELECT", "GUI","TREEBOX SELECT TreeBox$, Position","Select a treebox item

Synopsis

TREEBOX SELECT TreeBox$, Position

Description

Selects the item at position Position in TreeBox$."

//==============================

DATA "TREEBOX SORT", "GUI","TREEBOX SORT TreeBox$","Sort a treebox

Synopsis

TREEBOX SORT TreeBox$

Description

Sorts the entries of TreeBox$ alphabetically."

//==============================

DATA "TRIM$", "BSC","a$=TRIM$(b$)","Remove leading and trailing spaces from its argument

Synopsis
 
Description

The trim$-function removes all whitespaces from the left and from the right end of a string and returns the result. Calling trim$ is equivalent to calling rtrim$(ltrim$()).

Example
 
do 
  input \"Continue ? Please answer yes or no: \" a$ 
  a$=lower$(trim$(a$)) 
  if (len(a$)>0 and a$=left$(\"no\",len(a$)) exit 
loop 
          
This example asks for an answer (yes or no) and removes spaces with trim$ to make the comparison with the string \"no\" more bulletproof."

//==============================

DATA "TRUE", "BSC","okay=TRUE","A constant with the value of 1

Synopsis
 
okay=true 

Description

The constant true can be assigned to variables which will later appear in conditions (e.g. an if-statement. true may also be written as TRUE or even TrUe.

Example
 
input \"Please enter a string of all upper letters: \" a$ 
if (is_upper(a$)) print \"Okay\" 

sub is_upper(a$) 
  if (a$=upper$(a$)) return true 
  return false 
end sub"

//==============================

DATA "UNTIL", "BSC","UNTIL(x=y)","End a repeat-loop

Synopsis
 
repeat 
  ... 
until (...) 

Description

The until-keyword ends a loop, which has been introduced by the repeat-keyword. until requires a condition in braces (or an expression, see here for details) as an argument; the loop will continue until this condition evaluates to true.

Example
 
c=1 
s=1 
repeat 
  l=c 
  s=-(s+sig(s)) 
  c=c+1/s 
  print c 
until(abs(l-c)<0.000001) 
          
This program calculates the sequence 1/1-1/2+1/3-1/4+1/5-1/6+1/7-1/8+ ... ; please let me know, if you know against which value this converges."

//==============================

DATA "UPPER$()", "BSC","u$=UPPER$(a$)","Convert a string to upper case

Synopsis
 
u$=upper$(a$) 

Description

The upper$-function accepts a single string argument and converts it to all upper case.

Example
 
line input \"Please enter a sentence without the letter \'e\': \" l$ 
p=instr(upper$(l$),\"E\") 
if (p) then 
  l$=lower$(l$) 
  mid$(l$,p,1)=\"E\" 
  print \"Hey, you are wrong, see here!\" 
  print l$ 
else 
  print \"Thanks.\" 
endif 
          
This program asks for a sentence and marks the first (if any) occurence of the letter \'e\' by coverting it to upper case (in contrast to the rest of the sentence, which is converted to lower case)."

//==============================

DATA "USING", "BSC","print a USING \"##.###\"","Specify the format for printing a number

Synopsis
 
print a using \"##.###\" 
print a using(\"##.###\",\",.\") 

Description

The using-keyword may appear as part of the print-statement and specifies the format (e.g. the number of digits before and after the decimal dot), which should be used to print the number.

The possible values for the format argument (\"##.###\" in the synopsis above) are described within the entry for the str$-function; especially the second line in the synopsis (print a using(\"##.###\",\",.\")) will become clear after referring to str$. In fact the using clause is closely related to the str$-function; the former can always be rewritten using the latter; i.e. print foo using bar$ is always equivalent to print str$(foo,bar$). Therefore you should check out str$ to learn more.

Example
 
for a=1 to 10 
  print sqrt(ran(10000*a)) using \"#########.#####\" 
next a 
          
This example prints a column of square roots of random number, nicely aligned at the decimal dot."

//==============================

DATA "VAL()", "BSC","x=VAL(x$)","Converts a string to a number

Synopsis
 
x=val(x$) 

Description

The val-function checks, if the start of its string argument forms a floating point number and then returns this number. The string therefore has to start with digits (only whitespace infront is allowed), otherwise the val-function returns zero.

Example
 
input \"Please enter a length, either in inches (in) or centimeters (cm) \" l$ 
if (right$(l$,2)=\"in\") then 
  l=val(l$)*2.51 
else 
  l=val(l$) 
print \"You have entered \",l,\"cm.\" 
          
This example queries for a length and checks, if it has been specified in inches or centimeters. The length is then converted to centimeters."

//==============================

DATA "VIEW", "GUI","VIEW x1,y1 TO x2,y2, ID$, View$","Add a view

Synopsis

VIEW x1,y1 TO x2,y2, ID$, View$"

//==============================

DATA "VIEW DROPZONE", "GUI","VIEW DROPZONE View$","make a view droppable

Synopsis

VIEW DROPZONE View$

Description

Define View$ as a drop zone that accepts dropped files.

DROPZONE now accepts multiple files (and sends them in inversed order as message)"

//==============================

DATA "VIEW GET", "GUI","Result=VIEW GET View$, Option$","Obtain information about a view

Synopsis

Result=VIEW GET View$, Option$

Option$=\"Position-X/Position-Y/Width/Height/Exists/Focused\"

Description

Returns the requested property or if used with Exists/Focused returns 1 if so and 0 if not."

//==============================

DATA "VIEW REMOVE", "GUI","VIEW REMOVE View$","Remove a view

Synopsis

VIEW REMOVE View$

Description

Remove View$. The window view cannot be removed. Should be much more stable now.

Warning: Currently clears all internal information about menus and drop boxes. It is only safe to use it, when you don\'t have any menues or drop boxes on views that will not be removed.

Warning: Never remove menus with shortcuts, otherwise yab will crash when the shortcut key is pressed!"

//==============================

DATA "WEND", "BSC","while(a<b)... WEND","End a while-loop

Synopsis
 
while(a<b) 
  ... 
wend 

Description

The wend-keyword marks the end of a while-loop. Please see the while-keyword for more details. wend can be written as end while or even end-while.

Example
 
line input \"Please enter a sentence: \" a$ 
p=instr(a$,\"e\") 
while(p) 
  mid$(a$,p,1)=\"E\" 
  p=instr(a$,\"e\") 
wend 
print a$ 
          
This example reads a sentence and converts every occurence of the letter e into uppercase (E)."

//==============================

DATA "WHILE", "BSC","WHILE(x=y)","Start a while-loop

Synopsis
 
while(...) 
  ... 
wend 

Description

The while-keyword starts a while-loop, i.e. a loop that is excuted as long as the condition (which is specified in braces after the keyword while) evaluates to true.

Note, that the body of such a while-loop will not be executed at all, if the condition following the while-keyword is not true initially.

If you want to leave the loop prematurely, you may use the break-statement.

Example
 
open #1,\"foo\" 
while(!eof(1)) 
  line input #1 a$ 
  print a$ 
wend 
          
This program reads the file foo and prints it line by line."

//==============================

DATA "WINDOW CLOSE", "GUI","WINDOW CLOSE WindowView$","Close a window

Synopsis

WINDOW CLOSE WindowView$

Description

Closes window containing the view WindowView$. Warning: this might destabilize your program if you try to reconstruct your old window or further use old views! The yab-taskforce is set on the tracks of this bug ;)"

//==============================

DATA "WINDOW COUNT", "GUI","n=WINDOW COUNT","Count open windows

Synopsis

n=WINDOW COUNT"

//==============================

DATA "WINDOW GET", "GUI","Result=WINDOW GET View$, Option$","Get window specifications

Synopsis

Result=WINDOW GET View$, Option$

Description

Option$=\"Position-X/Position-Y/Width/Height/Minimum-Width/Minimum-Height/Maximum-Width/Maximum-Height/Exists\"

Returns the requested property or if used with Exists returns 1 if found and 0 if not."

//==============================

DATA "WINDOW OPEN", "GUI","WINDOW OPEN x1,y1 TO x2,y2, ID$, Title$","Create a Window

Synopsis

WINDOW OPEN x1,y1 TO x2,y2, ID$, Title$ 

Description

Open window at position x1,y1 to x2,y2 in screen coordinates with title Title$ on the yellow tab.

Automatically generates a window-sized view called ID$."

//==============================

DATA "WINDOW SET", "GUI","WINDOW SET Window$, Option$, Value$","Set window characteristics

Synopsis

WINDOW SET Window$, Option$, Value$

\"Look\", \"Document/Titled(default)/Floating/Modal/Bordered/No-Border\"
\"Feel\", \"Normal(default)/Modal-App/Modal-All/Floating-App/Floating-All\"
See \"BeBook->Interface Kit->BWindow->Constants and Defined Types\" for details.

\"Title\", Title$
\"Flags\", \"Not-Closable, Not-Zoomable, Not-Minimizable, Not-H-Resizable, Not-V-Resizable, 
Not-Resizable, No-Workspace-Activation, Accept-First-Click\"
See \"BeBook->Interface Kit->BWindow->Constants and Defined Types\" for details.

\"Flags\", \"Reset\"
Resets the flags back to none.

\"Workspace\", \"All\"
Causes the window to appear on all workspaces.

\"Workspace\", \"Current\"
Causes the window to appear on only the current workspace.

\"Workspace\", \"n\"(where n is a number >= 1)
Causes the window to appear on workspace number n

WINDOW SET Window$, Option$, r,g,b
\"BGColor\", r,g,b (216,216,216 default)
\"HighColor\", r,g,b (0,0,0 default)
\"LowColor\", r,g,b (216,216,216 default)

WINDOW SET Window$, Option$, x,y
\"ResizeTo\", x,y
\"MoveTo\", x,y
\"MinimumTo\", x,y
\"MaximumTo\", x,y

WINDOW SET WindowView$, Option$
Option$=\"Activate\"
Activate the window, so it is in the foreground.
Option$=\"Deactivate\"
Deactivate the window, so it is in the background.
Option$=\"Minimize\"
Minimize the window, or restore the window if it is already minimized.
Option$=\"Maximize\"
Maximize (zoom) the window.
Option$=\"Enable-Updates\"
Updates the window again after a \"Disable-Updates\". 
Option$=\"Disable-Updates\"
Disables the automatic window updates."

//==============================

DATA "XOR()", "BSC","x=XOR(a,b)","Compute the exclusive or

Synopsis
 
x=xor(a,b) 

Description

The xor computes the bitwise exclusive or of its two numeric arguments. To understand the result, both arguments should be viewed as binary numbers (i.e. a series of 0 and 1); a bit of the result will then be 1, if exactly one argument has a 1 and the other has a 0 at this position in their binary representation.

Note, that both arguments are silently converted to integer values and that negative numbers have their own binary representation and may lead to unexpected results when passed to and.

Example
 
print xor(7,4) 
          
This will print 3. This result is obvious, if you note, that the binary representation of 7 and 4 are 111 and 100 respectively; this will yield 011 in binary representaion or 2 as decimal.

The eor-function is the same as the xor function; both are synonymous; however they have each their own description, so you may check out the entry of eor for a slightly different view."

data "endofdata","endofdata", "endofdata","endofdata"

######################################################
#############DATA FOR MAIN LOOP CREATION##############
######################################################

label mainloopdata

data "//Main Message Loop"
data "dim msg$(1)"
data "while(not leavingLoop)"
data "\tnCommands = token(message$, msg$(), \"|\")"
data "\tfor everyCommand = 1 to nCommands"
data "\t\tif(DEBUG and msg$(everyCommand)<>\"\") print msg$(everyCommand)"
data "\t\tswitch(msg$(everyCommand))"
data "\t\t\tcase \"_QuitRequested\":"
data "\t\t\tcase \"MainWindow:_QuitRequested\":"
data "\t\t\tcase \"MainWindow:File:Quit\":"
data "\t\t\t\tleavingLoop = true"
data "\t\t\t\tbreak"
data "\t\t\tcase \"MainWindow:Help:About\":"
data "\t\t\t\tAlert ProgramName$ + \" \" + ProgramVersion$ + \"\\n\" + \"by \" + AuthorName$ +\"\\n\\n\" + ProgramBriefDescription$ + \"\\n\" + ProgramLicense$ + \"\\n\" + ProgramAcknowledgements$, \"OK\", \"none\""
data "\t\t\tdefault:"
data "\t\t\t\tbreak"
data "\t\tend switch"
data "\tnext everyCommand"
data "wend"
data "\n"
data "CloseWindow()"
data "\n"
data "end"
data "\n"

######################################################
#############DATA FOR .PackageInfo##############
######################################################

label packageinfo

data "name\t\t\t\tPackage"
data "version\t\t\t\t0.1-1"
data "architecture\t\tx86_gcc2"
data "\n"
data "summary\t\t\t\"short description\""
data "Description\t\t\t\"longer description\""
data "\n"
data "packager\t\t\t\"name of packager <whoever@email.com>\""
data "vendor\t\t\t\t\"vendor name\""

data "copyrights\t\t\t\"copyright owner\""
data "licenses\t\t\t\"license\""

data "provides {"		
data "\t\t\t\t\tPackage = 0.1-1"
data "}"

#############################################################
########################HELP DATA############################
#############################################################

label yabadabbadoohelp

data "<!doctype html public \"-//W3C//DTD HTML 4.0 Transitional //EN\"><html><head>"
data "<meta name=\"GENERATOR\" content=\"mkd2html 2.1.2 DL=DISCOUNT\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset-us-ascii\"></head><body>"
data "<h1>Yabadabbadoo Help</h1><hr />"
data "<p>Yabadabbadoo is an alternative IDE (Integrated Development Environment) for Jan Bungeroth&rsquo;s yab programming language. It differs from the standard IDE in that it creates every subroutine (and some other important sections of your program) as separate files, then glues them all together in the correct order. This makes it easier to work on really big programs.</p>"
data "<p>When Yabadabbadoo is started, it grabs Workspace 4 for its own use (after asking for your OK), and for best results it requires a minimum resolution of 1024 x 768.</p>"
data "<h2>1. The Yabadabbadoo Main window menus</h2>"
data "<h3>1.1 The File menu</h3><h4>1.1.1 File | Quit</h4><p>Exits Yabadabbadoo</p>"
data "<h3>1.2 The Project menu</h3>"
data "<h4>1.2.1 Project | New</h4><p>Create a new Yabadabbadoo project. You need to create a new directory (i.e. folder) to house your project. Normally this folder would have the same name that you will eventually give to your program. DO NOT USE SPACES. In fact, there should not be spaces anywhere in the project&rsquo;s pathname. Whether your project is housed at</p>"
data "<pre><code>/boot/home/My Projects/MyGreatProgram</code></pre>"
data "<p>or at</p><pre><code>/boot/home/MyProjects/My Great Program</code></pre>"
data "<p>makes no difference, Yabadabbadoo WILL crash. It is simply a shortcoming of yab, reflecting its orgins as a MS-DOS language. There is a workaround and it will be implemented, but it&rsquo;s a big job and it will require a lot of testing. Stick to names like</p>"
data "<pre><code>/boot/home/MyProjects/MyGreatProgram</code></pre>"
data "<p>and you&rsquo;ll be OK. Also, while most High-ASCII and UTF-8 Unicode characters should be OK, double-byte Unicode characters like Chinese ideograms will almost certainly crash yab.</p>"
data "<p>Do not place your project on the Desktop unless you are absolutely sure you are not going to bind it.</p>"
data "<p>The nag alerts about these issues will only show up once in each session.</p>"
data "<h4>1.2.2 Project | Open</h4><p>Open an existing project. Remember, you are opening a DIRECTORY, not a file. Don&rsquo;t worry, I make that mistake all the time. It won&rsquo;t hurt Yabadabbadoo or your file.Just go back to the menu and open the actual project.</p>"
data "<h4>1.2.3 Project | Backup</h4><p>Places a time-stamped zipped copy of the current project on the Desktop, from where you can archive it wherever you keep these things. Use this often!</p>"
data "<h4>1.2.4 Project | Search</h4><p>Search the entire project with the TextSearch utlility.</p>"
data "<h4>1.2.5 Project | Replace</h4><p>Replace one string with another across the project. You will be given a choice to do this in the subroutines folder only (recommended) or across the  entire project. BAKCUP before you do this!</p>"
data "<h4>1.2.5 Project | Code repositories | BitBucket</h4><p>Launch Atlassan Bitbucket in your default browser.</p>"
data "<h4>1.2.6 Project | Code repositories | GitHub</h4><p>Launch GitHub in your default browser.</p>"
data "<h4>1.2.7 Project | Code repositories | SourceForge</h4><p>Launch SourceForge in your default browser.</p>"
data "<h4>1.2.8 Project | git | Initialize</h4><p>Set up your project as a local git repository and establish a link with an offline repository such as GitHub.</p><p>NOTE: to do this you must already have registered a project with one of the Code repositories. Have the following handy: Your project reference URL, e.g. https://github.com/clasqm/Rondel.git, your login and your password.</p>"
data "<h4>1.2.9 Project | git | Push</h4><p>Push changes to your online git repository. You should already have initialized the project (see above). Have the following ready: your login and your password. You will also be asked to type a short description of the changes made since the last push.</p>"
data "<h4>1.2.10 Project | git | Pull</h4><p>Pull changes from your online git repository. Have the following ready: your login and your password</p><p>NOTE: More complex git operations (branching, merging, rebasing) will not be implemented in Yabadabbadoo. Everything goes straight to the master branch. But by all means open a Terminal and have fun!</p>"
data "<h4>1.2.11 Project | git | Install git support</h4> Install the package required to activate git support. You will need to have the appropriate clasqm repository set up first. See http://clasquin-johnson.co.za/michel/haiku/repo/index.html for instructions.</p>"
data "<h4>1.2.11 Project | Stats</h4><p>Display some statistics about the current project.</p>"
data "<p><em>See also Appendix 1: Project structure</em></p><h3>1.3 The Parts menu</h3><h4>1.3.1 Parts | Prologue</h4>"
data "<p>Edit the part of your program that runs before the main loop. This is normally where you define global variables (yab technically does not require this, but it is good practice to do it anyway, and it give you a handy reference), open your main window and check whether a file was specified on the command line. Yabadabbadoo also uses it to define certain variables that will apear in your program&rsquo;s About box.</p>"
data "<h4>1.3.2 Parts | Mainloop</h4><p>Edit the main loop of your program. The main loop intercepts messages from the GUI and presents them in a form you can intercept and use to issue commands. the bulk of these commands should be contained in subroutines, keeping the main loop as small as possible. Yabadabbadoo provides one possible way of setting up the main loop (the same one as the official IDE, in fact) that uses a SWITCH decision structure embedded in an infinite WHILE &hellip; WEND loop with a single exit point.</p>"
data "<h4>1.3.4 Parts | Data</h4><p>Edit any LABEL and DATA statements your program may require.  Not every program needs a data section,but do not delete this file. Yabadabbadoo expects it to be there. If you do not use DATA statements, just leave this empty.</p>"
data "<h4>1.3.5 Parts | Icon</h4><p>Open Icon-O-matic and edit the HVIF icon for your program. You will have to transfer the icon to your program yourself using the FileType Tracker add-on.</p>"
data "<h4>1.3.6 Parts | README</h4><p>Edit a README file to accompany your program, in StyledEdit so that you can use different fonts, bold text, etc.</p>"
data "<h4>1.3.7 Parts | PackageInfo</h4><p>Edit a .PackageInfo file used to create a Package Manager hpkg file for your program.</p>"
data "<h3>1.4 The yab menu</h3><h4>1.4.1 yab | Generate yab file</h4><p>Combine all the pieces of your program, in the correct order, and create a yab program in the binder subdirectory of your project. If you open this subdirectory in Tracker, you can click on the yab file to run it. If it does not run, you can drag it to a Terminal, then hit Enter on your keyboard to run it in the Terminal and study the error messages it produces,</p>"
data "<h4>1.4.2 yab | View yab file</h4><p>Generate a yab file as above, then open it in PE. This is useful if your error message tells you to look at, say, line 237. Of course, Yabadabbadoo does not give us those numbers, but PE does.</p>"
data "<h4>1.4.3 yab | Run</h4><p>Generate Generate a yab file as above, and run it directly from within Yabdadabbadoo.</p>"
data "<h4>1.4.4 yab | Run in Terminal</h4><p>Run your program from a Terminal. Useful to monitor the messages sent from widgets and menus.</p>"
data "<h4>1.4.4 yab | Run & Display</h4><p>EXPERIMENTAL AND UNSTABLE! Run your program until it exits or crashes, then display the log output and a best guess of the offending lines in the case of a crash. If there was no crash, the first 13 lines will be displayed. Please refer to the Tutorial for more on this function.</p>"
data "<h4>1.4.6 yab | Bind</h4><p>Generate Generate a yab file as above, and bind it to the yab executable to create a standalone program that will run without the need for yab to be present (you will still need yablib.so). The resulting file is placed on the Desktop for testing purposes.</p>"
data "<h4>1,4,7. Transfer to official IDE</h4><p>Generate a yab file and open the Official yab IDE so that you can use the BuildFactory. The current version of the official IDe does not allow me to open the yab file automatically, so this opens the IDE and a Tracker window holding the yab file. Yabadabbadoo shuts down and changes made in the official IDE will NOT propagate back to Yabadabbadoo.</p>"
data "<h4>1,4,8 yab | Compile</h4><p>Like binding (see above), but using the BuildFactory in a command-line environment. This method makes certain assumptions about your application (for example, the app-signature), so if you want more control, go the long way round through the Official IDE instead.</p>"
data "<h3>1.5 The Utilities menu</h3><h4>1.5.1 Utilities | Open a Terminal</h4><p>Open a Terminal</p>"
data "<h4>1.5.2 Utilities | Open Tracker</h4><p>Open Tracker to your current project directory.</p>"
data "<h4>1.5.3 Utilities | Calculator</h4><p>Open Deskcalc.Trust me, you will be needing this when laying out your User Interface!</p>"
data "<h4>1.5.4 Utilities | ScriptAssistant</h4><p>Opens  or closes the ScriptAssistant. See Section 3.</p>"
data "<h4>1.5.5 Utilities | yabAssistant</h4><p>Opens or closes the yabAssistant. See section 4.</p>"
//data "<h4>1.5.6 Utilities | Yab Interface Builder</h4><p>Opens yib, the Yab Interface Builder, if it is installed. This option will be enabled when yib becomes available. It&rsquo;s a big project (bigger than Yabadabbadoo) and it might be a while.</p>"
data "<h4>1.5.6 Utilities | System Prefs</h4><p>Opens a Tracker Window with the Haiku System Preferences.</p>"
data "<h4>1.5.7 Utilities | To-do Manager</h4><p>This will only appear if you have installed the <i>vstm</i> package from the clasqm repo. It gives you a simple interface with which you can list and prioritise all your Yabadabbadoo projects and tasks.</p>"
data "<h4>1.5.8 Utilities | Restart Tracker</h4><p>Yabadabbadoo should not do anything to disturb Tracker. But accidents can happen. Luckily, Tracker is just another program as far as Haiku is concerned and it can be restarted if it crashes.</p>"
data "<h4>1.5.9 Utilities | Restart Deskbar</h4><p>As was the case in 1.5.8, so you can restart the Deskbar.</p>"
data "<h4>1.5.10 Utilities | Create a new Shortcut</h4><p>Create a shortcut (actually a small shell script) on the Desktop that will load the current project into Yabadabbadoo without going through the menus. Shortcuts can be renamed, moved, even into the deskbar menu structures via <i>/boot/home/config/non-packaged/data/deskbar/menu</i>, and be assigned an icon. But if you move your project to a different directory you will need to regenerate the shortcut.</p>"
data "<h3>1.6 The Help Menu</h3><h4>1.6.1 Help | Help</h4><p>Show this Help.</p>"
data "<h4>1.6.2 Help | FAQ</h4><p>Like most &ldquo;Frequently Asked Questions&rdquo;, these are largely made up! Send me some real questions and they will show up here in future releases.</p>"
data "<h4>1.6.3 Help | Tutorial</h4><p>Show a brief Tutorial in which the basics of creating a program with Yabadabbadoo are explained.</p>"
data "<h4>1.6.4 Help | Hard Copy</h4><p>Create a HTML files on the Desktop containing the contents of the Help, FAQ and Tutorial systems. These files can then be opened with a browser and printed.</p>"
data "<h4>1.6.5 Help | Updates</h4><p>Phones home to see if a newer version of the program exists. If it does, you are given an opportunity to visit my website and download it. No information is sent during this process: all that happens is that a small text file containing a version number is retrieved.<p>"
data "<h4>1.6.6 Help | Get e-book - Programming with yab</h4><p>Launch the Smashwords site of my FREE e-book in your default browser</p>"
data "<h4>1.6.7 Help | Launch yab discussion forum</h4><p>Launch the yab discussion forum in your default browser. I hang out there at least once a day, so that is the place to complain about Yabadabbadoo!</p>"
data "<h4>1.6.8 Help | Launch BeSly help database</h4><p>Launch besly.de in your default browser. It is not exclusively yab-oriented, but there are a lot of items usefult to yab programmers.</p>"
data "<h4>1.6.9 Help | About</h4><p>Show an About box.</p>"
data "<h3>1.7 The Subroutine Editing buttons</h3><h4>1.7.1 New sub</h4><p>Create a new subroutine with the opening and closing statements inserted. New subroutines are NOT automatically opened for editing. Your new routine is added to the bottom of the list. You can alphabetize the list with the Refresh button.</p>"
data "<h4>1.7.2 Edit Sub</h4><p>Open the currently selected subroutine for editing. If another file is currently open, it will be auto-saved first.</p>"
data "<p><strong>NOTE:</strong> You can also just double-click on a subroutine to open it for editing.</p>"
data "<h4>1.7.3 Refresh</h4><p>Refresh the list of subroutines. This is useful if you have edited the filenames or deleted a subroutine in Tracker, or if you have copied a subroutine from a different project.</p>"
data "<p><strong>NOTE:</strong> Subroutines do not really have to have the same name in Tracker as on the inside of the file, and it is also possible to have more than one subroutine in a single file. I advise against such practices. Keep it simple. Let Yabadabbadoo do the work.</p>"
data "<h2>2. The Editor Menus</h2><h3>2.1 The File menu</h3><h4>2.1.1 File | Save</h4><p>You don&rsquo;t need this as much as you think you do. Yabadabbadoo is obsessive about auto-saving its files every time you switch between sections or close down the editor. But that ALT-S twitch is engrained in our muscle memory and I might as well make it do something.</p>"
data "<h4>2.1.2. File | Transfer</h4><p>Edit the current section in another editor.</p>"
data "<h5>2.1.2.1 File | Transfer | to Pe</h5><p>As great as Yabadabbadoo&rsquo;s editor is, there may be times you want to do something in Pe. OK, let me admit it, I can&rsquo;t match Pe&rsquo;s fantastic search-and-replace routines. Your section will be autosaved and transferred.</p>"
data "<p>Keep one thing in mind when using external editors: Yabadabbadoo expects a blank line at the end of each section. Otherwise, when things get joined together you may get the typical error of a line saying</p>"
data "<pre><code>end subsub SubRoutineName()</code></pre><p>The Yabadabbadoo editor always saves files with a LF at the end. Other editors may not be so fussy.</p>"
data "<h5>2.1.2.2 File | Transfer | to StyledEdit</h5><p>As in 2.1.2.1, but using StyledEdit</p>"
data "<p>Yabadabbadoo will attempt to track down other compatible text editors and offer them for transfer purposes. If you install or uninstall such an editor, you may need to restart Yabadabbadoo (or at least close and re-open the Editor window) to see it in the menu. Currently tracks: CodeWalker, Eddie, JuffEd, Koder, Sintegrial Text Editor, Tea, Trope, VIM and YATE.</p>"
data "<h4>2.1.3 File | Close</h4><p>Autosave the section and close the editor</p>"
data "<h3>2.2 The Edit menu</h3><h4>2.2.1 Undo/Redo</h4><p>Undo or redo the last editing action</p>"
data "<h4>2.2.2 Cut</h4><p>Copy the current selection to clipboard and remove it from the editing area.</p>"
data "<h4>2.2.3 Copy</h4><p>Copy the current selection to clipboard and leave it in the editing area.</p>"
data "<h4>2.2.4 Paste</h4><p>Insert the clipboard contents into the editing area at the current insertion point. If text is selected it will be overwritten.</p>"
data "<h4>2.2.5 Copy to Snippet</h4><p>Copy a short (80-character maximum) piece of text to a special buffer for future re-use. Up to 15 snippets may be saved. When the sixteenth is saved, the first is deleted. Snippets are useful for temprarily saving names of variables and subroutines, thus avoiding errors.Snippets are NOT saved between sessions.</p>"
data "<h4>2.2.6 Clear Selection</h4><p>Delete the currently selected text from the editing area.</p>"
data "<h4>2.2.7 Clear All</h4><p>Delete ALL text from the editing area. Don&rsquo;t worry, there&rsquo;s always Undo! Oh, did you make a backup recently?</p>"
data "<h4>2.2.8 Find</h4><p>Find the text in the search term field at the bottom of the editor.</p>"
data "<h4>2.2.9 Find Again</h4><p>Find it again.</p>"
data "<h4>2.2.10 Replace</h4><p>Much like the Global Replace found in the Main Project Window, but in this case works ONLY on the file currently being edited.</p>"
data "<h4>2.2.11 Select All</h4><p>Select ALL text in the editor.</p>"
data "<h3>2.3 The Editor status line</h3><h4>2.3.1 The search term field</h4><p>This is where you type text you wish to search for.</p>"
data "<h4>2.3.2 The snippets dropdown</h4><p>Select the snippet of text you want to insert into your text.</p><h4>2.3.3 The Snippet Insert button</h4>"
data "<p>This small button, marked with a checkmark, is used to insert the currently selected snippet into your text.</p>"
data "<h2>3. The ScriptAssistant</h2><p>ScriptAssistant is invoked and hidden using the same item on the Utilities menu. It is used to get information on shell commands for use in SYSTEM and SYSTEM$ statements in yab, Select the first letter of the command, then the command itself and press the GO button.</p>"
data "<p>ScriptAssistant has two modes. Normal mode contains the commands you are most likely to need while scripting: no programming or networking stuff, and .zip as the only kind of compression. Pro Mode contains absolutely everything I could find on a regulation Haiku setup that I could coax to spit out some help. Over 300 of them and it could have been more if perl was working properly</p>"
data "<p>Now most of you are going to be macho and work in Pro mode all the time. Fine, but it might be a little slower and take up more screen space.</p>"
data "<p>But you&rsquo;ve added stuff since you installed Haiku. No problem. Type the name of the command (don&rsquo;t bother typing the &ndash;help parameter) in the textbox at the bottom and click on TRY. ScriptAssistant will attempt to run the command with the &ndash;help parameter and capture and display the results. This can be dangerous: if the command you are investigating is interactive (e.g. a shell) and does not recognise the &ndash;help parameter, it could crash ScriptAssistant and Yabadabbadoo with it. Be sure to save your files before you use the TRY button.</p><p>ScriptAssistant is also available as a standalone package.</p>"
data "<h2>4. The YabAssistant</h2><p>yabAssistant is invoked and hidden using the same item on the Utilities menu. YYou have a row of alphabetical buttons to navigate the commands. You can choose between All (the default), yabasic-only or yab-only commands.</p>"
data "<p>Or you can enter a search term and click FIND and the program will show only the commands containing that term. For example, if you want to know which commands deal with mimetypes, just type &ldquo;mime&rdquo; in the search box, press FIND (or the ENTER key) and the program will select just those commands that have the term &ldquo;mime&rdquo; contained in their help content. It&rsquo;s a case-insensitive search, by the way, so feel fre to use MIME or mImE.</p>"
data "<p>Single-clicking on a command will show you a brief summary of its usage at the bottom of the application window. If you know how the command works, you can cut from this textcontrol and paste into your own program, ten substitute your own variables. But be warned: some commands have more than ove variant and I had to guess which one would be more typical and useful.</p>"
data "<p>Double-clicking on a command will open a window (up to 12 may be open at any time) with more info about it. This material has been shamelessly borrowed from the yabasic and yab documentation contained in the yab distribution, with bits more from the help in the yab IDE.</p>"
data "<p>yabAssistant does not contain ALL yab commands. yab has a &lsquo;\"graphics mode\" that is is a remnant from its yabasic roots and is not relevant to the likely uses of Yabdabbadoo. These commands have been removed from yabAssistant. They still work (or not!) as they always have, of course.</p>"
data "<h2>Appendix 1: Project structure</h2><p>A newly created Yabadabbadoo project contains certain directories and files that combine from commands on the yab menu to form a valid yab program. This program, by itself, does not actually DO anything - it is just there to give you a basis to work from. But it will run.</p>"
data "<h3>The Project main Directory</h3><p>Contains the following files:<br><em>prologue</em>: North American users must resist the temptation to rename this file to &ldquo;prolog&rdquo;! This file contains data and instructions that the program needs before the main loop runs<br>"
data "<em>mainloop</em>: the main message-intercepting and interpreting centre of your program, where your program spends most of its time waiting for you to issue a command.<br>"
data "<em>data</em>: Not every program needs a data section,but do not delete this file. Yabadabbadoo expects it to be there. If you do not use DATA statements, just leave this empty.</p>"
data "<h3>The &ldquo;sub&rdquo; subdirectory</h3><p>Contains subroutines for your program</p>"
data "<h3>The &ldquo;other&rdquo; subdirectory</h3><p>Contains a blank icon and a README file for your program. You can store anything else you want to include with your program here, e.g. a copy of the GPL.</p>"
data "<h3>The &ldquo;binder&rdquo; subdirectory</h3><p>Initially empty. This is where Yabadabbadoo will generate a yab file that can be run directly or bound.</p>"
data "<h3>The &ldquo;PackagingFolder&rdquo; directory</h3>"
data "<p>This directory contains the skeleton of what you will need to create an hpkg of your program, including a basic .PackageInfo file. This directory will be missing from my projects on GitHub.</p></body></html>"
data "end_of_data"

label yabadabbadoofaq

data "<!doctype html public \"-//W3C//DTD HTML 4.0 Transitional //EN\"><html><head><meta name=\"GENERATOR\" content=\"mkd2html 2.1.2 DL=DISCOUNT\">"
data "<meta http-equiv=\"Content-Type\" content=\"text/html; charset-us-ascii\"></head>"
data "<body><h1>Frequently Asked Questions</h1><hr /><p>Like most FAQs, these are largely made up! Send me some real questions and they will show up here in future releases.</p>"
data "<p><em>Q: Can I compile a yabadabbadoo project in the official yab IDE?</em></p>"
data "<p>A: Yes. Every Yabadabbadoo project has a binder directory. Whenever you use Generate yab file, View yab file, Run or Bind from the yab menu, a yab file is created there from your Yabadabbadoo sources. Load that into the official IDE and you&rsquo;re on your way.</p>"
data "<p>Note though, that changes made in the official IDE will not be propagated back to Yabadabbadoo.</p>"
data "<p><em>Q: Can I bind a yabadabbadoo project from Terminal?</em></p>"
data "<p>A: Yes, of course, as long as you have a yab executable in your PATH. Here is an example that binds Yabadabbadoo itself, using a bash script.</p>"
data "<pre><code>#!/bin/sh"
data "rm -f /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "touch /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "cat /boot/home/Projects/Yabadabbadoo/prologue &gt; /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "cat /boot/home/Projects/Yabadabbadoo/mainloop &gt;&gt; /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "cat /boot/home/Projects/Yabadabbadoo/sub/* &gt;&gt; /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "cat /boot/home/Projects/Yabadabbadoo/data &gt;&gt; /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "chmod +x /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "mimeset -f /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "chmod +x /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "yab -bind /boot/home/Desktop/Yabadabbadoo /boot/home/Projects/Yabadabbadoo/binder/Yabadabbadoo.yab"
data "chmod  +x /boot/home/Desktop/Yabadabbadoo"
data "mimeset -f /boot/home/Desktop/Yabadabbadoo"
data "settype -t application/x-vnd.Yabadabbadoo /boot/home/Desktop/Yabadabbadoo"
data "</code></pre><p>Just change the directories and filenames to whatever you are using.</p>"
data "<p>Here&rsquo;s a fun idea: name the shell script &lsquo;make&rsquo; and supply a yab executable yourself in your package, renaming it to something intimidating. That should confuse a few people!</p>"
data "<p>In case you are wondering, yes, I have used Yabadabbadoo to work on itself, but using Run then throws a second copy on the screen, which gets confusing in a hurry &hellip; I love IDEs. I am writing one. But if you can&rsquo;t get things done with just a terminal and a text editor then you are not programming the computer, the computer is programming YOU!</p>"
data "<p><em>Q: What is the difference between binding a program and using BuildFactory in the official IDE?</em></p>"
data "<p>A: With a bound program, anyone with a hex editor can get at your source code, and Haiku comes with one, called DiskProbe. I am an open-source developer, so I don&rsquo;t care. BuildFactory puts in an extra level of encryption.</p>"
data "<p><em>Q: I&rsquo;ve created a bunch of subdirectories and now they are all at the bottom of the list! How do I get them in alphabetical order?</em></p>"
data "<p>A: Click the Refresh button.</p>"
data "<p><em>Q: What about libraries? Do they still work?</em></p>"
data "<p>A: Sure they still work. The problem is finding them. At the time of writing, yab looks for libraries in two locations. One is the same directory as the main yab file, which for us is the binder directory.</p>"
data "<p>The other library location is /boot/home/config/non-packaged/lib/yab.</p>"
data "<p>But consider this: if you need to re-use a subroutine, just use Tracker to copy it from one project&rsquo;s sub directory to another. The need for libraries just isn&rsquo;t what it used to be.</p>"
data "<p><em>Q: will Yabadabbadoo ever automate the creation of hpkg and/or zip containers?</em></p>"
data "<p>A: No. There are too many intangibles, too many things I can&rsquo;t predict. My  design philosophy is to have a single executable that creates its support files on the fly. But you might prefer to ship your program with lots of support files in hard-coded subdirectories. I think you&rsquo;re wrong, but that&rsquo;s a discussion for another day. But I can&rsquo;t predict what you will put where, so you will just have to do it yourself. Sorry.</p>"
data "<p>Every Yabadabbadoo project contains a bare-bones PackagingFolder directory to get you started.</p>"
data "<p><em>Q: Will you create a framework to make Yabadabbadoo available in other languages?</em></p>"
data "<p>A: No. But This is Public Domain software. If you really want a Serbo-Croatian version, go ahead and make one. You  have about 10 KLOCS of DATA statements to translate and one quotation mark out of place will crash the program. Good luck. Don&rsquo;t forget to escape quotation marks and real backslashes.</p>"
data "<p><em>Q: Can I use your &hellip; routine?</em></p><p>A: Which part of Public Domain did you not understand? :-) An acknowledgment in your About box would be nice.</p></body></html>"
data "end_of_data"


label yabadabbadootutorial

data "<!doctype html public \"-//W3C//DTD HTML 4.0 Transitional //EN\"><html><head>"
data "<meta name=\"GENERATOR\" content=\"mkd2html 2.1.2 DL=DISCOUNT\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset-us-ascii\"></head>"
data "<body><h1>Yabadabbadoo Tutorial</h1><hr />"
data "<p>To ease you into using Yabadabbadoo, our first project will be to write a text editor. Why a text editor? No special reason, except that I like writing text editors and yab makes it very easy.</p>"
data "<h2>First steps</h2>"
data "<p>Start Yabadabbadoo. The opening  wizard lets you create a new project. Create a new directory (anywhere EXCEPT on the Desktop) to house your project and open it. I suggest you make a directory called /boot/home/Projects, and within that, a directory called Teditor. Not a great name, but  there&rsquo;s a reason for preferring a name with seven letters in it. You&rsquo;ll see later on.</p>"
data "<p>Yabadabbadoo now creates a bare framework for a yab application. Depending on the speed of your computer, this may take a few seconds. Once all the buttons and menus become active, try selecting <em>Run</em> from the <em>yab</em> menu. A typical Haiku program window flashes  onto the screen.</p>"
data "<p>Of course, this program doesn&rsquo;t actually DO anything yet. It knows how to quit  and how to display an About Box and &hellip; well, that&rsquo;s all, actually. Try them out.</p>"
data "<p>Before we do anything else, close the dummy program, and use the <em>stats</em> function in Yabadabbadoo&rsquo;s <em>Project</em> menu. Mmmm, 103 lines of code. Actually, if you look at the whole thing (use <em>yab | View yab file</em>), a lot of those are blank lines, put there to make the program easier to read. Others, starting with # or //, are comments, little notes you put in for yourself in case you ever need to revisit this code. You can squeeze this program down to 45 lines with no problems at all, and it will still run.</p>"
data "<p>Also, you will see that tabs are used to indicate which commands are in a <em>loop</em>, that is, which commands are grouped together to form a coherent set of instructions that must be completed before the program is allowed to move on. This is called <em>whitespace</em>. yab does not insist on it. But using whitespace consistently is the mark of a good programmer. Learn to do it from the beginning.</p>"
data "<p>in Yabadabbadoo click the <em>Edit Prologue</em> button. An editing window comes up. Can you see the following lines?</p>"
data "<pre><code>ProgramName$ = \"Teditor\""
data "AuthorName$ = \"Name of Author\""
data "ProgramVersion$ = \"V0.1\""
data "ProgramBriefDescription$ = \"Brief Description of your program.\""
data "ProgramLicense$ = \"Public Domain/Freeware/GPL/Artistic License/Commercial\""
data "ProgramAcknowledgements$ =\"With thanks to .......\" "
data "</code></pre><p>Change them to something more like this:</p>"
data "<pre><code>ProgramName$ = \"Teditor\""
data "AuthorName$ = \"Joe Bloggs\""
data "ProgramVersion$ = \"V0.1\""
data "ProgramBriefDescription$ = \"My unbelievable first Yabadabbadoo program.\""
data "ProgramLicense$ = \"Public Domain\""
data "ProgramAcknowledgements$ =\"With thanks to clasqm for creating Yabadabbadoo!\" </code></pre>"
data "<p>Now run the program from Yabadabbadoo&rsquo;s <em>yab</em> menu again. You don&rsquo;t need to save your changes: it is done automatically. Once Teditor&rsquo;s by-now familiar window comes up, try that About box from the Help Menu once more. Hey! It&rsquo;s different!</p>"
data "<p>IF NOTHING HAPPENS:</p>"
data "<p>Most likely you deleted a quotation mark. One thing yab is very good at is wearing out the &ldquo; key on your keyboard! What you have just entered are <em>string variables</em> and they are always enclosed in quotation marks. Time for our first debug session.</p>"
data "<p>In Yabadabbadoo we debug the old-fashioned way, with a Terminal and a text editor. From Yabadabbadoo&rsquo;s Utilities menu, open up Tracker and a Terminal. in the Tracker window Navigate to <em>/boot/home/Projects/Teditor/binder</em>. Drop the <em>Teditor.yab</em>  file you see there onto the Terminal. Click on the Terminal again to make it active and press Enter to run the program. An error message will appear in Terminal. These messages are rather cryptic and they don&rsquo;t always pinpoint the <em>exact</em> line where the problem showed up, but it&rsquo;s what we have. You can close the Tracker window now. The next time you need to run the program you can just hit the <em>Cursor Up</em> key in Terminal to repeat the last action.</p>"
data "<p>But the error message gives a reference to a line in the program as a whole. We are editing it in bits and pieces. That is not such a problem right now since the <em>prologue</em> is the very first part of our program. It does become a problem when you are tracking down an error in a distant subroutine.</p>"
data "<p>One thing you can do is to load <em>Teditor,yab</em> into Pe and scroll down to the offending line. But we are code heroes, so let&rsquo;s do it all in Terminal! Let&rsquo;s say an error was reported on line 14. We want to see the lines just before and after it, just in case yab got a little confused, Type the following command:</p>"
data "<pre><code> cat -n Teditor.yab | sed -n '10,18p'</code></pre>"
data "<p>and you&rsquo;ll see lines 10 to 18 of your program in the Terminal &hellip; numbered!. Your actual file content will not have changed. Be careful with sed, though. it is a powerful, but fiendishly complicated beast.</p>"
data "<p>Once you have identified the error, fix it in the Yabadabbadoo editor and try to run the program again.</p>"
data "<p>I strongly suggest that you learn how to control the flow of your program this way, but if you're willing to take a chance, try the Run & Display function in the yab menu. This is experimental: a sufficiently serious bug in your program can and will freeze Yabadabbadoo itself! If that happens, look in your temporary files cache (which should be <em>/boot/system/cache/tmp</em> on a PM system). In it you will find two files starting with YBD that will show you where the problem was.</p>"
data "<p>OK, LET&rsquo;S GET THE SHOW BACK ON THE ROAD</p>"
data "<p>We&rsquo;ll be moving at a breakneck pace from here on, but in reality, what you will do is make one change at a time, test to see if it is working, then debug until it does.</p>"
data "<h2>Changing the Window title</h2>"
data "<p>A program announcing itself as <em>Main Window</em> doesn&rsquo;t do it for me. Let&rsquo;s change that. Open the <em>OpenWindow</em> subroutine by selecting it from the list and clicking the _Edit Sub\" button (or just by double-clicking it). change the line that reads"
data "<pre><code>window open 100,100 to 600,500, &ldquo;MainWindow&rdquo;, &ldquo;Main Window&rdquo;</code></pre>"
data "<p>to read<p>"
data "<pre><code>window open 100,100 to 600,500, &ldquo;MainWindow&rdquo;, &ldquo;Teditor&rdquo;</code></pre><p>"
data "<h2>Creating a Text area</h2>"
data "<p>A text editor needs a place to write. in yab this is called the textedit widget. Still in the  <em>OpenWindow</em> subroutine, start a new line, as follows:</p>"
data "<pre><code>textedit 0,20 to 500, 400, \"EditSpace\", 3, \"MainWindow\"</code></pre>"
data "<p>OK, what is happening here?</p>"
data "<p>In yab, everything happens on top of something called a View. You put buttons, menus, and everything else on top of a View. In very early versions of yab, you first made the main window, then you plastered a View on top of it before you could do anything. But now, the main window is itself a view. This is important to remember, or very little in the yab help files will make sense.</p>"
data "<p>We know that our window is 500 by 400 pixels. But the menu takes the top 20 pixels (from 0 to 19) so we place the textedit widget 20 pixels lower down. Technically it should be 0,20 to 499, 399, but yab is a little forgiving that way. Every widget needs to have a name so we call this one &ldquo;EditSpace&rdquo;. The 3 that follows (note the lack of quotation marks) indicate that we want both a vertical and a horizontal scrollbar. Finally, we say where we want to put this thing, which is on the View called <em>MainWindow</em></p>"
data "<p>The next step is up to you. By default, a textedit widget will wrap text as you type it, like a word processor. If that&rsquo;s what you want, fine. But you can turn it off with another line, if you like:</p>"
data "<pre><code>textedit set \"wordwrap\", 0</code></pre>"
data "<p>or alternatively</p>"
data "<pre><code>textedit set \"EditSpace\", \"wordwrap\", false</code></pre>"
data "<p>will work just as well. Hmm, that horizontal scrollbar makes more sense now.</p>"
data "<p>Run the program and enter some text. Now select some text and right-click on it. Surprise! You have Undo/Redo, Cut, Copy and Paste, and Select All available. How is that possible? We haven&rsquo;t programmed it in yet!</p>"
data "<p>This shows the remarkable capabilities yab has inherited from the Haiku API. One statement gives you access to a large amount of functions deep within the operating system. The next step is to put these functions on ther menu, along with some way to open and save files.</p>"
data "<h2>Pimping the menu</h2>"
data "<p>Open the <em>MakeMenu</em> subroutine. Between the two lines that start with &ldquo;menu&rdquo; insert the following code:</p>"
data "<pre><code>\tmenu \"File\", \"New\", \"N\", \"MainWindow\""
data "\tmenu \"File\", \"Open\", \"O\", \"MainWindow\""
data "\tmenu \"File\", \"Save\", \"S\", \"MainWindow\""
data "\tmenu \"Edit\", \"Undo/Redo\", \"Z\", \"MainWindow\""
data "\tmenu \"Edit\", \"Cut\", \"X\", \"MainWindow\""
data "\tmenu \"Edit\", \"Copy\", \"Z\", \"MainWindow\""
data "\tmenu \"Edit\", \"Paste\", \"Z\", \"MainWindow\""
data "\tmenu \"Edit\", \"Select All\", \"A\", \"MainWindow\""
data "</code></pre>"
data "<p>That will change the menus of Teditor and assign standard shortcut keys. Please note that the order in which you issue menu commands does make a difference.</p>"
data "<p>By now, it might be a good idea to make a backup of our project. in Yabadabbadoo, use <em>Project | Backup</em>. Now go and see what has been placed on your Desktop.</p>"
data "<h2>Activating the Editing functions</h2>"
data "<p>Time to enter the scary part of our program: the main loop!</p>"
data "<p>This is the real engine of any yab program, where it spends most of its time waiting for you to do something. Then, when you do, it interprets those actions according to the rules you set down here.</p>"
data "<p>Close the Teditor window if it is still open. Now, in Yabadabbadoo, click on the <em>Edit main loop</em> button. In the editing window, at the top you will see some really cryptic commands:</p>"
data "<pre><code>dim msg$(1)"
data "while(not leavingLoop)"
data "\tnCommands = token(message$, msg$(), \"|\")"
data "\tfor everyCommand = 1 to nCommands"
data "\t\tif(DEBUG and msg$(everyCommand)&lt;&gt;\"\") print msg$(everyCommand)"
data "\t\tswitch(msg$(everyCommand))"
data "\t\t\tcase \"_QuitRequested\":"
data "\t\t\tcase \"MainWindow:_QuitRequested\":"
data "\t\t\tcase \"MainWindow:File:Quit\":"
data "\t\t\t\tleavingLoop = true"
data "\t\t\t\tbreak </code></pre>"
data "<p>and at the bottom appears:</p>"
data "<pre><code>\t\tend switch"
data "\tnext everyCommand"
data "wend"
data "CloseWindow()"
data "end</code></pre>"
data "<p>(there may be some empty lines here. don&rsquo;t worry about them)</p>"
data "<p>DO NOT TOUCH THOSE LINES OF CODE! Everything you do in the main loop happens between those sets of lines.</p>"
data "<p>We&rsquo;re going to do the editing functions first, since they are fairly straightforward. The main loop doesn&rsquo;t care about the order of these CASE statements. We just keep them grouped together to make future changes easier. The first BREAK statement should be on line 17. Open up a new line immediately below and type in the following:</p>"
data "<pre><code>\t\t\tcase \"MainWindow:Edit:Undo/Redo\":"
data "\t\t\t\ttextedit set \"EditSpace\", \"undo\""
data "\t\t\t\tbreak"
data "\t\t\tcase \"MainWindow:Edit:Cut\":"
data "\t\t\t\ttextedit set \"EditSpace\", \"cut\""
data "\t\t\t\tbreak"
data "\t\t\tcase \"MainWindow:Edit:Copy\":"
data "\t\t\t\ttextedit set \"EditSpace\", \"copy\""
data "\t\t\t\tbreak"
data "\t\t\tcase \"MainWindow:Edit:Paste\":"
data "\t\t\t\ttextedit set \"EditSpace\", \"paste\""
data "\t\t\t\tbreak"
data "\t\t\tcase \"MainWindow:Edit:Select All\":"
data "\t\t\t\ttextedit set \"EditSpace\", \"select-all\""
data "\t\t\t\tbreak</code></pre>"
data "<p>Test it and see.</p>"
data "<p>Let&rsquo;s analyze an easy one. The program called Teditor sends a message. The main loop intercepts it and sees that it comes from the View called MainWindow, from the Edit menu, and from the menu item called Cut (note that there are no spaces after the colons). It therefore sends a message to the textedit widget called EditSpace to execute the cut function, which, as we have seen, it already knows how to do. Finally, it executes a BREAK to indicate that it is ready for the next message.</p>"
data "<p>How did we get Undo and Redo on a single menu item? Well, if you undo something and immediately use Undo again, it undoes the undo!</p>"
data "<p>A word about upper and lower case. In yab, variables and commands can be written in upper or lower case, but the names of widgets, data labels and subroutines must be written EXACTLY the way they were first defined. If you try to issue a command to a widget called &ldquo;EDITSPACE&rdquo; your program will crash, because it doesn&rsquo;t exist. Your best bet is to pretend that EVERYTHING is case-dependent, develop a coding style, and stick with that.</p>"
data "<h2>Saving a file</h2>"
data "<p>Losing all our work every time we close Teditor is a drag. Let&rsquo;s activate the Save menu. In the mainloop:</p>"
data "<pre><code>\t\t\tcase \"MainWindow:File:Save\":"
data "\t\t\t\tSaveFile()"
data "\t\t\t\tbreak</code></pre>"
data "<p>This tells Yabadabbadoo to execute a subroutine called <em>SaveFile</em>. Don&rsquo;t bother testing it now. It doesn&rsquo;t exist yet.</p>"
data "<p>We can actually do this with a few lines in the main loop, but a subroutine is neater and you need the practice. Click the <em>New Sub</em> button at the bottom of Yabadabbadoo&rsquo;s main window and enter the name of the new subroutine (just <em>SaveFile</em>, no brackets). The new subroutine appears at the bottom of the list, already selected. Now click the <em>Edit Sub</em> button. The new subroutine appears in your editor window. Enter the following lines between"
data "<pre><code>sub SaveFile()</code></pre>"
data "<p>and<p>"
data "<pre><code>end sub</code></pre></p><p><p>"
data "<pre><code>\tlocal file2save$, filename$"
data "\tfile2save$ = textedit get$ \"EditSpace\""
data "\tif file2save$ &lt;&gt; \"\" then"
data "\t\tfilename$ = filepanel \"save-file\", \"Save File As ...\", \"/boot/home\""
data "\t\topen filename$ for writing as #1"
data "\t\tprint #1 file2save$"
data "\t\tclose #1"
data "\tendif</code></pre>"
data "<p>What&rsquo;s happening here? Back in the <em>prologue</em> we introduced some variables. Those were <em>global variables</em>: the entire program knows about them. Having too many global variables is not good programming practice. Global variables take up unnecessary memory and slow down the program. So here we have two <em>local variables</em>. They only exist while this subroutine is running, then they are gone until the next time you want to open a file. They can even have the same names as global variables (this is NOT recommended. But it can be done).</p>"
data "<p>We take the content of the textedit widget and pour it into the string variable called <em>file2save</em>. Next we check if there is anything in there. We don&rsquo;t want to waste our time saving an empty file. If there is something in there, we go ahead and call up a filepanel to put in a name and directory to save the contents to. Then we open the file in channel 1. The <em>open</em> command has many forms. This happens to be the one I am comfortable with. Old BASIC hands will take one look at this (and the way I structure my <em>for &hellip; next</em> loops) and instantly tell you that I cut my teeth on Sinclair BASIC :-).</p>"
data "<p>Once a channel has been opened, we can divert the <em>print</em> command, which normally prints stuff to the Terminal screen, to the file. We then immediately close that channel. NEVER, EVER leave a channel open any longer than you have to!</p>"
data "<p>But wait! suppose you start saving a file, then change your mind and click <em>Cancel</em> on the filepanel. Try it now.</p>"
data "<p>It crashed, didn&rsquo;t it? Can you work out why?</p>"
data "<p>The next line tries to open an empty string (you cancelled, so there is no filename) as a channel. That is an illegal instruction. You can fix that by inserting the following line just before the one that starts with <em>open</em></p>"
data "<pre><code>\t\tif filename$= \"\" return</code></pre>"
data "<p>That <em>return</em> means &ldquo;get me out of this subroutine completely!&rdquo;</p>"
data "<p>OK, technically, this is a Save As rather than a Save. It throws up a filepanel every time, even if you&rsquo;re working on a file you have already named and saved. I&rsquo;ll leave it to you to think about how to fix that. Here&rsquo;s a clue: put the filename in a global variable. Let&rsquo;s move on.</p>"
data "<h2>Starting a new file</h2>"
data "<p>This is a little trickier. What if there is already something in the texedit widget? We need to ask the user if it should be saved first. Then we clear out the crud and start with a fresh widget. If there is nothing, we do nothing. We could start another instance of teditor, but that is beyond the scope of this tutorial.</p>"
data "<p>Remember that <em>SaveFile</em> subroutine we just created? Who says you can only call it from the main loop?</p>"
data "<p>In the main loop:</p>"
data "<pre><code>\t\t\tcase \"MainWindow:File:New\":"
data "\t\t\t\tNewFile()"
data "\t\t\t\tbreak</code></pre>"
data "<p>In the <em>NewFile</em> subroutine:</p>"
data "<pre><code>\tlocal sos"
data "\tif  textedit get$ \"EditSpace\" &lt;&gt; \"\" then"
data "\t\tsos = alert \"Save Current Text First?\", \"Yes\", \"No\", \"\", \"none\""
data "\t\tif sos = 1 SaveFile()"
data "\t\ttextedit clear \"EditSpace\""
data "\tendif"
data "</code></pre>"
data "<p>Just one new thing here: the local variable sos, which we use to capture user input from the alert dialog, is not a string variable but a <em>numeric variable</em>. Strings and numbers are about as complicated as it gets in yab. Other languages may have a dozen or more kinds of variables.</p>"
data "<h2>Opening a file</h2>"
data "<p>This is the last part of our program. By now you should be able to figure out what to do in the main loop. In the new subroutine you are going to create (you decide on the name!), your code should read</p>"
data "<pre><code>\tlocal file2open$, anewline$"
data "\tNewFile()"
data "\tfile2open$ = filepanel \"load-file\", \"Open Which File?\", \"/boot/home\""
data "\tif file2open$ &lt;&gt; \"\" then"
data "\t\topen file2open$ for reading as #1"
data "\t\twhile(not(eof(1)))"
data "\t\t\tline input #1 anewline$"
data "\t\t\ttextedit add  \"EditSpace\", anewline$ + \"\\n\""
data "\t\twend"
data "\t\tclose #1"
data "\t\ttextedit set \"EditSpace\", \"gotoline\", 1"
data "\t\tendif</code></pre>"
data "<p>But I&rsquo;m not going to tell you what each part does, It&rsquo;s time to start working these things out yourself, line by agonizing line. Welcome to the world of programming.</p>"
data "<p>Before we go: As it stands, Teditor will <em>Quit</em> leaving unsaved changes behind. How would you make sure it didn&rsquo;t do that any more, <em>by inserting a single line of code?</em> By now, you should know.</p>"
data "<h2>Wrapping up your project</h2>"
data "<p>My stats dialogue says 171 lines of code. That is not an exact measure: I cleaned up some empty lines as I went along. Yours might be slightly more. Also, we changed a few existing lines. Still in 70-odd lines of code we went from  a bare window that did nothing to a functioning text editor! Take that, C++!</p>"
data "<p>There is a LOT that can still be improved about Teditor. Trying to load a file that is not a text file will have &hellip; interesting results. But we&rsquo;ve made a start. It works well enough that you can use it. Now let&rsquo;s take it to the next level.</p>"
data "<p>Open up the Teditor.yab file in the binder directory in Pe and take a look at the first few lines. Line 1 should read either</p>"
data "<pre><code>#!yab4ybd</code></pre>"
data "<p>or</p>"
data "<pre><code>#!yab</code></pre>"
data "<p>(<em>yab4ybd</em> was the version of yab bundled with Yabadabbadoo prior to beta 3. If you see this in your prologue, please change it) This line is a special format in the UNIX world that tells a script file (which is what your program is at this point) where to look for its interpreter. If it is found, the script will look for that executable in the PATH (a standard set of directories: in Haiku they all tend to end with <em>/bin</em>). Yabadabbadoo sets this up for you already.</p>"
data "<p>The other thing a script needs to be is <em>chmodded</em>: the system needs to be informed that this is a script, not just another piece of text. Again, Yabadabbadoo sets this up for you, but if you edit your  program in another editor, you may need to know how this works. It&rsquo;s easy. In Terminal:</p>"
data "<pre><code>chmod +x Teditor.yab</code></pre>"
data "<p>If you run Teditor this way and then another yab app you have written, you will see something odd on the Deskbar: they share a single entry. There is a fix for this: insert a new line 2 in Teditor.yab:</p>"
data "<pre><code>mimetype \"application/x-vnd.Teditor\"</code></pre>"
data "<p>Well, that is supposed to work. I haven't had much success with it myself. In any case, this does not work when the yab app is <em>bound</em>, which is where we are going next. There is another fix for that.</p>"
data "<p>You are very proud of your program. You want to put it up on your website or a Haiku software repository so other people can use it. Great! But how do you know if they have the yab executable that your script needs to run? You don&rsquo;t.</p>"
data "<p>With Package Management, you could bundle a version of the yab executable (call it <em>yab4teditor</em>) and run your program against that. Yabadabbadoo does just that, but it is an exceptional case. Better to &ldquo;bind&rdquo; your program. This means that you take the executable and your script and make a single file out of them. This is why yab apps are always so much bigger than other Haiku apps, by the way. But hard drives and RAM are cheap these days, so let&rsquo;s not worry about it.</p>"
data "<p>You can do the binding from Terminal, but Yabadabbadoo had a built-in function that will bind your program and put it on the Desktop for you, ready for testing.</p>"
data "<p>When you have tested your new bound yab app exhaustively, how do we make it run in its own space in the Deskbar? Open it in DiskProbe and search for <em>yab-app</em>. You now need to replace <em>yab-app</em> with a description of your own, and you have exactly those seven characters to work with! What do you know? There are seven characters in <em>Teditor</em>! Save the file.</p>"
data "<p>Now right-click on the bound file and select <em>Add-ons</em>, then <em>FileTypes</em>. If you bound your app from Yabadabbadoo, the signature should be all settled. Ignore the Application flags. Fill in the Version and description fields and drag in a nice icon. Save the settings. Your application is now ready to be packaged into a .zip or .hpkg file for distribution.</p>"
data "<p>We have only been able to touch on a few of yab&rsquo;s many commands in this tutorial. For more, go to Yabadabbadoo&rsquo;s Utilities menu and play around with the yabAssistant.</p>"
data "<p>For more great yab tutorials and tips, drop by http://www.besly.de</p></body></html>"
data "end_of_data"

